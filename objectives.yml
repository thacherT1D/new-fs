---
- :standard_uuid: e8272444-8dfc-49a0-81d9-d5c92026d536
  :standard_name: Track changes over time using a basic Git workflow
  :uuid: 656cc273-e198-4e10-b939-ecd678985b1e
  :name: Perform basic git commands to track changes to a project
  :description: "- `init` to create a git repo\r\n- `status` to check the status of
    a repo\r\n- `add` to add changes to the staging area\r\n- `-A` to add all changes\r\n-
    `-p` to select changes one at a time \r\n- `commit`\r\n    - `-m` to add the commit
    message inline\r\n- `push` - to sent commits to a remote repo\r\n- `pull` - to
    fetch and merge remote commits\r\n- `log` to review the commit history\r\n    -
    --oneline to make it easier to read\r\n    - --graph to see a visual representation
    of branches\r\n    - --all to see every branch\r\n- `clone` - to clone a remote
    repo locally\r\n- `checkout` to revert to a previous commit \r\n- `reset` - to
    reset the current HEAD to a specified state\r\n    - --hard to blow away changes\r\n
    \   - --soft to uncommit changes\r\n- `stash` - to temporarily put untracked changes
    aside\r\n- `diff` - to show the difference between two hashes"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: e8272444-8dfc-49a0-81d9-d5c92026d536
  :standard_name: Track changes over time using a basic Git workflow
  :uuid: 37ad0a03-44e8-47a0-9a32-ca6ac3650e09
  :name: 'Write succinct, descriptive commit messages '
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 37687853-c626-4f58-b9d2-641b1077f92b
  :standard_name: Manage feature development with Git branches using a merge strategy
  :uuid: 5b32e58d-b4e5-4bb5-8f48-81fa1d0dfc54
  :name: Diagram and discuss a feature-branch workflow
  :description: "- create a feature branch\r\n- merge upstream changes\r\n- merge
    feature branch to master\r\n- cleanup feature branches"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 37687853-c626-4f58-b9d2-641b1077f92b
  :standard_name: Manage feature development with Git branches using a merge strategy
  :uuid: 7cd2b108-ac54-4684-bade-11acf54f0267
  :name: Build new features in branches and then merge them into master when ready
  :description: "- branch\r\n- checkout\r\n- merge"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 37687853-c626-4f58-b9d2-641b1077f92b
  :standard_name: Manage feature development with Git branches using a merge strategy
  :uuid: 38fc6d65-6688-4a27-b61e-945adcb095cb
  :name: Resolve merge conflicts
  :description: "- Create some merge conflicts and explain what causes them\r\n- Resolve
    merge conflicts"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 2f892a7c-e360-4218-9c8c-764d8f9418f7
  :standard_name: Share code by pushing and pulling to a remote repository on GitHub
  :uuid: b38d4b91-2a9d-4bb1-b8b3-d0d3a99cd3b7
  :name: Push and pull changes to/from github
  :description: "- Explain what a remote repository is\r\n- Discuss why web developers
    use GitHub as a remote repository service\r\n- Initialize a remote repo on Github\r\n-
    Push to a remote repository and explain + diagram what happened\r\n- Pull from
    a remote repository and explain + diagram what happened"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 3e7127ec-a7a6-417d-b505-16fd9a5909f0
  :standard_name: Collaborate with other developers using clone and fork-based workflows
    with Github
  :uuid: 655d1151-e962-4902-9c74-47eba767f3f2
  :name: Rebase and squash commits when appropriate
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 3e7127ec-a7a6-417d-b505-16fd9a5909f0
  :standard_name: Collaborate with other developers using clone and fork-based workflows
    with Github
  :uuid: 6cf258fe-0f60-43fe-b13b-0aea970efda3
  :name: Submit pull requests from a forked repository
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 3e7127ec-a7a6-417d-b505-16fd9a5909f0
  :standard_name: Collaborate with other developers using clone and fork-based workflows
    with Github
  :uuid: 51272848-0af8-4cd1-a9e7-3e9ad1efa665
  :name: Incorporate feedback from repo owners and add to pull request
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 3e7127ec-a7a6-417d-b505-16fd9a5909f0
  :standard_name: Collaborate with other developers using clone and fork-based workflows
    with Github
  :uuid: 66388224-725f-44d0-a01c-630854b6196b
  :name: Review and accept pull requests
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 7b523c6a-95b7-423a-b3e4-bd7366346911
  :standard_name: Write higher order functions that accept functions as parameters
  :uuid: ff5e1ccd-66ba-4ded-93ab-b5d754c7350b
  :name: Writes functions that accept functions
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Define a higher order function as a function that takes at
    least one function as an argument and/or returns a function\r\n- Distinguish between
    examples of first-order and higher-order functions\r\n- Implement simple algorithms
    with `forEach`\r\n- Invoke functions that are passed as a function, passing arguments\r\n-
    Define functions that take multiple other functions\r\n- Invoke functions, passing
    them multiple functions\r\n- Inline and extract / go between anonymous functions
    and named / function variables\r\n- Use functions that return functions to another
    function as an argument"
- :standard_uuid: 7b523c6a-95b7-423a-b3e4-bd7366346911
  :standard_name: Write higher order functions that accept functions as parameters
  :uuid: a4e15ffa-f956-466a-9156-0811b60f5227
  :name: Can explain what a closure is
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 7b523c6a-95b7-423a-b3e4-bd7366346911
  :standard_name: Write higher order functions that accept functions as parameters
  :uuid: aeb740a8-9358-497b-99e3-9d4a3bcb11e6
  :name: Can explain the order of execution with closures, as well as multiple nested
    closures
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 774786f3-e071-4479-afa8-48d5a0401e7d
  :standard_name: Uses `this` to manipulate the current context
  :uuid: 8ccc8ea9-1a10-44eb-88f0-755756f392d4
  :name: Explicitly refers to the global scope inside of functions with `this`
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 774786f3-e071-4479-afa8-48d5a0401e7d
  :standard_name: Uses `this` to manipulate the current context
  :uuid: ecb619f9-4f1d-442c-b159-69daef26484b
  :name: Adds methods to objects that use `this` to refer to that object
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 774786f3-e071-4479-afa8-48d5a0401e7d
  :standard_name: Uses `this` to manipulate the current context
  :uuid: 95d1a3d2-39ad-4194-b1fa-2b2706c6fa32
  :name: Refers to the new instance inside of a constructor function using ‘this’
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 774786f3-e071-4479-afa8-48d5a0401e7d
  :standard_name: Uses `this` to manipulate the current context
  :uuid: 1dca493d-0643-4871-905b-4c8c0502f3a6
  :name: Explicitly sets the value of `this` with call, bind and apply
  :description: "- Uses .call() to chain constructors when inheriting (mimics ‘super’)\r\n-
    Uses .bind() to set calling context (such as in setTimeout or setInterval or using
    jQuery event handlers)\r\n- Uses .apply() to manually set"
  :guiding_questions: 
  :resources: "https://github.com/gSchool/g11-course-curriculum/blob/master/week06/06_lectures/js-call-apply/js/main.js\r\n\r\nhttps://github.com/gSchool/g11-course-curriculum/blob/master/week06/06_lectures/js-call-apply/js/main.js"
  :instructor_notes: Begin by asking student to create a constructor for a `Vehicle`
    with `make` and `model` parameters. Once student has completed this, ask them
    to create a constructor for `Car` that has `make`, `model`, and `numberOfWheels`
    parameters, this constructor should not duplicate code with `Vehicle` and instead
    should use `call` or `apply`.
- :standard_uuid: bd060210-950b-40d5-b02d-c861cfc93242
  :standard_name: "‘Set the Stage’ before engaging in a learning experience"
  :uuid: 924335f6-c536-4c06-9bc1-8612724c448a
  :name: Clears the stage -- turn off/eliminate potential distractions
  :description: "Fine-tuning your learning process will pay dividends in the long
    run. The three steps presented here will help you create safe, fun learning experiences
    that ensure you get the most out of your time.\r\n\r\nReflect on the 3 steps and
    get in the habit of applying them to everything you do at Galvanize (and beyond!)."
  :guiding_questions: "* What does it mean to *'set the stage'*?\r\n* What would it
    look/sound like for someone to struggle with *setting the stage*?\r\n* What advice
    would you give to a friend who was struggling with *setting the stage*?\r\n* What
    does it mean to *'play'*?\r\n* What would it look/sound like for someone to struggle
    with *play*?\r\n* What advice would you give to a friend who was struggling with
    *play*?\r\n* What does it mean to *'reflect'*?\r\n* What would it look/sound like
    for someone to struggle with *reflect*?\r\n* What advice would you give to a friend
    who was struggling with *reflect*?"
  :resources: "[Learning to Learn Lesson Slides](http://slides.com/evanmoore/learning-to-learn)\r\n\r\nTo
    push your understanding further, explore these great resources:  \r\n\r\n* [Learning
    How to Learn (Coursera)](https://www.coursera.org/learn/learning-how-to-learn)\r\n*
    [A Mind for Numbers](http://www.amazon.com/Mind-For-Numbers-Science-Flunked-ebook/dp/B00G3L19ZU)
    book ($)"
  :instructor_notes: 'Instructors: Watch [this video](https://vimeo.com/134163993)
    before giving the lecture.'
- :standard_uuid: bd060210-950b-40d5-b02d-c861cfc93242
  :standard_name: "‘Set the Stage’ before engaging in a learning experience"
  :uuid: 804d044d-9af6-45eb-8bb4-a9456bf5019f
  :name: Clarify the “what” and the “why”
  :description: "-- determine the objective and the meaning/reason behind it."
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: bd060210-950b-40d5-b02d-c861cfc93242
  :standard_name: "‘Set the Stage’ before engaging in a learning experience"
  :uuid: 3ca23483-e808-4267-b3dd-5e707d228b4b
  :name: Prioritize Process over product
  :description: make ‘winning’ about spending lots of focused time in their Zone of
    Proximal Development (ZPD) and discourage taking shortcuts to just get something
    done.
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 16b2ea59-6c8d-4cfa-8542-ff0fffee2982
  :standard_name: Navigate your computer swiftly using keyboard shortcuts
  :uuid: fd7ec03c-43d0-46b2-b8a7-1dbfe3c1ff40
  :name: 'Students should always use keyboard shortcuts for common programs '
  :description: "* Mac\r\n\t* open programs with spotlight (cmd + space)\r\n\t* access
    settings (cmd + ,) \r\n\t* switch between open applications (cmd + tab)\r\n\t*
    close windows (cmd + w)\r\n\t* quit programs (cmd + q)\r\n* Browser\r\n\t* switching
    tabs\r\n\t* creating tabs\r\n\t* moving to the location bar\r\n\t* opening windows\r\n\t*
    reloading the page\r\n\t* open the javascript console\r\n\t* open the developer
    tools\r\n\t* inspect element (cmd + shift + c)\r\n* Terminal\r\n\t* new tab\r\n\t*
    new split (vertical and horizontal) \r\n\t* new window\r\n\t* move to beginning
    of the line (ctrl + a)\r\n\t* move to the end of the line (ctrl + e)\r\n\t* clear
    the current line (ctrl + u)\r\n\t* halt last command (ctrl + c)\r\n\t* clear the
    screen (ctrl + l)\r\n* Atom/Sublime\r\n\t* New line\r\n\t* move lines up and down\r\n\t*
    new tab\r\n\t* open files\r\n\t* new split\r\n\t* switch between tabs\r\n\t* opens
    with `subl`\r\n* Window Manager (Moom, spectacle, etc.)\r\n\t* resize and position
    windows"
  :guiding_questions: "- What is a package manager?\r\n- Why do package managers exist?\r\n-
    How do you make your window full-width / full-height without using full-screen?\r\n-
    How do you make your window half-width (on both the left and the right)?\r\n\r\nHow
    do you:\r\n\r\n- change between apps?\r\n- change between windows in the same
    app?\r\n- switch between tabs?\r\n- close tabs?\r\n- create new tabs?\r\n- search
    for / open an app?\r\n\r\nHow do you:\r\n\r\n- move to the beginning of a line
    without arrow keys?\r\n- move to the end of a line without arrow keys?\r\n- move
    forward or backward by whole words using arrow keys?\r\n- move to the top of a
    document?\r\n- move to the bottom of a document?\r\n- select all text from the
    cursor to the beginning of the line?\r\n- select all text from the cursor to the
    end of the line?\r\n- select all text from the cursor to the beginning of the
    document?\r\n- select all text from the cursor to the end of the document?\r\n-
    copy and paste text?\r\n- undo and redo changes?\r\n\r\nHow do you:\r\n\r\n- highlight
    the url?\r\n- open a new incognito window?\r\n- refresh the browser?\r\n- refresh
    the browser and clear the cache (hard refresh)?\r\n- submit forms?  And submit
    forms when you are in a textarea?\r\n- how do you find on a page?  How do you
    cycle through found results?  How to you close the find box?\r\n\r\nHow do you:\r\n\r\n-
    move a line up or down?\r\n- edit multiple lines at the same time?\r\n- find and
    replace in a file?\r\n- find and replace across the entire project?\r\n- open
    a project from the command line?\r\n- add and manage packages / plugins?\r\n-
    create new files?\r\n- rename / move files?\r\n- create new folders?\r\n- capitalize
    or lowercase text?\r\n- jump to the matching brace?\r\n- jump to a specific line?\r\n-
    find / open a file?\r\n- autocomplete?\r\n- use snippets to save typing?\r\n\r\nHow
    do you:\r\n\r\n- navigate history without arrow keys?\r\n- navigate file system
    with tab completion?"
  :resources: "[Brew](http://brew.sh/)  \r\n[Explain Shell](http://explainshell.com/)
    \ \r\n[Atom](https://atom.io/)  \r\n\r\n- https://support.apple.com/kb/PH18686?locale=en_US\r\n-
    https://support.apple.com/kb/PH18688?locale=en_US\r\n\r\nChoose one of the following
    for window management:  \r\n\r\n- https://github.com/fikovnik/ShiftIt/releases\r\n-
    https://itunes.apple.com/us/app/moom/id419330170?mt=12\r\n- http://spectacleapp.com/\r\n-
    https://itunes.apple.com/us/app/divvy-window-manager/id413857545?mt=12"
  :instructor_notes: 
- :standard_uuid: d183eb60-fcfc-40d1-9cae-d85f5f349fb0
  :standard_name: Deploy to static hosting sites and explain the function and purpose
    of static hosting
  :uuid: a19a4501-93b9-4ca0-afbb-8cf0defb204a
  :name: Student has a functioning static site deployed with scripts and CSS files
    in subdirectories
  :description: ''
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: d183eb60-fcfc-40d1-9cae-d85f5f349fb0
  :standard_name: Deploy to static hosting sites and explain the function and purpose
    of static hosting
  :uuid: f5c7a5f4-29e1-4651-838e-5a1d6708c258
  :name: Can explain function and purpose of static hosting site / CDN
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: b1e49494-ae23-4e78-9f4a-fa52572b2978
  :standard_name: Explain the function and purpose of Continuous Deployment and Continuous
    Integration and apply them to a project
  :uuid: 8e3939d0-5c2b-48c4-86c8-bc576a36e69a
  :name: Draw a sequence diagram of an app that uses CI and CD
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: b1e49494-ae23-4e78-9f4a-fa52572b2978
  :standard_name: Explain the function and purpose of Continuous Deployment and Continuous
    Integration and apply them to a project
  :uuid: b83ec78e-099d-4237-ac69-2f3b26b381cd
  :name: List common CI / CD tools / services such as Jenkins / Travis Have at least
    one project managed with CD and CI
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 8bfec408-1579-4ecd-80cd-d95de9c1c0ac
  :standard_name: Explain the function and purpose environment variables and use them
    in their projects
  :uuid: ffe1d184-2057-488c-be4c-3c09a32d64ec
  :name: No secrets or environment-specific values are hard-coded in apps, instead
    they are accessed via process.env
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 8bfec408-1579-4ecd-80cd-d95de9c1c0ac
  :standard_name: Explain the function and purpose environment variables and use them
    in their projects
  :uuid: 06f1c683-f559-44f1-a2ab-333d91be03d9
  :name: Explain that environment variables allow you to remove secrets and connection
    strings and test environment variables from code
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 8bfec408-1579-4ecd-80cd-d95de9c1c0ac
  :standard_name: Explain the function and purpose environment variables and use them
    in their projects
  :uuid: b04d696c-1465-4452-b3ae-2b31ab7d9c73
  :name: Installed and configured dotenv, including git ignoring .env, setting their
    local version of the value in their .env file, having a .env.example file
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 8cf1f10a-fc6b-4c09-a2bc-6e4d1a901dad
  :standard_name: Deploy to Heroku (a PaaS Provider)
  :uuid: 5903bff8-8bb9-427c-ae90-7cec5233d8cd
  :name: Student has a functioning Node app up and running that has environment variables
    and attached SQL database
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 79030da6-cfca-479c-8ac2-31826cf70ddd
  :standard_name: Deploy to Pivotal Web Services Cloud Foundry
  :uuid: c1cbcc04-ec0e-4dfa-a6ce-6349fdd30628
  :name: Student has a functioning app up and running that has environment variables
    and attached services
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 14a67719-f04a-4c10-ae39-33ae7142d976
  :standard_name: Deploy an app to EC2 and compare and contrast the AWS core philosophy
    with Heroku and Cloud Foundry and pre-cloud era
  :uuid: ca2183bd-e998-424b-9581-e2a2729df7b4
  :name: Running app on EC2 that meet the requirements
  :description: "- A web server such as Nginx or Apache \r\n- A database such as Postgres
    \r\n- An app server - Node / Ruby / Passenger \r\n- Having started from a CentOS
    or Ubuntu base AMI"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 14a67719-f04a-4c10-ae39-33ae7142d976
  :standard_name: Deploy an app to EC2 and compare and contrast the AWS core philosophy
    with Heroku and Cloud Foundry and pre-cloud era
  :uuid: 8c942ed7-bd76-4f5d-b4c9-9b29967a432b
  :name: Describe elastic IPs / elastic load balancing / elastic block store (infrastructure
    on-demand) in comparison with other options
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 5ef7bda4-d599-4b11-a435-f518c4469be6
  :standard_name: Connect to another computer using SSH
  :uuid: 76ee1655-8785-4438-871d-f3b429854f77
  :name: Connect to another computer using SSH
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6a02b407-69d9-453b-a747-c8b87950cb2b
  :standard_name: Develop and deploy an app using Docker containers
  :uuid: 002d9cc7-d056-4250-aa0f-12f9f6f2d0af
  :name: Written code against a docker container and pushed it a remote environment
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 4d3b234c-6e4d-4af4-9635-a939fe502ebe
  :standard_name: Discuss the role and purpose of devops
  :uuid: 4158eb84-38ba-4cc5-befa-d986eec8d080
  :name: In a short paragraph describe key devops concepts
  :description: "Such as \r\n\r\n- automated configuration management\r\n- automated
    provisioning\r\n- elastic infrastructure\r\n- monitoring\r\n- mentioning tools
    such as Chef, Puppet, Ansible"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: bea6617d-30e3-4bb2-81a4-1ab48d37498e
  :standard_name: Design and implement a RESTful API
  :uuid: 4dc11e12-d234-492a-a927-7ebfe0a88082
  :name: Use HTTP Methods semantically
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: bea6617d-30e3-4bb2-81a4-1ab48d37498e
  :standard_name: Design and implement a RESTful API
  :uuid: 0a845fb0-c76d-4858-8dc7-2305fd19e84f
  :name: Follows naming conventions for URLs and Actions
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: bea6617d-30e3-4bb2-81a4-1ab48d37498e
  :standard_name: Design and implement a RESTful API
  :uuid: 1a412f20-e0f4-431f-a4b5-42dde433befc
  :name: Endpoint paths should contain nouns
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: bea6617d-30e3-4bb2-81a4-1ab48d37498e
  :standard_name: Design and implement a RESTful API
  :uuid: 5b7f7bb0-ef41-4d27-8743-799e73147739
  :name: Nouns are plural
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: bea6617d-30e3-4bb2-81a4-1ab48d37498e
  :standard_name: Design and implement a RESTful API
  :uuid: 299a53d0-b28c-4790-8edb-b17eec274624
  :name: API responses include hypermedia
  :description: A consumer of your API shouldn't have to do any string concatenation.
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: "This would be OK:\r\n\r\n```\r\n[\r\n {id: 1,\r\n name: \"Jeff\",\r\n
    url: \"http://blah.com/users/1\"\r\n]\r\n```"
- :standard_uuid: bea6617d-30e3-4bb2-81a4-1ab48d37498e
  :standard_name: Design and implement a RESTful API
  :uuid: 3d295430-ed77-4c64-af23-a45e3bdc1fa4
  :name: Implements an API with multiple endpoints, each supporting multiple methods
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 4655229a-33c6-4e0f-93e1-71c557c67602
  :standard_name: Document an API using an automated tool
  :uuid: 534972bf-c5d7-486a-aec1-6c2b4d597ca2
  :name: Has documented an API using either a comment-parsing strategy or a documentation
    tool such as Swagger
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: cbaa4c7e-3a15-4530-ac43-bf910951db84
  :standard_name: Secure an API endpoint using token-based authentication and CORS
  :uuid: 28217972-19bc-4d58-a306-1650b47334cf
  :name: Endpoint secured with token-based authentication (JWT or OAuth header)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: cbaa4c7e-3a15-4530-ac43-bf910951db84
  :standard_name: Secure an API endpoint using token-based authentication and CORS
  :uuid: 2a4a3384-674c-4ab1-92a7-3300b07fdeb0
  :name: Explain how and why browsers and servers use specific headers to indicate
    whether a particular resource is available from a web app hosted on a particular
    domain, including what the actual headers are
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: ec89798f-87ee-4691-abee-28f85bcb5c59
  :standard_name: Discuss common API design concepts
  :uuid: 116f64fc-d57d-42d2-987c-25e675cc8eb6
  :name: Talk about hypermedia, HATEOS / JSON-API, automated docs / standardization
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 427bd950-e449-4341-ba01-3e41f552b4bb
  :standard_name: Make sequential asynchronous calls in separate methods and return
    the final result with basic error handling using Promises
  :uuid: 04d5181d-14d3-475b-bce5-f4e256b12f88
  :name: Make multiple async calls and return a single data object
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "that includes a `.then(null, fn)` or a `.catch` in the method,
    and code that calls that function from another module\r\n\r\n\r\nNotes\r\n“Make
    multiple async calls” - such as “find a user, then find their posts, then find
    the comments for those posts”\r\n“Return a single data object” - such as a user
    object with a posts property\r\nOne example is making multiple chained HTTP calls
    from an Angular service and then consuming that from an Angular controller\r\nAnother
    example is making database calls / API calls server side from a module in `lib`
    and then calling those methods from routes\r\n\r\nThis would be acceptable:\r\n\r\n```\r\nfunction
    doStuff(){\r\n  var result = {}\r\n\r\n  $.getJSON(‘/me’).then(function(user){\r\n
    \   result = user;\r\n    return $.getJSON(user.posts_url);\r\n  }).then(function(posts){\r\n
    \   result.posts = posts;\r\n    return $.getJSON(result.comments_url + “?post_ids=”
    + result.posts.map((post)=> post.id).join(“,”)\r\n  }).then(function(comments){\r\n
    \   result.comments = comments;\r\n    return results;\r\n  })\r\n}\r\n\r\n//
    somewhere else\r\ndoStuff().then(function(userWithPostAndComments){\r\n  // handle
    success\r\n}).catch(function(){\r\n  // handle errors\r\n});\r\n```"
- :standard_uuid: 3204ce0a-ae01-48c4-af83-5461f8ee7264
  :standard_name: Make parallel requests using Promise.all
  :uuid: e27d0d4a-c5bc-42dd-a14f-27b30879d890
  :name: Given an array of objects that have properties that contain URLs, generate
    an array of promises, run them with Promise.all and do something with the results.
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: fb851076-a3a8-40f6-9544-5ef14803bdee
  :standard_name: Discuss the basic function and purpose of promises
  :uuid: 662db462-fa64-4a45-865c-54b6826279c6
  :name: Discuss the purpose of promises
  :description: "Purpose:\r\nIdentify that promises are used for deferred and asynchronous
    functions\r\nSolve the problem of “callback hell” (the “pyramid of death”) - decrease
    the cost of change by making it easier to refactor code out into separate methods
    while keeping code readable\r\nIdentify common use cases for promises:\r\nanything
    asynchronous!\r\nsequelize, knex, jquery, angular - all have promises built in"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: fb851076-a3a8-40f6-9544-5ef14803bdee
  :standard_name: Discuss the basic function and purpose of promises
  :uuid: 3b75d021-6c36-4612-bfeb-84ba5381fd0b
  :name: Discuss the function of Promises
  :description: "Function:\r\nExplain that a Promise represents an operation that
    hasn’t completed yet but is expected to in the future\r\nExplain that promises
    have 3 states:\r\npending\r\nfulfilled\r\nrejected\r\nIdentify that promises can
    be chained"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 107c626b-4b43-4357-90a3-093a48c0c8c5
  :standard_name: Set up developer environments for applications written in an unfamiliar
    languages
  :uuid: 85a639d6-59b7-443f-a3ca-72d03a285048
  :name: Install all necessary dependencies and start attached services
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 107c626b-4b43-4357-90a3-093a48c0c8c5
  :standard_name: Set up developer environments for applications written in an unfamiliar
    languages
  :uuid: df62fb5c-a29e-44aa-8821-6cd0f099ae69
  :name: Local database is created and populated
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 107c626b-4b43-4357-90a3-093a48c0c8c5
  :standard_name: Set up developer environments for applications written in an unfamiliar
    languages
  :uuid: 74ac37fd-da32-4a16-80e1-afb377da7030
  :name: Application starts and all “working” features are usable
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: a0adcfbc-995f-4a6e-bd75-41584ab54a9e
  :standard_name: Analyze existing code in applications written in unfamiliar languages
    to fulfill requirements
  :uuid: 529c6f29-3c5e-4ab5-9072-c16201f2f0ec
  :name: Fixes bugs in existing, unfamiliar code (at least 1)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: a0adcfbc-995f-4a6e-bd75-41584ab54a9e
  :standard_name: Analyze existing code in applications written in unfamiliar languages
    to fulfill requirements
  :uuid: 8c241833-1366-4e84-ae77-376af6451193
  :name: Adds features to fulfill requirements (at least 1)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: ee92cc73-7bbc-41a3-af38-719c2195be72
  :standard_name: Write unit tests in a TDD style using Mocha Chai
  :uuid: 7f1700e4-c31e-4d92-ac61-81375d9a09e4
  :name: Describe and employ the tdd red / green / refactor cycle for unit tests /
    anatomy of a test
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: ee92cc73-7bbc-41a3-af38-719c2195be72
  :standard_name: Write unit tests in a TDD style using Mocha Chai
  :uuid: 1b2e927d-7180-4be8-8576-659e3a673313
  :name: Use before / after / beforeEach / afterEach in tests
  :description: ''
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: ee92cc73-7bbc-41a3-af38-719c2195be72
  :standard_name: Write unit tests in a TDD style using Mocha Chai
  :uuid: 4e95049f-894c-494e-ba0a-e9c6a5ea9376
  :name: Run unit tests with mocha chai
  :description: And ideally jasmine
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: 614e6ddd-49c8-459b-b79d-81265d867757
  :standard_name: Discuss agile values and principles
  :uuid: cb85f982-0091-47bc-b147-f491e2f8c855
  :name: Discuss the significance of each of the agile values
  :description: "Student can discuss the significance of each of the agile values:\r\n\r\n*
    Individuals and interactions over processes and tools\r\n* Working software over
    comprehensive documentation\r\n* Customer collaboration over contract negotiation\r\n*
    Responding to change over following a plan"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 614e6ddd-49c8-459b-b79d-81265d867757
  :standard_name: Discuss agile values and principles
  :uuid: 8a1dd7d3-429c-4b6c-8986-5e16135ae8f3
  :name: Student can discuss the meaning behind the 12 agile principles
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: d43c1a6e-7ff9-40cc-8f3d-e23c2c8bc498
  :standard_name: Discuss the pros and cons of automated testing
  :uuid: b97e5112-7bf8-4b00-a33b-e1f93eb518b8
  :name: Discuss pros of automated testing
  :description: 
  :guiding_questions: 
  :resources: "- lower bug count, \r\n- faster pace of change, \r\n- executable documentation,
    \r\n- higher confidence deploys, \r\n- more even development over time"
  :instructor_notes: 
- :standard_uuid: d43c1a6e-7ff9-40cc-8f3d-e23c2c8bc498
  :standard_name: Discuss the pros and cons of automated testing
  :uuid: b1fa2df0-3bd4-4d4a-b619-96443a28e7e9
  :name: Discuss the cons of automated testing
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- added complexity, \r\n- added costs, \r\n- difficulty testing
    truly complex systems, \r\n- unvalidated business hypothesis"
- :standard_uuid: ea7dac47-4782-4657-91bb-da94ca145915
  :standard_name: Work with and describe testing database-driven server-side applications
    w/ Express and Postgres given a working skeleton
  :uuid: 94676226-62ab-47c7-a733-f248e45ac89b
  :name: Talk about test pyramid (unit -> vs integration, acceptance)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: ea7dac47-4782-4657-91bb-da94ca145915
  :standard_name: Work with and describe testing database-driven server-side applications
    w/ Express and Postgres given a working skeleton
  :uuid: f29c8848-de36-4629-82fd-3f769185b91d
  :name: Write tests that require inserting records into a database before making
    assertions
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: ea7dac47-4782-4657-91bb-da94ca145915
  :standard_name: Work with and describe testing database-driven server-side applications
    w/ Express and Postgres given a working skeleton
  :uuid: 334f0472-e3bf-415b-b3c1-65de6addeb31
  :name: Describe what’s necessary to integration test an app with a database.
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- test database w/ a matching a matching schema\r\n- clearing
    data before running tests"
- :standard_uuid: ca4311e4-8013-4b29-b2c4-dd753573c30e
  :standard_name: Diagram and explain a URI
  :uuid: 58c7f9d7-fdca-4891-8f6c-35c6b2936b7f
  :name: Identify the parts of a URL
  :description: "Includes:\r\n\r\n- protocol\r\n- the subdomains, domain and TLD -
    things used to determine IP address\r\n- the port - a way to further “divide”
    a subdomain/domain/tld into separate apps?\r\n- the path - the part of a URL that
    a routing framework uses to figure out what to return\r\n- the query string"
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: "For asking students to dissect a URL use this:\r\n\r\n`http://www.google.com:3000/stuffz?foo=bar&baz=square#Header`\r\n\r\nHow
    would you extract the path from the request string? Use `url.parse`.\r\n\r\nWhat
    is URL encoding?\r\n\r\n- Identify the parts of a url\r\n- Describe what a path
    is and how one would extract it from the request string\r\n- Expand incomplete
    URLs\r\n- Describe how to send query parameters in a URL (?foo=bar&baz=foo)\r\n-
    Describe URL encoding\r\n\r\nincluding: protocol, the subdomains, domain and TLD,
    the port, the path, the query string (optionally the basic authentication username
    / password)\r\n\r\nExplain that if you leave off the protocol and domain, the
    browser will use the current page’s protocol and domain\r\n\r\nwhat it means and
    provide examples of paths that would need to be url encoded"
- :standard_uuid: ca4311e4-8013-4b29-b2c4-dd753573c30e
  :standard_name: Diagram and explain a URI
  :uuid: f6501075-3acf-461a-8825-d71b99089015
  :name: Explain the basic purpose of each part of the URL
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: Explain the purpose of the domain, port, and path.
- :standard_uuid: 08f64fd8-ad16-4e3a-bb92-902b8b54de07
  :standard_name: Write database queries using SQL
  :uuid: ad7bbaed-05f5-4ddc-b4eb-762a9d567891
  :name: Uses common operators and functions for common queries
  :description: "- WHERE\r\n- BETWEEN\r\n- LIKE\r\n- ORDER BY\r\n- LIMIT\r\n- IN"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 08f64fd8-ad16-4e3a-bb92-902b8b54de07
  :standard_name: Write database queries using SQL
  :uuid: 8e1d0b6a-e55d-4f09-92b5-501de538832a
  :name: Writes statements to create and modify datastore structure
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 08f64fd8-ad16-4e3a-bb92-902b8b54de07
  :standard_name: Write database queries using SQL
  :uuid: 8dd9b756-099f-490c-a5a0-81850dd175fc
  :name: Writes and runs CRUD statements using SQL
  :description: "* Insert\r\n* Update\r\n* Delete \r\n* Select"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Execute SQL through psql or files\r\n\r\n* connect to a database\r\n*
    change databases\r\n* execute queries\r\n* quit\r\n* execute imports"
- :standard_uuid: 08f64fd8-ad16-4e3a-bb92-902b8b54de07
  :standard_name: Write database queries using SQL
  :uuid: eba48edd-82ca-4429-b712-ef03da63a62e
  :name: Uses aggregate functions to aggregate data in queries
  :description: "* Group by \r\n* Count\r\n* Min / Max\r\n* Sum"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 25678b07-1b08-42a4-b666-2cfe2d5527e0
  :standard_name: Use ES2015 features to write more concise Javascript
  :uuid: c6a2263c-a6d4-432d-a191-d5a06e87143b
  :name: Uses babel to transpile ES2015 code to ES5
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 25678b07-1b08-42a4-b666-2cfe2d5527e0
  :standard_name: Use ES2015 features to write more concise Javascript
  :uuid: 3340a35b-4f88-4167-84ba-ff55341ce72f
  :name: Describe the new ways you can assign values when declaring object literals
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- {[2+2]: 4}\r\n- var name = ‘hi’; {name}"
- :standard_uuid: 25678b07-1b08-42a4-b666-2cfe2d5527e0
  :standard_name: Use ES2015 features to write more concise Javascript
  :uuid: c16b2371-cb29-4685-822e-30721c2432ae
  :name: Show how destructuring can be used to write more concise code
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "Not currently in node\r\n\r\n[a, b] = [1, 2];"
- :standard_uuid: 25678b07-1b08-42a4-b666-2cfe2d5527e0
  :standard_name: Use ES2015 features to write more concise Javascript
  :uuid: 99c8cd65-8a4f-484a-a10e-e77dfdf1bc8a
  :name: Use a `for-of` loop to iterate over an iterable object
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 25678b07-1b08-42a4-b666-2cfe2d5527e0
  :standard_name: Use ES2015 features to write more concise Javascript
  :uuid: 8837c6fd-ef6e-47db-b445-2653a1ce435d
  :name: Utilize Sets instead of Arrays when appropriate
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 25678b07-1b08-42a4-b666-2cfe2d5527e0
  :standard_name: Use ES2015 features to write more concise Javascript
  :uuid: f36f7159-a342-4910-9962-03a5182e7e9d
  :name: Distinguish between a ‘specification’ and an ‘implementation’
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "Standards: ESHarmony, ES2015, ES5, ES6\r\n\r\nImplementations:
    V8, Webkit, etc"
- :standard_uuid: 25678b07-1b08-42a4-b666-2cfe2d5527e0
  :standard_name: Use ES2015 features to write more concise Javascript
  :uuid: 84bb16d0-c3f6-4409-a131-3d74402fc9a3
  :name: Uses the fat arrow shortcut for writing anonymous functions
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 25678b07-1b08-42a4-b666-2cfe2d5527e0
  :standard_name: Use ES2015 features to write more concise Javascript
  :uuid: d8a5109f-bef3-44a9-8835-a5b114201031
  :name: Use `let` and `const`
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 25678b07-1b08-42a4-b666-2cfe2d5527e0
  :standard_name: Use ES2015 features to write more concise Javascript
  :uuid: 1d92387d-3918-4464-8387-f64754954eae
  :name: Uses the new class syntax, and `super` to call functions from the parent
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 25678b07-1b08-42a4-b666-2cfe2d5527e0
  :standard_name: Use ES2015 features to write more concise Javascript
  :uuid: 82fe6097-d4ba-4753-a677-e0931b744cc1
  :name: Use new features of backtick template strings
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "`Hello ${a} ${b}` instead of ‘Hello ’ + a + ‘ ‘ + b"
- :standard_uuid: 7231cf4a-2dc7-401a-88f9-4159cc1c2e2f
  :standard_name: Access data in datastores through joins
  :uuid: 23667d89-7897-4aae-8604-bc0ffd10fdcf
  :name: Describe the role of Primary keys, Foreign keys, and Referential Integrity
  :description: ''
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: 7231cf4a-2dc7-401a-88f9-4159cc1c2e2f
  :standard_name: Access data in datastores through joins
  :uuid: 313c1b1a-0957-4bdc-b19e-358d04b7d99c
  :name: Uses joins for model relationships (one to one, one to many, many to many)
  :description: "* Inner , left, right, full\r\n* Concept of inner and outer\r\n*
    Joining multiple tables"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 7231cf4a-2dc7-401a-88f9-4159cc1c2e2f
  :standard_name: Access data in datastores through joins
  :uuid: 84472b9a-245e-492d-942b-92ab8ccac31a
  :name: 'Uses correct SQL join for given problem '
  :description: "- Uses correct SQL join for given problem\r\n\r\n"
  :guiding_questions: "\r\n\r\n"
  :resources: "\r\n\r\n"
  :instructor_notes: "\r\n\r\nStudents should be given several use cases where they
    need to choose the right join to get the right data set. \r\ne.g. \" Show me pertinent
    information of all of our people and all of their respective managers where some
    people might not have managers\""
- :standard_uuid: 99acaf90-3559-4542-a2a4-1071eda89553
  :standard_name: Contrast the function and purpose of non-relational and relational
    datastores
  :uuid: 00ed3b44-dbde-41d0-91c2-b59e142bae3a
  :name: Describe the concept of a database schema
  :description: Describe what a database schema is and the process of creating the
    schema
  :guiding_questions: "* What are database schemas for ?   \r\n* What are some examples
    of schema modification statements? \r\n* Compare and contrast SQL databases and
    Mongo"
  :resources: 
  :instructor_notes: "schema modification statements = things like add column, drop
    table, modify , etc. \r\n\r\nDescribe the concept of a database schema  = describe
    tables and columns and data types"
- :standard_uuid: 99acaf90-3559-4542-a2a4-1071eda89553
  :standard_name: Contrast the function and purpose of non-relational and relational
    datastores
  :uuid: 27aaaad5-6124-437f-b8d7-4d6aa1a31d52
  :name: Explains what collections and documents are
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 99acaf90-3559-4542-a2a4-1071eda89553
  :standard_name: Contrast the function and purpose of non-relational and relational
    datastores
  :uuid: 7deaf20c-9b9d-4dce-a7f1-1c1f0885210c
  :name: Explain difference between relational and document based data stores and
    key-value stores
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Users\r\n- Roles\r\n- Permissions (grants)\r\n- Database connection
    strings\r\n- Transactions\r\n\r\nprotocol://user:password@host:port/db-name\r\n\r\npostgresql://root:897654ersdfghj@example.com:5432/products"
- :standard_uuid: 84bbf0ae-2d55-490b-bc84-d4ae4dc45e14
  :standard_name: Discuss and diagram Client-Server Model
  :uuid: d850071f-4e4e-4ca4-8aef-e951033e2c5e
  :name: Sequence Diagram Client-Server Model
  :description: "Including...\r\n\r\n- Client\r\n- Server\r\n- Database\r\n- Communication
    events (represented by arrows)"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 84bbf0ae-2d55-490b-bc84-d4ae4dc45e14
  :standard_name: Discuss and diagram Client-Server Model
  :uuid: fa9b0fe6-c083-45fb-8e43-a355cc39d588
  :name: Explain key ideas about how the web works
  :description: "- just computers talking to each other\r\n- Explain that client and
    server communication is peer communication\r\n- distinguish which part of an app
    runs on the client or server\r\n- recognize client / server roles depend on communication
    relationship\r\n- give an example of when this is the case"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Explain what is and isn't under our control as a web developer.\r\n-
    Describe the history of the web.\r\n- Explain key ideas about how the web works\r\n-
    Explain the role that DNS plays \r\n- Explain key ideas\r\n- Define and describe
    DNS and IP address\r\n- Describe how servers/redirects interact\r\n- when requesting
    a web page, including resolving the domain name into an IP address\r\n\r\nExplain
    these key ideas:\r\n\r\ngiven that most sites are load-balanced, the server that
    serves the initial request may be different than the server that serves the second
    request, and as such the server cannot store any information in memory about the
    previous request and expect it to be read on subsequent requests\r\n\r\nWhat is
    an IP address? What is DNS?"
- :standard_uuid: 7ec77c83-b497-49c3-b08c-b729a77090b3
  :standard_name: Design and implement schemas
  :uuid: 30bcc43c-fc3e-4c17-b2a9-05829c4c344f
  :name: Explains what a data/database schema is
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 7ec77c83-b497-49c3-b08c-b729a77090b3
  :standard_name: Design and implement schemas
  :uuid: b139e0a6-ead1-478a-aedc-22df930b1939
  :name: Normalizes data to Third Normal Form
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 7ec77c83-b497-49c3-b08c-b729a77090b3
  :standard_name: Design and implement schemas
  :uuid: 752e5115-1a04-41d6-8290-b8ba98aa54d8
  :name: Uses appropriate indexes
  :description: foreign keys / unique indexes
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 7ec77c83-b497-49c3-b08c-b729a77090b3
  :standard_name: Design and implement schemas
  :uuid: efa4c1dd-9327-401d-9c3d-99c99f1cd08c
  :name: Utilizes common column types
  :description: "- VARCHAR\r\n- INT\r\n- CHAR\r\n- SERIAL\r\n- DATETIME\r\n- BOOLEAN\r\n-
    TEXT"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 7ec77c83-b497-49c3-b08c-b729a77090b3
  :standard_name: Design and implement schemas
  :uuid: 9952ca07-e16e-4a85-b4a3-d21b39db43cc
  :name: Creates DB users w/ permissions for specific role (such as production user
    just having select, insert, update, delete)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 7ec77c83-b497-49c3-b08c-b729a77090b3
  :standard_name: Design and implement schemas
  :uuid: 323bdb91-b796-4e0e-b047-782bb6d326b2
  :name: Build a schema using SQL commands
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 7ec77c83-b497-49c3-b08c-b729a77090b3
  :standard_name: Design and implement schemas
  :uuid: ef3b6a62-e70f-4bdb-99c0-96a62e98d8ae
  :name: Models relationships using ERD
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 07448ee9-9e09-43de-9afd-c4acba35a6c2
  :standard_name: Touch type code at least 40 WPM
  :uuid: f0155e56-bd8f-43f6-8c43-2e2d87d005d4
  :name: Students can type at least 40 WPM
  :description: 'In this exercise: https://typing.io/lesson/javascript/jquery/traversing.js/2'
  :guiding_questions: 
  :resources: 
  :instructor_notes: "Using the following exercise  \r\nhttps://typing.io/lesson/javascript/jquery/traversing.js/2"
- :standard_uuid: 97b70126-a21d-4f83-a7cd-09855c9fa748
  :standard_name: Discuss the basic function and purpose of web sockets
  :uuid: 94e3513f-c1a0-4be2-853f-ae68e6d19fa0
  :name: Identify that sockets are what enable realtime applications with server-side
    push
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 97b70126-a21d-4f83-a7cd-09855c9fa748
  :standard_name: Discuss the basic function and purpose of web sockets
  :uuid: 66f99309-2914-4084-b476-07213c308324
  :name: Contrast sockets with HTTP requests / responses
  :description: request and response vs persistent connections
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 97b70126-a21d-4f83-a7cd-09855c9fa748
  :standard_name: Discuss the basic function and purpose of web sockets
  :uuid: a09bec83-aaf5-47a0-9e2c-f83454446bc7
  :name: Identify apps that use sockets like Google Docs / Slack
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 52699761-1945-4c26-aeb7-dd2f3ea2f960
  :standard_name: Explain the scrum process and define key terms
  :uuid: 9a09c9d5-b65f-4152-8af2-95b19e9f0035
  :name: 'Student can describe the steps in the scrum process, including the following
    key words:'
  :description: "Student can describe the steps in the scrum process, including the
    following key words:\r\n\r\n* sprint / iteration\r\n* story\r\n* epic\r\n* story
    point\r\n* velocity\r\n* stand-up\r\n* backlog\r\n* retrospective\r\n* Scrum Master\r\n*
    product owner"
  :guiding_questions: "Write a paragraph connecting the terms above.\r\n\r\nExample:
    “At the beginning of each 2-week sprint on a project, the product owner grooms
    the backlog, and selects a number of stories based on the velocity the team achieved
    on the previous sprint. Every day, the Scrum Master runs a brief stand-up where
    they articulate what they did the day before, what they plan to do today, and
    what they’re blocked on. At the end of the sprint, the team reviews and delivers
    their completed work to the customer, and then the Scrum Master does a retrospective
    with the team."
  :resources: 
  :instructor_notes: 
- :standard_uuid: 349b2e45-b20a-44d1-80c8-1216e14c301f
  :standard_name: Access data using an ORM / Knex
  :uuid: 299a4c8e-b303-4b35-85f2-be3d8f457d91
  :name: Protects against SQL injection
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 349b2e45-b20a-44d1-80c8-1216e14c301f
  :standard_name: Access data using an ORM / Knex
  :uuid: 268b0436-7779-4728-94f7-16796ed13ecd
  :name: Uses transactions to ensure data integrity
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 349b2e45-b20a-44d1-80c8-1216e14c301f
  :standard_name: Access data using an ORM / Knex
  :uuid: 84eb8aaa-5544-413c-99bc-f4ac202be025
  :name: Build and run migrations to manage your database
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 349b2e45-b20a-44d1-80c8-1216e14c301f
  :standard_name: Access data using an ORM / Knex
  :uuid: 54954a7d-d5a8-4c64-ae17-7928b78f426f
  :name: Fetch all the associated data before rendering your view
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 349b2e45-b20a-44d1-80c8-1216e14c301f
  :standard_name: Access data using an ORM / Knex
  :uuid: 03596f78-8897-4f0d-8813-03ef0262b6b8
  :name: Use the ORM ‘classes’ to encapsulate business logic around your data
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 349b2e45-b20a-44d1-80c8-1216e14c301f
  :standard_name: Access data using an ORM / Knex
  :uuid: 4ba8758e-bba7-4d25-a03c-e8b54fdee25b
  :name: Build methods for handling complicated queries
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 24654e75-c03f-4f7f-83a6-3487cbb6e063
  :standard_name: Use dotfiles to configure projects, environments, and tools
  :uuid: 899f2de5-c1e3-4b86-8c5a-0ebef1629f07
  :name: View Dotfiles using ls -la
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 24654e75-c03f-4f7f-83a6-3487cbb6e063
  :standard_name: Use dotfiles to configure projects, environments, and tools
  :uuid: 378c1085-62f1-4cba-9b26-cc3937e2acba
  :name: Use dotfiles to encapsulate environment variables for a project
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 24654e75-c03f-4f7f-83a6-3487cbb6e063
  :standard_name: Use dotfiles to configure projects, environments, and tools
  :uuid: 79094b62-db34-4cf7-9ac4-e465d082b91c
  :name: Use dotfiles to configure tools like bash
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 5b704c5f-75af-4039-a691-4f2dd8ba2971
  :standard_name: Identify the parts of an HTTP request and response and discuss their
    purpose
  :uuid: 32b99e0d-a427-4ecf-ab7c-52d644b345c1
  :name: Describe what happens in a redirect scenario and diagram it
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 5b704c5f-75af-4039-a691-4f2dd8ba2971
  :standard_name: Identify the parts of an HTTP request and response and discuss their
    purpose
  :uuid: 2208ffe1-f052-465f-95cd-859fd52eba17
  :name: Describe the format and purpose of HTTP Requests and Responses
  :description: 
  :guiding_questions: 
  :resources: HTTP is the _hypertext transfer protocol_. It is the _protocol_, or
    system of rules for communicating that enables browsers to communicate over a
    network like the internet.
  :instructor_notes: "- Like a file being sent back from a server to a client\r\n-
    Like a file being sent to a server"
- :standard_uuid: 5b704c5f-75af-4039-a691-4f2dd8ba2971
  :standard_name: Identify the parts of an HTTP request and response and discuss their
    purpose
  :uuid: df0cbc61-c9b3-4e85-8492-357784355dd9
  :name: Identify the parts of a request and describe their function
  :description: "- Request line\r\n  - Verb\r\n  - Path\r\n- Headers\r\n- Body"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Describe the 3 parts of an HTTP request - request line, the
    headers, the body\r\n- Describe how to send url-encoded parameters in the request
    body\r\n- Describe how to send raw JSON in the request body"
- :standard_uuid: 5b704c5f-75af-4039-a691-4f2dd8ba2971
  :standard_name: Identify the parts of an HTTP request and response and discuss their
    purpose
  :uuid: 44765767-6045-4257-ba31-f3b6bc973474
  :name: Identify the parts of a response and describe their function
  :description: "- Response line\r\n- Status Code\r\n- Status Messages\r\n- Headers\r\n-
    Body"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: ef7e9988-6893-46ef-a88f-069a4298a5cc
  :standard_name: Build CRUD apps in Express
  :uuid: 93fea93c-e26b-4f89-a430-3f3eec85ded0
  :name: Structure an express app using standard idioms
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "At least a routes folder, maybe also a controllers folder\r\nWhen
    models are introduced, they exist in their own folder\r\nFavor having index.js
    files"
- :standard_uuid: ef7e9988-6893-46ef-a88f-069a4298a5cc
  :standard_name: Build CRUD apps in Express
  :uuid: 597266b1-9d0f-46c6-88d9-3313824bc203
  :name: Use Correct mount points
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: ef7e9988-6893-46ef-a88f-069a4298a5cc
  :standard_name: Build CRUD apps in Express
  :uuid: dd633cd5-097d-4ece-8618-63aaf333b3a8
  :name: Propagate errors to express’s error handling mechanism via next(err)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: ef7e9988-6893-46ef-a88f-069a4298a5cc
  :standard_name: Build CRUD apps in Express
  :uuid: b5893abb-4d75-48e5-a638-73c3cf73c470
  :name: Define schemas using Knex
  :description: ''
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: "----------\r\n\r\nOld stuff\r\n\r\n- Introduction to MongoDB
    - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/db/mongodb-introduction.instructor.md
    (May require some minor sequening because it talks about relational databases
    as well)\r\n- Querying and Aggregation in MongoDB - https://github.com/gSchool/mongodb-introduction-to-querying-and-aggregation
    (Exercises to work with queries, similar to AR challenge)\r\n- Cheat Sheet - https://blog.codecentric.de/files/2012/12/MongoDB-CheatSheet-v1_0.pdf
    (Good comparisons w/ SQL)\r\n- Guide to NoSQL - http://blog.nahurst.com/visual-guide-to-nosql-systems
    (NoSQL Overview)\r\n- https://github.com/gSchool/mongo_console_exercises\r\n-
    https://github.com/gSchool/mongo_zoo_assocations_app\r\n- https://github.com/gSchool/mongodb-bookstore/\r\n-
    https://github.com/gSchool/mongodb-introduction-to-querying-and-aggregation\r\n-
    https://github.com/gSchool/mongoose-choose-your-own-resource\r\n- https://github.com/gSchool/mongoose-one-to-many\r\n-
    https://github.com/gSchool/mongoose_countries_app"
- :standard_uuid: ef7e9988-6893-46ef-a88f-069a4298a5cc
  :standard_name: Build CRUD apps in Express
  :uuid: 95cece3b-7899-4714-826d-03a66a400a44
  :name: Use express static
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: ef7e9988-6893-46ef-a88f-069a4298a5cc
  :standard_name: Build CRUD apps in Express
  :uuid: 39b1d0ab-e970-40d8-b56d-11f16206143b
  :name: Pass data from routes to templates via locals and generate HTML using a templating
    package including layouts and partials
  :description: "- setting locals in middleware\r\n- using layouts to remove duplication"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "Used to be:\r\n\r\n- Re-render templates w/ error messages if
    input is invalid server-side (old)\r\n- Define routes that render templates (old)\r\n-
    Render partials (old)\r\n- Write valid template syntax including nesting, loops
    and conditionals (old)\r\n- Explain layouts (old)\r\n- Pass data from routes to
    templates via locals and generate HTML using a templating package including layouts
    and partials\r\n- Render pre-populated form controls with a templating language
    (jade, swig, etc) (old)\r\n- Install custom template languages like Handlebars
    (old)\r\n- Use layouts effectively (old)"
- :standard_uuid: ef7e9988-6893-46ef-a88f-069a4298a5cc
  :standard_name: Build CRUD apps in Express
  :uuid: 442454f0-dcc2-42a4-9587-7dbf0e9d7e40
  :name: Includes client-side code
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "Used to be:\r\n\r\n- Include script tags in layouts (old)\r\n-
    Use HTML5 attributes to validate user input client-side (old)\r\n- Explain the
    difference between client-side and server-side code (old)\r\n- Includes client-side
    code"
- :standard_uuid: ef7e9988-6893-46ef-a88f-069a4298a5cc
  :standard_name: Build CRUD apps in Express
  :uuid: 4d34910c-ef8b-4a43-a578-5bb0022a6c14
  :name: Define routes and attach callback functions to those, and include middleware
    functions
  :description: 'Examples: finding parent resources, authorization, currentUser etc...'
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: ef7e9988-6893-46ef-a88f-069a4298a5cc
  :standard_name: Build CRUD apps in Express
  :uuid: 986564f6-b874-4228-97b9-0909fe210484
  :name: Extract requests' data from req, including req.params / req.body / req.query
  :description: ''
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: b5a931dd-84f2-45fe-9fd0-e254a2c6f806
  :standard_name: Contrast statically-typed and dynamically-typed languages
  :uuid: 1194f008-4b13-44ce-b316-f918e59baa38
  :name: Defines return types of methods in statically typed languages
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: method signatures
- :standard_uuid: b5a931dd-84f2-45fe-9fd0-e254a2c6f806
  :standard_name: Contrast statically-typed and dynamically-typed languages
  :uuid: 6d370a95-d876-439a-b84c-70455bc63048
  :name: Declaring variables using types
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: b5a931dd-84f2-45fe-9fd0-e254a2c6f806
  :standard_name: Contrast statically-typed and dynamically-typed languages
  :uuid: 5b4bfb0a-e126-4936-9469-7a908b8a6571
  :name: Identifies pros and cons of each
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: Statically typed languages need less testing
- :standard_uuid: b5a931dd-84f2-45fe-9fd0-e254a2c6f806
  :standard_name: Contrast statically-typed and dynamically-typed languages
  :uuid: c6af9edd-cb1e-4f2e-a81f-a23c07893aed
  :name: Describe what it means for a language to be statically typed vs. dynamically
    typed
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: compile time vs. runtime
- :standard_uuid: 5a36d842-c508-4cbe-906d-f586f3b0e424
  :standard_name: Complete projects using an agile methodology
  :uuid: c2091153-9447-4a52-a781-0c017bc1696b
  :name: Follow agile best-practices
  :description: "* Write and prioritize stories/features\r\n* Complete one feature
    before moving on to the next\r\n* Go through an acceptance process with a stakeholder\r\n*
    Track their progress using an agile project management tool"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "Old success criteria\r\n\r\n- Student completes a software project
    where they:\r\n- Write and prioritize stories/features\r\n- Complete one feature
    before moving on to the next\r\n- Go through an acceptance process with a stakeholder\r\n-
    Track their progress using an agile project management tool"
- :standard_uuid: 20e0212e-c577-465c-906f-5f3491a6fdfe
  :standard_name: Describe what server-side frameworks like Express do
  :uuid: aa9158e6-b6d6-43af-8add-4768aac8ca34
  :name: Describe how Express is an abstraction on top of HTTP - draw parallels between
    express concepts and HTTP concepts
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 20e0212e-c577-465c-906f-5f3491a6fdfe
  :standard_name: Describe what server-side frameworks like Express do
  :uuid: 152215ae-99b9-4d79-bea5-7dc7bb3b5b85
  :name: Describe what the express static middleware does
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 20e0212e-c577-465c-906f-5f3491a6fdfe
  :standard_name: Describe what server-side frameworks like Express do
  :uuid: 83a4fefb-05cc-463b-9f7a-6eb1764270dc
  :name: Describe server-side validations
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 20e0212e-c577-465c-906f-5f3491a6fdfe
  :standard_name: Describe what server-side frameworks like Express do
  :uuid: b92ffdc1-cbe0-4e74-9a32-2b09724fa551
  :name: Describe how res generates the response string
  :description: The difference between calling `res.render`, `res.send`, `res.end`,
    `res.json`, `res.sendFile`
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: 20e0212e-c577-465c-906f-5f3491a6fdfe
  :standard_name: Describe what server-side frameworks like Express do
  :uuid: 40294a6c-e014-4352-8ae2-4dae09cab9af
  :name: Describe why to use a redirect over a render
  :description: including mention of the browser refresh functionality / “resubmit
    this form?”
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 20e0212e-c577-465c-906f-5f3491a6fdfe
  :standard_name: Describe what server-side frameworks like Express do
  :uuid: be026802-09f0-466f-acca-ebad7435c973
  :name: List which standard CRUD actions should redirect (create, update, delete)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 20e0212e-c577-465c-906f-5f3491a6fdfe
  :standard_name: Describe what server-side frameworks like Express do
  :uuid: 43dd0b3e-a13b-464a-acc5-fa4949207ec4
  :name: Describe difference between execution of client-side js and server-side js
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 20e0212e-c577-465c-906f-5f3491a6fdfe
  :standard_name: Describe what server-side frameworks like Express do
  :uuid: 42b1deac-5b2f-41ec-b639-1153b7732a98
  :name: Describes what populates req.params, req.body (body parser), req.query
  :description: 
  :guiding_questions: 
  :resources: https://github.com/gSchool/g11-course-curriculum/tree/master/week07/07_exercises/node-signup-form
  :instructor_notes: 
- :standard_uuid: 20e0212e-c577-465c-906f-5f3491a6fdfe
  :standard_name: Describe what server-side frameworks like Express do
  :uuid: 28e52a8f-ef06-4545-91bf-aa04ee681256
  :name: Describe and sequence diagram each CRUD action including
  :description: "- Describe all 7 routes, their verbs, paths etc..\r\n- Sequence diagram
    each CRUD action including\r\n    - Browser\r\n    - Database\r\n    - Routes\r\n
    \   - Templates"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: edf5be91-67e1-4e8b-a6ee-ec5b9fc16e09
  :standard_name: Solve interview-style questions using Java
  :uuid: 885726c5-2ec5-404b-b614-d98c33c3c909
  :name: Given a cracking the coding interview problem, write a solution in Java
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 960362a6-e341-487b-a292-95840148c429
  :standard_name: Discuss the semantics of common HTTP Verbs, Headers, and Status
    Codes
  :uuid: 266591ef-8696-4046-8dd4-6f7513ebfa4f
  :name: Discuss Status codes
  :description: such as 200, 404, 500 etc…
  :guiding_questions: 
  :resources: 
  :instructor_notes: "Provide an example of an HTTP status code (not 200). What is
    the usefulness of this?\r\n\r\nStatus codes\r\n- 10x - Informational\r\n- 20x
    - Success\r\n- 30x - Redirection\r\n- 40x - Client Error\r\n- 50x - Server Error"
- :standard_uuid: 960362a6-e341-487b-a292-95840148c429
  :standard_name: Discuss the semantics of common HTTP Verbs, Headers, and Status
    Codes
  :uuid: efd97052-7a48-40af-ae38-e57cbc103bf6
  :name: Discusses Verbs
  :description: "Verbs:\r\n- GET\r\n- POST\r\n- PATCH/PUT\r\n- DELETE"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 960362a6-e341-487b-a292-95840148c429
  :standard_name: Discuss the semantics of common HTTP Verbs, Headers, and Status
    Codes
  :uuid: 40513ddb-015e-43a8-bb79-540a0e375e39
  :name: Add appropriate headers to an HTTP Response
  :description: 
  :guiding_questions: 
  :resources: "- https://github.com/gSchool/sequence-diagrams"
  :instructor_notes: "Add appropriate headers to an HTTP Response\r\n- Cache\r\n-
    Content-type\r\n- Content-length\r\n- x-types - description as nonstandard is
    enough\r\n\r\nOther things:\r\n\r\n- Draw a sequence diagram of a redirect that
    shows two separate requests / responses and how it instruct the client how to
    render the response body\r\n- Add appropriate headers to an HTTP Response\r\n-
    Explain content-type header\r\n- Describe how a client asks for a specific return
    mime-type with the Accept header\r\n- Describe how a client specifies the mime-type
    of the body with the content-type header"
- :standard_uuid: 0aa5d3c6-9b6c-4c71-a680-35500aec7773
  :standard_name: Define and explain the significance of the major principles of Object
    Oriented Programming
  :uuid: bfd37c79-93a0-44b6-b58f-3fd653c7d8ab
  :name: Inheritance
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- using super\r\n- overloading methods\r\n- overriding methods\r\n-
    composition"
- :standard_uuid: 0aa5d3c6-9b6c-4c71-a680-35500aec7773
  :standard_name: Define and explain the significance of the major principles of Object
    Oriented Programming
  :uuid: 9baf32dc-da66-4bbf-8cb6-6550c55b9408
  :name: Polymorphism
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Subclasses / classes w/ an interface have the same method
    signatures\r\n- Liskov"
- :standard_uuid: 0aa5d3c6-9b6c-4c71-a680-35500aec7773
  :standard_name: Define and explain the significance of the major principles of Object
    Oriented Programming
  :uuid: 2f528642-84f4-4f02-87e2-f07a3a7459c0
  :name: Encapsulation
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- behavior and state contained together\r\n- public vs private
    vs protected\r\n- understand the concept of visibility"
- :standard_uuid: 0aa5d3c6-9b6c-4c71-a680-35500aec7773
  :standard_name: Define and explain the significance of the major principles of Object
    Oriented Programming
  :uuid: a2ae800e-d4a5-4944-af91-e8af6faace4d
  :name: Abstraction
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- interfaces\r\n- modeling real-world"
- :standard_uuid: 0aa5d3c6-9b6c-4c71-a680-35500aec7773
  :standard_name: Define and explain the significance of the major principles of Object
    Oriented Programming
  :uuid: 343c9687-3412-4e7a-828f-c1013f5604aa
  :name: Explain how these 4 pillars encourage agile development / low cost of change
  :description: "- Summarize the three core OO principles (Encapsulation, Inheritance,
    Polymorphism, Abstraction) in your own words\r\n- Explain how these 4 pillars
    encourage agile development / low cost of change"
  :guiding_questions: "1. What is Object Oriented Programming?\r\n1. In your own words,
    explain what encapsulation is. Provide an example.\r\n1. In your own words, explain
    what inheritance is. Provide an example.\r\n1. In your own words, explain what
    polymorphism is. Provide an example."
  :resources: "##### External Resources\r\n\r\n* [Encapsulation in JavaScript](http://www.intertech.com/Blog/encapsulation-in-javascript/)\r\n*
    [Inheritance and the Prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)\r\n\r\n#####
    Exercises\r\n\r\n1. [Encapsulation](https://github.com/gSchool/js-encapsulation)\r\n1.
    [Polymorphism with Node.js](https://github.com/gSchool/js-polymorphism-guitar-store)"
  :instructor_notes: 
- :standard_uuid: c8baa104-1646-4d20-ac5d-40fe886d3bd8
  :standard_name: Build a single-page CRUD application in Angular using routing, factories
    / services and $http
  :uuid: 76b54c37-86a7-4a11-9497-d857dd12934d
  :name: "$http calls get back ids of resources and add them to the in-memory copies"
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: c8baa104-1646-4d20-ac5d-40fe886d3bd8
  :standard_name: Build a single-page CRUD application in Angular using routing, factories
    / services and $http
  :uuid: d46e91e1-1475-487e-a818-6c0da573feaf
  :name: 'Has associated resources on the same page (ex: posts w/ likes)'
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: c8baa104-1646-4d20-ac5d-40fe886d3bd8
  :standard_name: Build a single-page CRUD application in Angular using routing, factories
    / services and $http
  :uuid: 38566525-59ce-4a2d-8ed8-a253072eb975
  :name: Build and deploy an SPA in Angular that uses built-in directives, routes,
    $http, controllers, services/factories, built-in filtering / sorting, and no jQuery-style
    code
  :description: " - For network calls feel free to use:\r\n    - `$http`\r\n    -
    https://docs.angularjs.org/api/ngResource\r\n    - https://github.com/mgonto/restangular\r\n-
    For routers, consider using https://github.com/angular-ui/ui-router"
  :guiding_questions: ''
  :resources: "- https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk"
  :instructor_notes: "------------\r\n\r\nUsed to be...\r\n\r\n- Explain the purpose
    of Angular (1) (orig)\r\n- Build and deploy an SPA in Angular that uses built-in
    directives, routes, $http, controllers, services/factories, built-in filtering
    / sorting, and no jQuery-style code\r\n- Compare Angular to other JS frameworks
    (1) (orig)\r\n- Correctly setup a simple Angular app (1) (orig)\r\n- Explain the
    concept of 2-way data binding (2) (orig)\r\n- Use ng-model to bind data to the
    scope (2) (orig)\r\n- Compare and contrast Angular expressions to ERB or EJS  (3)
    (orig)\r\n- Use filters and bound inputs in expressions  (3) (orig)\r\n- Explain
    the role of Angular filters (3) (orig)\r\n- List 4 built-in filters (3) (orig)\r\n-
    Explain client-side MVC (4) (orig)\r\n- Define scope in Angular (4) (orig)\r\n-
    Explain the role of controllers in Angular (4) (orig)\r\n- Define Angular modules
    (4) (orig)\r\n- Explain the purpose of the ng-controller directive (4) (orig)\r\n-
    Use $scope to output values calculated in a controller (4) (orig)\r\n- Debug AngularJS
    apps with Batarang (orig)"
- :standard_uuid: e27bebe6-5b07-428d-9400-2d8f08944076
  :standard_name: Identify and diagram common data structures
  :uuid: 566a41fc-5365-49bd-b472-654432e8a4e6
  :name: Identify and diagram an Array
  :description: ''
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: "## Assessments\r\n\r\nGive the student an array, have them come
    up with a diagram that looks like: [a picture goes here]"
- :standard_uuid: e27bebe6-5b07-428d-9400-2d8f08944076
  :standard_name: Identify and diagram common data structures
  :uuid: f0757a99-ff95-45cc-96b9-0fbaafc1a447
  :name: Identify and diagram a hash table
  :description: ''
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: e27bebe6-5b07-428d-9400-2d8f08944076
  :standard_name: Identify and diagram common data structures
  :uuid: 0e19c33c-8050-4dfb-b7cb-130ec02932ba
  :name: Identify and diagram a linked list
  :description: Identify and diagram a linked list as a set of boxes with pointers
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: e27bebe6-5b07-428d-9400-2d8f08944076
  :standard_name: Identify and diagram common data structures
  :uuid: 6fb188a6-cd6e-4a1f-820a-28d22e53043a
  :name: Identify and diagram a stack
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: e27bebe6-5b07-428d-9400-2d8f08944076
  :standard_name: Identify and diagram common data structures
  :uuid: 2038e0e3-fef6-49fe-90f1-2fc32c94d726
  :name: Identify and diagram a queue
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: e27bebe6-5b07-428d-9400-2d8f08944076
  :standard_name: Identify and diagram common data structures
  :uuid: d9559c72-dd79-4663-9784-25ae9b5d3b0f
  :name: Identify and diagram tries
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: e27bebe6-5b07-428d-9400-2d8f08944076
  :standard_name: Identify and diagram common data structures
  :uuid: 4b8eb43c-e9cd-4dd1-ac4b-534793d44f23
  :name: Identify and diagram a tree
  :description: Identify and diagram a tree as a set of nodes with pointers to their
    children
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: e27bebe6-5b07-428d-9400-2d8f08944076
  :standard_name: Identify and diagram common data structures
  :uuid: 288d9ef2-5611-4c03-98b9-7953a678709b
  :name: Identify and diagram a graph
  :description: Identify and diagram a graph as a as an unordered set of nodes with
    pointers to other nodes
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: c5ceb050-621f-4df2-8cda-18cce44f91de
  :standard_name: Create and apply style guides to an application
  :uuid: 245b66ad-20e7-4881-8d70-4153bae2cb7f
  :name: The style guide should include
  :description: "- Typography\r\n- Audience\r\n- Proportions\r\n- Composition\r\n-
    Visual hierarchy\r\n- Color choices"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: c5ceb050-621f-4df2-8cda-18cce44f91de
  :standard_name: Create and apply style guides to an application
  :uuid: 4a27931b-63e6-4471-94f4-d4bfecce21f6
  :name: Work from an Exemplar Style guide
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: d62923ca-e93e-46c3-bbcb-454411233ed9
  :standard_name: 'Identify common protocols and explain their purpose '
  :uuid: d750efcd-a878-4f92-b94c-1342d12c5d8b
  :name: Explain that protocols exist as a shared contract that helps machines communicate
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 'optional: compare to protocols in everyday life: mail, greetings,
    holidays/traditions'
- :standard_uuid: d62923ca-e93e-46c3-bbcb-454411233ed9
  :standard_name: 'Identify common protocols and explain their purpose '
  :uuid: c6e319a9-fe3e-4486-bb98-b2c409ac99c8
  :name: Identify and describe the purpose (in a sentence) of common protocols
  :description: "- FTP\r\n- HTTP/S\r\n- TCP\r\n- SMTP\r\n- SSH"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Describe that HTTP requests are not encrypted\r\n- and give
    examples of common protocols\r\n- that HTTPS requests are encrypted with an SSL
    certificate and served from port 443 by default\r\n- and are served from port
    80 by default\r\n- FTP - (insert agreed-upon definitions)\r\n- HTTP/S - \r\n-
    TCP - \r\n- SMTP - \r\n- SSH -"
- :standard_uuid: 06005077-158b-4cd8-903f-562b709aa071
  :standard_name: Build a web app that separates concerns using models, views, and
    controllers
  :uuid: b7d26d28-a8f5-4fb2-82d4-9d821cff97fa
  :name: Build a web app that separates concerns using models, views, and controllers
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 4794e677-7800-4e74-991e-b2ec21f40c5a
  :standard_name: Implement custom-directives
  :uuid: 07c11fc2-1adf-4f54-8b75-07629d2bab2f
  :name: Build a reusable Angular component (aka custom directive) that appears on
    multiple routes
  :description: ''
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: d23f95bc-1fe6-4cf6-9627-98c704bfeae4
  :standard_name: Create and implement responsive/adaptive designs
  :uuid: 5dbe2ff3-7e5b-4997-ad52-0552d141375e
  :name: Design has responsive components (multiple views, breakpoints, sensible feature
    parity)
  :description: "- at least two break points\r\n- desktop and mobile views (mobile
    views are touch based)\r\n- sensible feature parity in both desktop and mobile
    views"
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: b24ecc78-5a7d-493d-8f66-3d451a9d374c
  :standard_name: Identifies and explains purpose of common software architectural
    concepts
  :uuid: f914aaf8-67db-4ecf-8354-1a642a1f567c
  :name: 'Identify and explain: Route, Model, View / Template, Controller, etc'
  :description: "- Route\r\n- Model\r\n- View / Template\r\n- Layout / Partial\r\n-
    Controller\r\n- Component\r\n- Utility / Helper\r\n- Worker"
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: "- Route\r\n- Model\r\n- View / Template\r\n- Layout / Partial\r\n-
    Controller\r\n- Component - In client-side code, view and controller together.
    Display, state, and behavior encapsulated.\r\n- Utility / Helper - repeated procedure
    for refactoring purposes - logic extracted from a view for reusability\r\n- Worker
    - scheduled code"
- :standard_uuid: 53e74cc9-53b0-4976-afda-93eebd722088
  :standard_name: Analyze an algorithm and identify the Big O
  :uuid: 6dc3d958-0572-406c-8802-70420d49c88d
  :name: Identify the access time of common data structures
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 53e74cc9-53b0-4976-afda-93eebd722088
  :standard_name: Analyze an algorithm and identify the Big O
  :uuid: 65f42257-7135-4c43-9929-cc7e429b0fa1
  :name: Identify the Big O of common searching algorithms
  :description: "- Bubble sort / insertion sort / selection sort\r\n- Merge sort\r\n-
    Quick sort \"average\" (bonus points for worst-case)\r\n- "
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: 53e74cc9-53b0-4976-afda-93eebd722088
  :standard_name: Analyze an algorithm and identify the Big O
  :uuid: f9e8f5e6-2afb-42e8-a59d-bd2d3cb49a14
  :name: Has practice identifying the Big O of graph searches, heaps, etc
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 53e74cc9-53b0-4976-afda-93eebd722088
  :standard_name: Analyze an algorithm and identify the Big O
  :uuid: b02e05c2-bf60-4013-8ec3-cea62aa9fa24
  :name: Diagram the order of growth of big o complexity levels
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 53e74cc9-53b0-4976-afda-93eebd722088
  :standard_name: Analyze an algorithm and identify the Big O
  :uuid: cf00abaf-b47f-4daa-bae9-d4c72f5bf797
  :name: Identify the Big O of common sorts
  :description: "\r\n\r\n"
  :guiding_questions: "\r\n\r\n"
  :resources: "\r\n\r\n"
  :instructor_notes: "\r\n\r\n"
- :standard_uuid: 6b77f6b4-326a-4b3c-897e-083cca8c4a4c
  :standard_name: Design applications from content inventories using wireframes
  :uuid: 8b8925a5-494c-4fd8-84a1-68ee5d42856e
  :name: Enumerates content elements (create a list)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6b77f6b4-326a-4b3c-897e-083cca8c4a4c
  :standard_name: Design applications from content inventories using wireframes
  :uuid: 6302f23a-2b95-4992-ba5a-232d0a3d43d6
  :name: Prioritizes content
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6b77f6b4-326a-4b3c-897e-083cca8c4a4c
  :standard_name: Design applications from content inventories using wireframes
  :uuid: 6bcdb52b-8c8a-47f8-a5e3-821e3b79032f
  :name: Designs an application based on the priority of the content
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 2601933b-c305-45d8-9527-42cda918507c
  :standard_name: Explain client-side routing as it relates to server-side routing
  :uuid: c980d656-872a-4c70-aba7-467b38467cb1
  :name: Sequence diagram of how a deep-link works in an client-side routed app using
    pushstate-style URLs including the concept of a wildcard route on the server (express
    or superstatic)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 35d1d1ae-ceba-436f-9f41-32944b8e1028
  :standard_name: Gather and validate requirements from a user and test that user’s
    response to a minimum testable artifact
  :uuid: b48a3e7b-b87d-4cff-ae21-51d7cca8571e
  :name: Interviews users to validate requirements prior to building anything
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 35d1d1ae-ceba-436f-9f41-32944b8e1028
  :standard_name: Gather and validate requirements from a user and test that user’s
    response to a minimum testable artifact
  :uuid: 1ba57fd0-518e-4ce0-bebe-20922e6f5303
  :name: Incorporates feedback from users into requirements
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 35d1d1ae-ceba-436f-9f41-32944b8e1028
  :standard_name: Gather and validate requirements from a user and test that user’s
    response to a minimum testable artifact
  :uuid: bade07c2-f041-4959-aa91-7c1a7bb7fbe4
  :name: Presents testable artifact (wireframe, mockup, or working ui) to users and
    gathers feedback
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 35d1d1ae-ceba-436f-9f41-32944b8e1028
  :standard_name: Gather and validate requirements from a user and test that user’s
    response to a minimum testable artifact
  :uuid: c81dc4e5-b504-448b-8ace-adf1001a18ac
  :name: Iterates on feedback from users
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 7620b2f5-136a-455f-bbf3-a62ab718ea59
  :standard_name: Implement and diagram JWT-based authentication between single-page
    apps and servers
  :uuid: a0132e87-ea37-43d6-b9ed-b52484899f83
  :name: Build an angular app that has login/logout state
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 7620b2f5-136a-455f-bbf3-a62ab718ea59
  :standard_name: Implement and diagram JWT-based authentication between single-page
    apps and servers
  :uuid: b0643164-6094-4063-95db-ec4cf39b8318
  :name: 'Make a sequence diagram with angular and the api and localstorage for the
    following scenarios: non-logged in user goes to a protected page, redirected to
    login, logs in, redirected to resource'
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 4f82519b-1fc7-4007-9357-66a94ee520a7
  :standard_name: Diagram architecture of an n-tier web app
  :uuid: 6be60589-b208-478a-83a8-1785ba7085ac
  :name: Sequence-diagram the interactions between a client, CDN, API, and database
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 4f82519b-1fc7-4007-9357-66a94ee520a7
  :standard_name: Diagram architecture of an n-tier web app
  :uuid: 16871cb5-594c-47ec-acaa-04bb3291db37
  :name: Identify network zones in that diagram
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "(firewalls) - “who’s allowed to do what”"
- :standard_uuid: 1d4c879a-8dd3-4eb0-babc-8414e7ed73ec
  :standard_name: Discuss and diagram microservice architecture
  :uuid: 3787fa73-e4f0-482c-8e5f-3c89bf12cefc
  :name: Compares / contrasts with monolithic application
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: Identify seams
- :standard_uuid: 1d4c879a-8dd3-4eb0-babc-8414e7ed73ec
  :standard_name: Discuss and diagram microservice architecture
  :uuid: 3d220f86-91be-482c-91be-fee8e0801473
  :name: 'Explain and diagram a microservice architecture, including terms such as:'
  :description: "- fail-fast\r\n- circuit breakers\r\n- horizontal scalability\r\n-
    swappability\r\n- service discovery\r\n- config management\r\n- edge/proxy caching
    server\r\n- 12factor apps"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: eb7d309b-c9ef-4e54-a64d-33af757b8d18
  :standard_name: Determine the correct algorithm and data structure for interview-style
    problems following the “Cracking the Coding Interview” process
  :uuid: d5ef9b8d-a886-49a8-a9a6-26aca92016b5
  :name: Given a problem stated as a whiteboarding challenge, identify the correct
    algorithm and data structure
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: eb7d309b-c9ef-4e54-a64d-33af757b8d18
  :standard_name: Determine the correct algorithm and data structure for interview-style
    problems following the “Cracking the Coding Interview” process
  :uuid: 6fca2727-0cc0-4839-a5aa-58460c6bf804
  :name: Determine the best algorithm to use given some data or criteria
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: eb7d309b-c9ef-4e54-a64d-33af757b8d18
  :standard_name: Determine the correct algorithm and data structure for interview-style
    problems following the “Cracking the Coding Interview” process
  :uuid: 424e432c-f56f-4669-a2cc-a2af9dd769cd
  :name: Uses problem solving process from “Cracking the Coding Interview”
  :description: "* Listen\r\n* Example\r\n* Brute Force\r\n* Optimize\r\n* Walk Through\r\n*
    Implement\r\n* Test"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: cc31174c-7920-44ce-803a-0136d0a26ee3
  :standard_name: Use the APIs built-in to Node.js for OS specific operations
  :uuid: 672cffcb-131c-4046-9a19-5a0df82a9c48
  :name: Compare / contrast node.js apis with web apis
  :description: "- Window, document not available in node\r\n- Global object in node
    similar to Window\r\n- CommonJS require built into node, can use browserify, webpack
    in browser for similar functionality\r\n- In node _everything_ is a module, in
    the browser modules are not mandatory"
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: cc31174c-7920-44ce-803a-0136d0a26ee3
  :standard_name: Use the APIs built-in to Node.js for OS specific operations
  :uuid: a31a4957-bd6c-4a6a-939b-cf315424d761
  :name: Listen to and handle events from `process`
  :description: "```js\r\n// https://nodejs.org/api/process.html\r\n// Available events:\r\n//
    beforeExit, exit, message, rejectionHandled, uncaughtException, unhandledRejection\r\n\r\nprocess.on('uncaughtException',
    function (err) {\r\n  console.error((new Date).toUTCString() + ' uncaughtException:',
    err.message)\r\n  console.error(err.stack)\r\n  process.exit(1)\r\n})\r\n\r\n//
    https://nodejs.org/api/process.html#process_exit_codes\r\nprocess.on('exit', function(code)
    {\r\n    console.log('Exiting with code:', code)\r\n    console.log('Goodbye World!')\r\n})\r\n```"
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: cc31174c-7920-44ce-803a-0136d0a26ee3
  :standard_name: Use the APIs built-in to Node.js for OS specific operations
  :uuid: 93415ab5-2b40-4448-8f2f-5d5dafe89423
  :name: Use Node's `http` module
  :description: "Use `http` to\r\n\r\n- bind to a port\r\n- receive requests\r\n-
    send responses\r\n- send requests\r\n- receive responses"
  :guiding_questions: 
  :resources: 
  :instructor_notes: Examine code for this [exercise](https://github.com/gSchool/node-http-server-intro)
    that is in the appropriate [Learning Experience](https://students.galvanize.com/curriculums/6/learning_experiences/13)
- :standard_uuid: cc31174c-7920-44ce-803a-0136d0a26ee3
  :standard_name: Use the APIs built-in to Node.js for OS specific operations
  :uuid: ce4ebdf8-6aa9-408b-bdbf-801404317654
  :name: Read and write to the filesystem with Node's fs module
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 1ebe7d45-7bcb-4979-ab85-f3760f0c52cf
  :standard_name: Control the flow of your program using EventEmitters
  :uuid: e5e355fb-111f-4eff-9c59-36dcfc3c8b84
  :name: Listen for multiple instances of a single event (like “data” on HTTPRequest)
    and accumulate
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 1ebe7d45-7bcb-4979-ab85-f3760f0c52cf
  :standard_name: Control the flow of your program using EventEmitters
  :uuid: 8858d156-10fe-4e38-89de-9e58fff69fe9
  :name: Use streams to process evented input
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 747da4b3-7b9d-4dee-8209-311ebdb0c588
  :standard_name: Employ a 4-step process at a whiteboard interview
  :uuid: e0e83d9f-503b-4d5b-9cd4-6e0178394922
  :name: Ask about format
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 747da4b3-7b9d-4dee-8209-311ebdb0c588
  :standard_name: Employ a 4-step process at a whiteboard interview
  :uuid: c3f2dd35-0d7e-4fe0-890e-20a5db095342
  :name: Give sample inputs and outputs
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 747da4b3-7b9d-4dee-8209-311ebdb0c588
  :standard_name: Employ a 4-step process at a whiteboard interview
  :uuid: d47b2f11-273e-4289-8878-6ad2f71b775d
  :name: Narrated while talking (didn’t ‘go dark’)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 747da4b3-7b9d-4dee-8209-311ebdb0c588
  :standard_name: Employ a 4-step process at a whiteboard interview
  :uuid: caf3753e-a302-45ca-bd72-b936fec36759
  :name: Diagram the flow of data through your algorithm (draw a picture)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 747da4b3-7b9d-4dee-8209-311ebdb0c588
  :standard_name: Employ a 4-step process at a whiteboard interview
  :uuid: 5c9197c7-f8cd-4c88-b4fa-15dd401ace9b
  :name: Ask about inputs and outputs
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 747da4b3-7b9d-4dee-8209-311ebdb0c588
  :standard_name: Employ a 4-step process at a whiteboard interview
  :uuid: 3cd84888-d0c6-482c-909b-ce8b89251fc9
  :name: Write syntactically-correct code without an IDE
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 7470e677-6614-4f54-ae3f-0e916cfa4968
  :standard_name: Define and require Node modules
  :uuid: b1ec256a-7514-4496-94d0-d8d5540f8d1d
  :name: Uses NPM to install 3rd party modules
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 7470e677-6614-4f54-ae3f-0e916cfa4968
  :standard_name: Define and require Node modules
  :uuid: 9cdfd035-8f71-4d74-af96-b37e050dcfef
  :name: Create custom modules
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 7470e677-6614-4f54-ae3f-0e916cfa4968
  :standard_name: Define and require Node modules
  :uuid: ba7dc4e8-7255-40a5-94eb-083db5f47908
  :name: Require and use Node modules
  :description: 
  :guiding_questions: "- If you only had to choose 1 thing to learn (`exports` vs
    `module.exports`), which would you learn and why?"
  :resources: "- http://www.hacksparrow.com/node-js-exports-vs-module-exports.html"
  :instructor_notes: "- Require and use modules\r\n- Write syntactically correct `module.exports`
    to export a function\r\n- Write syntactically correct `module.exports` to export
    an object\r\n- Write syntactically correct require statement that requires a function\r\n-
    Write a syntactically correct require statement that requires an object\r\n- Explain
    variable naming in module.exports/require\r\n- Explain that no functions or variables
    from the module will be available to the caller unless explicitly exported\r\n-
    Write valid require statements for relative paths\r\n- Write valid require statements
    for npm modules / builtin modules\r\n- Explain the idiosyncrasies of `exports`
    and `module.exports` (??)\r\n\r\nthat the variable used when requiring does not
    have to match either the filename being required or any variable within the required
    module"
- :standard_uuid: 7470e677-6614-4f54-ae3f-0e916cfa4968
  :standard_name: Define and require Node modules
  :uuid: 3b86aead-35b3-4320-971a-d17362240a61
  :name: Uses NPM to manage dependencies and project metadata w/ package.json
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Uses NPM to manage dependencies and project metadata\r\n-
    Discuss what NPM is and what it is used for\r\n- Use NPM to install, uninstall,
    manage versions, and other tasks r\r\n- Describe how to initialize a node project
    and what the package.json file is\r\n- Install modules using npm and understand
    what the --save, --save-dev and -g flags do"
- :standard_uuid: 0f22502a-68fe-4dbe-95d7-b1f4919fe1bf
  :standard_name: Approaches problems in a methodical and disciplined manner
  :uuid: ecee163c-1222-4670-b038-e31dc0d8caae
  :name: Experiments on one piece of code at a time (baby steps)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 0f22502a-68fe-4dbe-95d7-b1f4919fe1bf
  :standard_name: Approaches problems in a methodical and disciplined manner
  :uuid: 5bb2b707-f64f-46d7-8120-3bee4b067a4f
  :name: Stays calm and positive in the face of high complexity / slow progress
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 0f22502a-68fe-4dbe-95d7-b1f4919fe1bf
  :standard_name: Approaches problems in a methodical and disciplined manner
  :uuid: 45cd2745-5acc-401a-9cc7-46ab1e2ffb97
  :name: 'Takes steps to understand the problem / solution before writing:'
  :description: "- Whiteboarding problems\r\n- Writes psuedocode in comments before
    beginning\r\n- Stepping away from the code to think more abstractly\r\n- Reviews
    problem solving process (reflect)"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: daa8d869-353b-42b4-9462-22594335c26d
  :standard_name: Uses documentation and resources effectively
  :uuid: af229e04-40e4-45cc-9daf-5e3c09cd6cf9
  :name: Can explain all copy/pasted code
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: daa8d869-353b-42b4-9462-22594335c26d
  :standard_name: Uses documentation and resources effectively
  :uuid: ab3c82ef-97af-4a62-9ca4-1c30274e5023
  :name: Reads and understands documentation to the extent that they can use documentation
    in place of stack overflow or tutorials
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: be9709cc-957a-4652-ab52-4730113e11f7
  :standard_name: Handle errors using Node patterns
  :uuid: 1f1196c9-d5ee-4090-a7f5-efb5e6816ef3
  :name: Throw errors upstream for breaking errors
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: be9709cc-957a-4652-ab52-4730113e11f7
  :standard_name: Handle errors using Node patterns
  :uuid: a7d00b1c-2469-446a-8eb5-d41108f0d2b6
  :name: Identify and develop a strategy for debugging different types of errors
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "Was:\r\n\r\n- Identify and develop a strategy for debugging
    different types of errors\r\n- Describe the difference between programmer error
    and transactional errors\r\n- Describe how to pair node’s 3 error-handling techniques
    to handle either programmer errors or transactional errors"
- :standard_uuid: be9709cc-957a-4652-ab52-4730113e11f7
  :standard_name: Handle errors using Node patterns
  :uuid: 10ed86ae-a08c-4b52-bc28-f36d2790cd54
  :name: Handle exceptions in an application w/ node-style callbacks and EventEmitters
  :description: Event emitters, throwing, `err` parameters
  :guiding_questions: 
  :resources: 
  :instructor_notes: "Was:\r\n\r\n- Describe the 3 most common error-handling patterns
    in node\r\n- Handle exceptions in an application w/ node-style callbacks and EventEmitters\r\n-
    Write syntactically correct calls to async functions that invoke callbacks with
    `err` as the first argument"
- :standard_uuid: 0fe673a0-4edf-449b-8794-cc13101d60c6
  :standard_name: Discuss a project that you worked on knowledgeably and enthusiastically
  :uuid: 4748f8f2-949f-4fbb-bb03-f50b726d479f
  :name: Give a high level overview of the project
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 0fe673a0-4edf-449b-8794-cc13101d60c6
  :standard_name: Discuss a project that you worked on knowledgeably and enthusiastically
  :uuid: 10a0334e-b166-425c-87f3-8c0c4d7ab952
  :name: Highlight a specific technical problem you solved
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 0fe673a0-4edf-449b-8794-cc13101d60c6
  :standard_name: Discuss a project that you worked on knowledgeably and enthusiastically
  :uuid: 75b0ac6c-fec4-46a2-b635-a85e1b483cdf
  :name: Speaks enthusiastically
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 31672d5d-e1ad-40a8-9f18-c9d3134cab5a
  :standard_name: Gracefully respond to a question you don’t know the answer to
  :uuid: def7c451-bae8-46d4-9272-7427ded9db37
  :name: Turn uncertainty into question for interviewer
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 31672d5d-e1ad-40a8-9f18-c9d3134cab5a
  :standard_name: Gracefully respond to a question you don’t know the answer to
  :uuid: 5d706870-e0c1-4923-99f8-e2f294d509aa
  :name: Talk about what you did instead
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 31672d5d-e1ad-40a8-9f18-c9d3134cab5a
  :standard_name: Gracefully respond to a question you don’t know the answer to
  :uuid: 1a9c70c9-724a-4f84-8b04-c8f6201ece06
  :name: 'Spews 0 bullshit '
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 31672d5d-e1ad-40a8-9f18-c9d3134cab5a
  :standard_name: Gracefully respond to a question you don’t know the answer to
  :uuid: 4790197d-f3be-4922-8ac6-b5f13c3815bb
  :name: Own up to not knowing the answer
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 95508d61-d96d-4d70-80c6-3f00bdf52308
  :standard_name: Implement common algorithms and describe more complex algorithms
  :uuid: 3f6e780d-0c55-47d6-be9a-3614d541a4f8
  :name: Implement common searches
  :description: "* Depth-First Search\r\n* Breadth-First Search"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "* Depth-First Search (recursive)\r\n* Breadth-First Search (non-recursive)"
- :standard_uuid: 95508d61-d96d-4d70-80c6-3f00bdf52308
  :standard_name: Implement common algorithms and describe more complex algorithms
  :uuid: b298d629-85c1-4c24-8642-f4939f46817f
  :name: Describe more complex algorithms and data structures
  :description: "* Quick Sort\r\n* Insertion Sort\r\n* Red-Black Trees"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 95508d61-d96d-4d70-80c6-3f00bdf52308
  :standard_name: Implement common algorithms and describe more complex algorithms
  :uuid: 8d5a2513-70bf-48f2-a39d-944a58c20474
  :name: Implement common sorts
  :description: "* Bubble Sort\r\n* Merge Sort"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 78c706ae-8c0d-4d64-99f3-a6a3d998bc65
  :standard_name: Engages in experimental problem solving
  :uuid: d1bfabbb-860e-43aa-8b7f-40a1b82c02df
  :name: Writes code that works, then refactors
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 78c706ae-8c0d-4d64-99f3-a6a3d998bc65
  :standard_name: Engages in experimental problem solving
  :uuid: 98fa5c5c-79ad-4370-81cb-a5e9ce9e01df
  :name: Displays an experimental approach to debugging / learning code
  :description: "- Formulates experiments to verify function of code\r\n- Readily
    experiments with code that has unknown function\r\n- Readily postulates syntax
    to accomplish tasks\r\n- Can use simple log statements to verify hypotheses\r\n-
    Identifies and tests their hypothesis"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 42c0aaa9-3c36-4d71-bfc5-d0657eea857c
  :standard_name: Interacts with error messages
  :uuid: 1a8eb00a-1749-4f09-8078-05cf5b577f7c
  :name: Identifies the line number of error messages from a stack trace
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 42c0aaa9-3c36-4d71-bfc5-d0657eea857c
  :standard_name: Interacts with error messages
  :uuid: 62117906-b811-4c05-9398-95c930478104
  :name: Resolves common JS errors by reading a stack trace and identifying the cause
    of the error
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 42c0aaa9-3c36-4d71-bfc5-d0657eea857c
  :standard_name: Interacts with error messages
  :uuid: 74d80dc0-3180-4729-91b5-a54e8d375cac
  :name: Reads and researches error messages
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 1430686b-e6af-48c3-be11-55c986e55148
  :standard_name: Implement, evaluate, and use some common data structures
  :uuid: c7e06529-d9b4-428b-9cc6-b9685eee36a0
  :name: Implement and use Hash Maps
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 1430686b-e6af-48c3-be11-55c986e55148
  :standard_name: Implement, evaluate, and use some common data structures
  :uuid: 8278816b-b212-44fd-b472-8550b52d514d
  :name: Implement and use Trees
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 1430686b-e6af-48c3-be11-55c986e55148
  :standard_name: Implement, evaluate, and use some common data structures
  :uuid: c0617929-2366-44fc-9374-0c73b9586193
  :name: Implement and use Stacks and Queues
  :description: Differentiate between stacks and queues, use the acronyms FIFO and
    LIFO to describe stacks and queues.
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 1430686b-e6af-48c3-be11-55c986e55148
  :standard_name: Implement, evaluate, and use some common data structures
  :uuid: 26003645-e6f3-4a66-a402-9bd667de1124
  :name: Identify more complex data structures
  :description: Such as Tries, and Vectors
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 1430686b-e6af-48c3-be11-55c986e55148
  :standard_name: Implement, evaluate, and use some common data structures
  :uuid: 5409f05a-414b-4b7e-ae81-6a5fb11a9670
  :name: Implement and use Linked Lists
  :description: 
  :guiding_questions: 
  :resources: https://github.com/gSchool/linked_list_practice
  :instructor_notes: 
- :standard_uuid: 1430686b-e6af-48c3-be11-55c986e55148
  :standard_name: Implement, evaluate, and use some common data structures
  :uuid: e00b1c9c-151e-412f-bda9-14e0c106bfc8
  :name: Implement and use Graphs
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 96596d80-98aa-42c7-b280-768b2b52adb7
  :standard_name: Collaborates productively with other developers
  :uuid: 5597bdf3-a29a-4390-aa46-b25549e03dee
  :name: 'Can operate with fair contribution (not necessarily equal contribution)
    using specific techniques when necessary such as:'
  :description: "- Ping pong\r\n- Driver / Navigator\r\n- Chess timers"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 96596d80-98aa-42c7-b280-768b2b52adb7
  :standard_name: Collaborates productively with other developers
  :uuid: 3c691d42-6bcf-4caa-a7eb-0c0a8ecec7ec
  :name: Regularly verbalizes thought process
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 96596d80-98aa-42c7-b280-768b2b52adb7
  :standard_name: Collaborates productively with other developers
  :uuid: 3a8fcb5c-063e-45b8-b564-1c085df35971
  :name: Is nice to work with
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 864fb2e5-1a7c-440d-a21d-eead8eed127e
  :standard_name: Employ a “Cracking the Coding Interview” technique when solving
    brain teaser problems
  :uuid: 265c64da-2613-47be-a86e-a4dafbf3953c
  :name: Describe your problem-solving technique to approach a brain teaser
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 864fb2e5-1a7c-440d-a21d-eead8eed127e
  :standard_name: Employ a “Cracking the Coding Interview” technique when solving
    brain teaser problems
  :uuid: e9b462ce-ec32-4556-879c-da6085095cf1
  :name: Diagram a brain teaser in order to solve it
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 0958889f-c375-4cd0-bcf4-11521a47ac7e
  :standard_name: Participates productively in code reviews
  :uuid: 3d9a820b-99cb-4577-912a-77e32708f41f
  :name: Determine if code conforms to standards/guidelines set by the team / someone
    else
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 0958889f-c375-4cd0-bcf4-11521a47ac7e
  :standard_name: Participates productively in code reviews
  :uuid: d338c482-d2af-4388-8bd2-75fa2fb547fe
  :name: Receive feedback openly and constructively
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 0958889f-c375-4cd0-bcf4-11521a47ac7e
  :standard_name: Participates productively in code reviews
  :uuid: 766043d9-066d-47b8-bd2b-fa3ff6b078a2
  :name: Deliver feedback that is actionable, specific, and kind.
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 5dea00ce-dbb3-43e9-91b9-dead371d37c4
  :standard_name: Navigate and manage a file system with the command line
  :uuid: c790788d-c525-44ae-ac05-0806bdf12e1a
  :name: Manage files on the command line
  :description: "- mv for moving and renaming files\r\n- cp for copying files\r\n-
    touch to create files\r\n- rm to remove files and directories\r\n    - -f to force\r\n
    \   - -r for directories\r\n- cat to show file contents\r\n- grep to search and
    filter file contents\r\n- less to read file contents"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "Less\r\n\r\nHow do you?\r\n\r\n- exit `less`?\r\n- move up and
    down by line?\r\n- move up and down by page?\r\n- search?\r\n\r\nVIM\r\n\r\nHow
    do you?\r\n\r\n- enter INSERT mode?\r\n- exit INSERT mode?\r\n- save a file?\r\n-
    move around in a file?\r\n- delete a line?\r\n- cut and paste a line?\r\n- move
    to the beginning / end of a line?\r\n- move to the beginning / end of a file?\r\n\r\nTail\r\n\r\nHow
    do you:\r\n\r\n- watch a single file for changes?\r\n- watch multiple files for
    changes?"
- :standard_uuid: 5dea00ce-dbb3-43e9-91b9-dead371d37c4
  :standard_name: Navigate and manage a file system with the command line
  :uuid: 313e6f16-cb6a-4146-8f1e-d7f33a7ec0d5
  :name: Chain, pipe, and redirect commands to work more efficiently
  :description: "- `<` to redirect standard input from a file\r\n- `>` to redirect
    standard output to a file (overwrite)\r\n- `>>` to redirect standard output to
    a file (append)\r\n- `|` to redirect the standard output of one command into the
    standard input of another command\r\n- `&&` to chain a series of commands (only
    continues if the previous command executes successfully)\r\n- `;` to chain a series
    of commands\r\n- `$()` or `...` for command substitution\r\n- Pipe input through
    grep to filter\r\n\r\nUnix philosophy: small programs that do one thing well,
    can be chained together.\r\n\r\n(eg. ps aux | grep ruby)"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 5dea00ce-dbb3-43e9-91b9-dead371d37c4
  :standard_name: Navigate and manage a file system with the command line
  :uuid: 9eb6aa09-0210-4e2a-b24b-f78e9515b5d8
  :name: Navigate the file system using the command line
  :description: "- use cd to change working directory\r\n- pwd to print working directory\r\n-
    ls to list files in a directory\r\n    - -a flag to show hidden files\r\n    -
    -l flag to see file details\r\n- . and .. to refer to the current directory and
    \ parent directory\r\n- ~ to refer to the home directory\r\n- use both absolute
    and relative paths\r\n- use TAB for Autocompletion\r\n- store folders in your
    $PATH so you can execute files contained in them from anywhere"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 5e594f94-9089-4b2e-a0cf-f424ecd278b1
  :standard_name: Work with and discuss and Unix Roles / Permissions
  :uuid: 5406c830-283c-4260-8b72-9f94f230ee3a
  :name: Change to root while keeping shell variables (su - root / exit)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 5e594f94-9089-4b2e-a0cf-f424ecd278b1
  :standard_name: Work with and discuss and Unix Roles / Permissions
  :uuid: 9cfca41f-27a6-4c62-9524-796a35215b2b
  :name: Describe file permission generally
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 5e594f94-9089-4b2e-a0cf-f424ecd278b1
  :standard_name: Work with and discuss and Unix Roles / Permissions
  :uuid: 4d0ca7cf-3b9e-4063-a97c-495892248811
  :name: Use chown and chmod
  :description: "- Change file permissions in the ugo+rwx style\r\n- Change file /
    folder owners"
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: 5e594f94-9089-4b2e-a0cf-f424ecd278b1
  :standard_name: Work with and discuss and Unix Roles / Permissions
  :uuid: 09145fa3-e3ed-444d-9a43-c0df3a6dd29d
  :name: Describe sudo and why it’s unwise to use with brew / npm / gems etc...
  :description: ''
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: a8e5b3db-eefd-41c3-aa94-ad2fbe7e8634
  :standard_name: Design and execute user tests, then implement changes based on feedback
  :uuid: 10530e00-aa94-42f8-86cf-d67364932250
  :name: Sets a specific task, or tasks, for the user to test
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: a8e5b3db-eefd-41c3-aa94-ad2fbe7e8634
  :standard_name: Design and execute user tests, then implement changes based on feedback
  :uuid: 32d2f8ae-0139-4cac-bb7b-8ce932753ee5
  :name: Finds someone unfamiliar with the application to test
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: a8e5b3db-eefd-41c3-aa94-ad2fbe7e8634
  :standard_name: Design and execute user tests, then implement changes based on feedback
  :uuid: 6c721cd6-657b-48d8-a55a-e6a1f65a23f0
  :name: Takes notes while the test subject runs through the tasks
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: a8e5b3db-eefd-41c3-aa94-ad2fbe7e8634
  :standard_name: Design and execute user tests, then implement changes based on feedback
  :uuid: 405ef565-706f-4b96-9698-c731b85ef7fe
  :name: Takes feedback once the test subject has finished the tasks
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: a8e5b3db-eefd-41c3-aa94-ad2fbe7e8634
  :standard_name: Design and execute user tests, then implement changes based on feedback
  :uuid: 3fd9a35f-ee2a-483c-aa8e-0ba54c1bad18
  :name: Parses notes into actionable changes
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: a8e5b3db-eefd-41c3-aa94-ad2fbe7e8634
  :standard_name: Design and execute user tests, then implement changes based on feedback
  :uuid: f6501021-44d8-45fd-aad0-e925a811c807
  :name: Implements changes from actionable feedback
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6fdb2116-c6b2-45e8-884d-5f51d05836d4
  :standard_name: Write Semantic HTML5 Markup
  :uuid: 30807c92-5608-42bb-a84d-731e65648a67
  :name: Tables used for tabular data, not for formatting
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6fdb2116-c6b2-45e8-884d-5f51d05836d4
  :standard_name: Write Semantic HTML5 Markup
  :uuid: 4b512551-581d-40b0-b996-4562c147dcd1
  :name: Ordered lists used for ordered content
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6fdb2116-c6b2-45e8-884d-5f51d05836d4
  :standard_name: Write Semantic HTML5 Markup
  :uuid: 89decbb0-f6fa-4efb-ba93-600dcbc23bfd
  :name: Unordered lists used for unordered content
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6fdb2116-c6b2-45e8-884d-5f51d05836d4
  :standard_name: Write Semantic HTML5 Markup
  :uuid: 1f7f825a-f86d-4ba4-b718-e4b6e2580588
  :name: Images all have alt text
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6fdb2116-c6b2-45e8-884d-5f51d05836d4
  :standard_name: Write Semantic HTML5 Markup
  :uuid: 9093a834-2e1d-41bf-8a21-1c2dea1acc07
  :name: Headers used properly - smaller headers used to section content demarcated
    by larger headers
  :description: "- One h1 per page\r\n- h2s used to demarcate large sections of the
    page\r\n- h3-6 used for subsections\r\n- Examples : https://html.spec.whatwg.org/#headings-and-sections"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6fdb2116-c6b2-45e8-884d-5f51d05836d4
  :standard_name: Write Semantic HTML5 Markup
  :uuid: 930f1a50-7e00-4da0-9dae-f8f48d29ee16
  :name: No tags that exist for no reason- all tags should have a purpose
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6fdb2116-c6b2-45e8-884d-5f51d05836d4
  :standard_name: Write Semantic HTML5 Markup
  :uuid: f2068f02-dd34-4d5f-b8e5-70ea8ed94879
  :name: Sidebars, articles, sections, etc. used in appropriate cases
  :description: "- Sidebars, articles, sections, etc. used in appropriate cases\r\n-
    Write Semantic HTML5 Markup"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 90141122-0edb-4c14-ac77-a63e7c3a8ce0
  :standard_name: Write Valid HTML5 Markup
  :uuid: 21be8530-cad6-4d87-a1b6-ad4d9c65859a
  :name: Tags are in a logical order to match reality
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 90141122-0edb-4c14-ac77-a63e7c3a8ce0
  :standard_name: Write Valid HTML5 Markup
  :uuid: d4d044b5-f96b-4ab6-b067-e146f01d5e49
  :name: Tags are properly indented to show nesting visually
  :description: "- Block level elements have their own indentation level\r\n- inline
    elements are included inline"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 90141122-0edb-4c14-ac77-a63e7c3a8ce0
  :standard_name: Write Valid HTML5 Markup
  :uuid: 94966303-dc41-45c2-a320-5fdc5a30915c
  :name: Attributes
  :description: "- ids are all unique, valid identifiers\r\n- Classes are applied
    to multiple elements successfully\r\n- Boolean attributes are [syntactically correct](https://html.spec.whatwg.org/#boolean-attributes)\r\n
    \   - no “false” or “true values\r\n    - elements like checked are represented
    as `checked`\r\n- Attribute names are all in lowercase, values are in lowercase"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 90141122-0edb-4c14-ac77-a63e7c3a8ce0
  :standard_name: Write Valid HTML5 Markup
  :uuid: b8d3b6f4-b870-4f65-9f71-14eeaf114585
  :name: "`<img>` tags used to embed images"
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 90141122-0edb-4c14-ac77-a63e7c3a8ce0
  :standard_name: Write Valid HTML5 Markup
  :uuid: bb1727eb-fc2d-44fe-b0ed-390a7c187f1e
  :name: Anchor tags
  :description: "- has tags that link to other places in the document\r\n- has tags
    that link to other HTML resources"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 90141122-0edb-4c14-ac77-a63e7c3a8ce0
  :standard_name: Write Valid HTML5 Markup
  :uuid: e76f21f6-ee8a-4265-9ef8-3ba962c0ce07
  :name: Validates markup with the [W3C HTML Validator](https://validator.w3.org/)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 90141122-0edb-4c14-ac77-a63e7c3a8ce0
  :standard_name: Write Valid HTML5 Markup
  :uuid: 41ac54d4-4a2b-4750-915e-90886ab7fcba
  :name: Writes valid HTML structure
  :description: "- Has a valid doctype declaration\r\n- has an `<html>` tag as it’s
    root element\r\n- html tag has a head followed by a body\r\n- head \r\n    - contains
    all metadata\r\n    - has a `<title>` tag\r\n- body contains all visible elements\r\n-
    tables contain appropriate opening and closing tags:`<table><th><tb><tr>`\r\n\r\n\r\n\r\n-
    \r\n- \r\n- \r\n- \r\n-"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: d5a4c20f-4922-43e4-a7bb-388438235f40
  :standard_name: Build HTML Forms and Controls
  :uuid: 6557ef9d-7d25-402b-a8db-bac4ae550b54
  :name: Use structural tags to create a semantic, usable form (label, fieldset)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: d5a4c20f-4922-43e4-a7bb-388438235f40
  :standard_name: Build HTML Forms and Controls
  :uuid: 8357b7e8-1cdf-43ab-a5e9-3431ff620062
  :name: Build multiple forms that use all HTML5 controls
  :description: "- in their relevant places\r\n- all relevant attributes (disabled,
    checked, selected, autofocus, required)\r\n- a method and action attribute on
    the form tag"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "## Exercises\r\n[The pizza ordering one]\r\n[The class favorite
    music survey] \r\n\r\n## Automated Tests\r\n[A link to a script that will check
    a bunch of github repos that are named in a standard way for the existence of
    those elements]\r\n\r\nRubric :  \r\n\r\n- Did they use a text input for their
    text fields?  \r\n- Did they use an optiongroup?  \r\n- Did they use a checkbox?
    \ \r\n- Write syntactically valid forms \r\n- Explain the function and purpose
    of the action attribute  \r\n- Explain the function and purpose of the method
    attribute  \r\n- Describe that the name attribute forms the key in the params
    when sent to the server\r\n- Describe the the value of inputs, and contents of
    textareas, for the value of the params sent to the server\r\n- Describe that unchecked
    checkboxes and radio buttons do not get sent to the server\r\n- Describe how forms
    and controls interact (that submitting a form serializes the controls associated
    with it)\r\n- Write syntactically valid boolean attributes (checked, selected,
    disabled)  \r\n- Write syntactically valid select / option controls  \r\n- Write
    syntactically valid radio buttons (same name, different values) \r\n- Write syntactically
    valid textareas (setting contents instead of value attribute) \r\n- Write syntactically
    valid input elements  \r\n- Write fieldsets with legends\r\n- Build valid forms,
    showcasing the action and method attribute on the form tag\r\n- Describe how the
    data is extracted from the controls on the page when you submit a form, showing
    the differences between types of elements\r\n- Write syntactically valid form
    elements (select, radio, checkbox, input, textarea)\r\n- Build multiple forms
    that use all HTML5 controls"
- :standard_uuid: d5a4c20f-4922-43e4-a7bb-388438235f40
  :standard_name: Build HTML Forms and Controls
  :uuid: 5c770de3-4474-4f5e-a0c3-46065d8a5781
  :name: Labels are associated with form controls
  :description: "- Associate labels with controls by the “for” attribute\r\n- Associate
    labels with controls by wrapping the control"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 8552d31e-b5c6-4414-8a22-4e684bcd2595
  :standard_name: Target HTML elements with CSS selectors
  :uuid: 3e519bc6-66d9-4616-a62d-9887d215ef0d
  :name: Target HTML elements with CSS selectors
  :description: |+
    - Target classes
    - Target IDs
    - Target attributes
    - Target elements with N attributes
    - Target elements that have one OR another attribute
    - Targets descendants of an element
    - Target direct descendants
    - Target elements using pseudo-selectors
    - Target :after and :before selectors
    - Target siblings
    - Target the nth-child and nth-of-type
    - Describe the difference between nth-child and nth-of-type
    - Describe "cascading"
    - Describe how CSS “decides” which styles to apply
    - Describe selector specificity
    - Target elements































  :guiding_questions: |2+






























  :resources: |2+






























  :instructor_notes: |2+






























- :standard_uuid: 6e0c7a9b-e85d-4f39-b7e5-fdf0dcbf6042
  :standard_name: Style HTML elements with CSS properties
  :uuid: 0e29c27b-1899-46ba-a7f2-6966e3d24d11
  :name: Applies text styles
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6e0c7a9b-e85d-4f39-b7e5-fdf0dcbf6042
  :standard_name: Style HTML elements with CSS properties
  :uuid: af945ddf-5c65-4eaf-924d-9cd3cd8badb7
  :name: Applies background styles
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6e0c7a9b-e85d-4f39-b7e5-fdf0dcbf6042
  :standard_name: Style HTML elements with CSS properties
  :uuid: a1c05dfc-808f-4797-bcdd-f88579bb0485
  :name: Applies image styles
  :description: Using CSS properties on `<img>` tags. Properties such as `width`,
    `height`, `object-fit`
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: 6e0c7a9b-e85d-4f39-b7e5-fdf0dcbf6042
  :standard_name: Style HTML elements with CSS properties
  :uuid: 3ed39728-992e-47c8-aa29-fefccb39053f
  :name: Change default list styles
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6e0c7a9b-e85d-4f39-b7e5-fdf0dcbf6042
  :standard_name: Style HTML elements with CSS properties
  :uuid: 20bd8e92-d68d-4087-8147-9ef18b073987
  :name: Can apply rules to embedded media
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 0b6f124a-f58a-4e2c-97d1-39a109703ddc
  :standard_name: Lay out a document with CSS properties
  :uuid: ab6c6400-dbee-4922-9f09-5671024f7507
  :name: Uses box model to dimension element
  :description: "- Uses margin for outside the box\r\n- Padding for inside the box\r\n-
    Border elements for visible border only\r\n- Content box sizing is only determined
    by content, or height property"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 0b6f124a-f58a-4e2c-97d1-39a109703ddc
  :standard_name: Lay out a document with CSS properties
  :uuid: a1645931-6983-41d2-8899-f6fdc76757b9
  :name: Use floats to interrupt flow content and layout block-level elements on a
    page
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 0b6f124a-f58a-4e2c-97d1-39a109703ddc
  :standard_name: Lay out a document with CSS properties
  :uuid: a69bc44f-b1f9-4add-9619-8c73f9482bea
  :name: Uses relative positioning within content to do in-block layout
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 0b6f124a-f58a-4e2c-97d1-39a109703ddc
  :standard_name: Lay out a document with CSS properties
  :uuid: 5193b215-610a-40ee-95e9-735f9f5b5d40
  :name: Uses fixed positioning
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 1b7a90d1-4b10-4a5a-9475-5391378047ce
  :standard_name: Quickly style pages with CSS frameworks
  :uuid: 6a7a5594-e331-4ec7-a1ae-4cf9fd4c100e
  :name: Can use framework + semantic HTML to produce usable forms
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 1b7a90d1-4b10-4a5a-9475-5391378047ce
  :standard_name: Quickly style pages with CSS frameworks
  :uuid: 9d5a6c2a-ad3e-4e1f-8479-ddf2733ef647
  :name: Can produce a layout from a mockup
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 0e8bdbe9-9592-4704-9ddf-46159d7a11d8
  :standard_name: Use CSS3 and advanced browser tooling to create responsive pages
  :uuid: c4484607-56e1-4d0f-a295-94e4128dca4f
  :name: Align and distribute elements in a container of an unknown/dynamic size with
    Flexbox.
  :description: ''
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: 0e8bdbe9-9592-4704-9ddf-46159d7a11d8
  :standard_name: Use CSS3 and advanced browser tooling to create responsive pages
  :uuid: bd8a2ea3-6506-4b1f-afa0-fd9f3f4036e5
  :name: Uses web components
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 0e8bdbe9-9592-4704-9ddf-46159d7a11d8
  :standard_name: Use CSS3 and advanced browser tooling to create responsive pages
  :uuid: 09e96d6a-4741-4739-9441-363c5bcf1b84
  :name: Ensure cross-browser compatibility with modernizr and other shims
  :description: ''
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: 0e8bdbe9-9592-4704-9ddf-46159d7a11d8
  :standard_name: Use CSS3 and advanced browser tooling to create responsive pages
  :uuid: ce569811-9a67-4e58-8dd4-6f5ddef9f0c9
  :name: Show and hide content intended for specific screens/screen sizes with media
    queries.
  :description: ''
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: 4014347b-eb0e-447e-a78f-77b0317a46a4
  :standard_name: Write well organized CSS
  :uuid: 032790f1-0648-4738-b408-7ada0920fae6
  :name: Creates CSS classes for groups of elements that behave similarly
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 4014347b-eb0e-447e-a78f-77b0317a46a4
  :standard_name: Write well organized CSS
  :uuid: 75d29df7-4792-4cd8-ad22-f6c90b8fba93
  :name: Creates IDs for elements that are unique
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 4014347b-eb0e-447e-a78f-77b0317a46a4
  :standard_name: Write well organized CSS
  :uuid: 4cf38d21-b68b-4fb3-b8a3-5ffcea744ed1
  :name: Uses semantic selector specificity
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 4014347b-eb0e-447e-a78f-77b0317a46a4
  :standard_name: Write well organized CSS
  :uuid: 5140f9b2-2de8-49cb-b2ae-ab67b8da3db3
  :name: Selectors and rules are demarcated by usage, using comments and by grouping
    similar functionality
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 84e30c2e-0715-411f-b39b-db22598897b1
  :standard_name: Compare and contrast OOP and Functional Programming
  :uuid: 2ffcf695-4756-4504-8ec9-28d998852e06
  :name: Describe Functional Programming in relation to OOP
  :description: "- First class functions\r\n- Higher order functions\r\n- Immutable
    data\r\n- Functions like components of an assembly line"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 84e30c2e-0715-411f-b39b-db22598897b1
  :standard_name: Compare and contrast OOP and Functional Programming
  :uuid: efac19fb-e414-47da-bd00-c54e52a4c889
  :name: Describe OOP in relation to functional programming
  :description: "- Methods operating on the state of the object\r\n- Mutable data"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: f0dd4b1a-bc2d-46b8-934d-822074a2efbe
  :standard_name: Discuss the function and purpose of Git
  :uuid: 608fcecb-ba4e-4ee7-bc74-e98d3fd6f354
  :name: Discuss the purpose of Git
  :description: "- Describe the function and purpose of version control\r\n- Distinguish
    between Git and Github\r\n- Describe the problem that version control solves for
    developers - how it makes their lives easier/better.\r\n- Aides collaboration\r\n-
    “Safety-net” for making mistakes\r\n- Feature development"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: f0dd4b1a-bc2d-46b8-934d-822074a2efbe
  :standard_name: Discuss the function and purpose of Git
  :uuid: 247ca14d-34b1-440d-8d93-48f7d01f82e5
  :name: Discuss the basic process of committing a file to version control (function
    of version control)
  :description: "- Untracked - hasn’t been added to version control\r\n- Tracked -
    version control is watching the state of these files\r\n- Staged - ready to be
    committed\r\n- Committed - commit is like a snapshot of the project state\r\n-
    Pushed - project has been sent to another computer"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: aa21f7d6-9878-4462-81c5-fef0af905875
  :standard_name: Debug and inspect web pages with the Chrome DevTools
  :uuid: 3fefd7f6-38a0-431f-82bb-eb510d6dccad
  :name: Consistently incorporates Chrome Dev Tools into diagnostic process
  :description: "- Test small pieces of JS code and view JS errors in the console
    \r\n- Use the console to look for errors in javascript included on the page\r\n-
    Diagnose AJAX and File errors with the network tab.\r\n- Inspect the current state
    of the DOM with the elements tab.\r\n- Inspect and modify CSS properties with
    the elements tab\r\n- Inspect JS with the sources tab"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- View and delete cookies in Chrome\r\n- Uses chrome web inspector
    to test and debug styling\r\n- Set and clear local and session storage values
    from the Chrome web inspector\r\n- Use chrome web inspector to alter styles"
- :standard_uuid: c795cc87-dc92-4c81-918e-cd6be797a530
  :standard_name: Send HTTP requests and view HTTP responses with Postman
  :uuid: 080f1cf4-a381-4b16-a4ea-9516659153f4
  :name: Uses Postman to send and receive HTTP Requests and inspect them with Postman
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: e105e37c-adf1-4930-8648-aa9664153a55
  :standard_name: Iterate over lists using ES5 Array Methods in a functional style
  :uuid: 1b7cf606-0793-49df-aa25-9c47f416e525
  :name: Uses array methods
  :description: "- map\r\n- forEach\r\n- filter\r\n- reduce (r and l)\r\n- some\r\n-
    every\r\n- lodash/underscore methods"
  :guiding_questions: 
  :resources: 
  :instructor_notes: Implement `Array.prototype.map` with a modified signature so
    that it is `map(array, callback)` using `Array.prototype.forEach`.
- :standard_uuid: 1549dee5-0e63-4def-ab15-1414a65f77f9
  :standard_name: Creates “Classes” and Instances with JS
  :uuid: 1e091594-11a7-462e-861b-5c5bf6f625f9
  :name: Capitalizes variables pointing to constructor functions
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 1549dee5-0e63-4def-ab15-1414a65f77f9
  :standard_name: Creates “Classes” and Instances with JS
  :uuid: ede5c0bf-13a9-4860-9ae1-ec8cbfad127b
  :name: Creates instances with the `new` keyword
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 1549dee5-0e63-4def-ab15-1414a65f77f9
  :standard_name: Creates “Classes” and Instances with JS
  :uuid: ef016907-991f-4e5c-9157-a7fb5a0df75f
  :name: Uses accessor methods and closures to create private class variables
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 1549dee5-0e63-4def-ab15-1414a65f77f9
  :standard_name: Creates “Classes” and Instances with JS
  :uuid: 935289ad-295f-4ca6-8099-d4b6bf3aca61
  :name: Uses constructor function syntax to create something similar to a class in
    Javascript
  :description: "```\r\nvar Class = function(params) { this.params = params };\r\n```"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "What is a constructor?\r\n\r\n- Distinguish between class methods
    and instance methods"
- :standard_uuid: 39933c54-ba41-44c7-bc56-716fadaf486b
  :standard_name: Uses Properties to store State on an Instance
  :uuid: c0c7f530-ac7f-460c-9fa3-d1befef42919
  :name: Uses `this` to create instance properties, as passed in through the parameters
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 39933c54-ba41-44c7-bc56-716fadaf486b
  :standard_name: Uses Properties to store State on an Instance
  :uuid: 52103367-1e62-4fb7-b116-a7569410ddf5
  :name: Uses good design practices (encapsulation) to ensure “classes” are responsible
    for appropriate state tracking
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 39933c54-ba41-44c7-bc56-716fadaf486b
  :standard_name: Uses Properties to store State on an Instance
  :uuid: 037fc405-6682-4088-80da-37bb485fd314
  :name: Able to work with objects that reference each other in a complex system (such
    as a game)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 39933c54-ba41-44c7-bc56-716fadaf486b
  :standard_name: Uses Properties to store State on an Instance
  :uuid: 62f74454-fb13-444e-8dea-5803e6940df4
  :name: Does not store state on the constructor function itself
  :description: So `function Person(){this.name = “Joe”}` over `Person.name=”Joe”`
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: f5964586-8847-4ca3-a7f2-4968a041660f
  :standard_name: Define and invoke functions as methods on objects
  :uuid: 60adc3d6-dfdf-4a9a-bb06-b49af1f575a3
  :name: Stores functions in properties
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: f5964586-8847-4ca3-a7f2-4968a041660f
  :standard_name: Define and invoke functions as methods on objects
  :uuid: 79931682-02af-4c27-823d-e5b9859f523f
  :name: Differentiate between functions and methods
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: f5964586-8847-4ca3-a7f2-4968a041660f
  :standard_name: Define and invoke functions as methods on objects
  :uuid: 07025e42-9055-455d-9e6b-e62a10496206
  :name: Stores instance methods on the Prototype Object
  :description: "`function Person{}; Person.prototype.foo = function(){}`"
  :guiding_questions: "1. Provide an example illustrating the difference between adding
    a method to the constructor and adding a method to the prototype.\r\n1. What is
    the difference between adding a method to the constructor and adding a method
    to the prototype?"
  :resources: "##### External Resources\r\n\r\n* [Advantages of using prototype methods
    versus defining methods in the constructor](http://stackoverflow.com/questions/4508313/advantages-of-using-prototype-vs-defining-methods-straight-in-the-constructor)\r\n*
    [Methods within the constructor versus prototype in JavaScript](http://thecodeship.com/web-development/methods-within-constructor-vs-prototype-in-javascript/)"
  :instructor_notes: 
- :standard_uuid: f5964586-8847-4ca3-a7f2-4968a041660f
  :standard_name: Define and invoke functions as methods on objects
  :uuid: 1e49857a-ad34-4269-9989-7865bfb08c47
  :name: Creates closures to hide data and create accessors
  :description: "`function Person{var text = “”; this.getText = function(){return
    text;}}`"
  :guiding_questions: 
  :resources: "External Resources\r\n\r\n* [Setting properties on the constructor
    versus the prototype for that constructor](http://stackoverflow.com/questions/15748521/javascript-set-properties-in-the-constructor-or-constructors-prototype-proper)"
  :instructor_notes: 
- :standard_uuid: be21cf5e-5011-4a42-82cc-2fb90171df14
  :standard_name: "‘Play’ while engaged in and learning experience"
  :uuid: 0a3eb669-e449-4a7f-b20d-e11c531fdc79
  :name: Wrestles with new content
  :description: don’t settle for comprehension - approach content multiple times from
    different perspectives with the aim of developing fluency
  :guiding_questions: "* What does it look/sound like to wrestle with new information?\r\n*
    Why is it important to wrestle with new information?\r\n* How does this relate
    to your short-term and long-term memory?"
  :resources: ''
  :instructor_notes: This comes from the Learn to Learn lesson, the 3 step process
    for learning. It's part of the *play* step.
- :standard_uuid: be21cf5e-5011-4a42-82cc-2fb90171df14
  :standard_name: "‘Play’ while engaged in and learning experience"
  :uuid: 69ea24f4-b759-4098-86af-0d7e5a0fa5ec
  :name: Takes Risks
  :description: "- eagerly attempts challenging tasks.\r\n- doesn’t fear failure or
    looking bad in front of peers"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: be21cf5e-5011-4a42-82cc-2fb90171df14
  :standard_name: "‘Play’ while engaged in and learning experience"
  :uuid: f6822d58-8a3b-4444-9278-5d704572e9f0
  :name: Has fun
  :description: "- smiles!\r\n- celebrates little victories\r\n- speaks enthusiastically
    about his/her work\r\n- recognizes when he/she is ‘coding in anger’ (aka engaged
    in fight or flight mode) and - - takes steps to calm down and regain perspective"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: cedea3d7-9ba9-426e-a473-46916497b002
  :standard_name: "‘Reflect’ after engaging in a learning experience"
  :uuid: d4035f5a-b922-4a94-8ac6-6244e68e9601
  :name: Self assesses
  :description: "Identifying your personal strengths and weaknesses is an essential
    part of the learning process. If you're going to improve your ability to learn,
    it's necessary to first think about what you do well and what you can improve.
    Reflect on the 3 steps (Set the Stage, Play, Reflect) and their associated sub-steps.\r\n\r\n-
    reflects on what they accomplished, how close they got to achieving the objective\r\n-
    reflects on the process of learning\r\n    - Set the stage?\r\n    - Played?\r\n
    \   - Reflected?\r\n    - What could be done better?"
  :guiding_questions: "* What do you already do well? How do you know (what does it
    look/sound like to do it well)?\r\n* Where can you improve? How do you know this
    is an area for growth (what does it look/sound like right now)?\r\n* How are you
    going to help yourself improve your areas for growth?"
  :resources: 
  :instructor_notes: Students can complete a writeup answering the guiding questions
    above.
- :standard_uuid: cedea3d7-9ba9-426e-a473-46916497b002
  :standard_name: "‘Reflect’ after engaging in a learning experience"
  :uuid: 842272db-117e-4f3d-9ce6-e95527eaa596
  :name: Asks new questions
  :description: identifies what they’re curious about and what new questions have
    come about.
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 2f1d22c7-b07b-4e5d-9c84-5aa989b7f36d
  :standard_name: Embed Rich Media using Audio & Video APIs
  :uuid: 90dfc690-41e6-4381-8890-c2f14e74f48e
  :name: Use the Audio API to play sounds, or embed media
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 2f1d22c7-b07b-4e5d-9c84-5aa989b7f36d
  :standard_name: Embed Rich Media using Audio & Video APIs
  :uuid: 2e0dcee0-b602-46e9-9e69-ccba72d14d0d
  :name: Embed videos using the Video API
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 8ab48f11-82c3-4f7f-ad09-efdae6180aea
  :standard_name: Build form-based authentication in Express using cookie-session
  :uuid: a356a233-2d34-4140-a187-87c3bbc0f891
  :name: Use middleware to set the currentUser local globally
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 8ab48f11-82c3-4f7f-ad09-efdae6180aea
  :standard_name: Build form-based authentication in Express using cookie-session
  :uuid: ab8ead8a-0092-4e8c-a69e-7edc53ff2eae
  :name: Use req.session to ensure that users are logged in
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 8ab48f11-82c3-4f7f-ad09-efdae6180aea
  :standard_name: Build form-based authentication in Express using cookie-session
  :uuid: e6519b75-9c79-437b-b27d-30ffb34d2570
  :name: Store passwords securely using bcrypt
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 8ab48f11-82c3-4f7f-ad09-efdae6180aea
  :standard_name: Build form-based authentication in Express using cookie-session
  :uuid: 184c1dcb-c037-467c-8f5e-17fce941053a
  :name: Includes register, login, logout features
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 3f1fd6fd-be9b-4ced-9683-d17105fcc3ec
  :standard_name: Build OAuth user login in Express using Passport
  :uuid: 5672bb09-af7e-4d04-af90-714471b23ef6
  :name: Built and shipped an app that allows users to login via OAuth using Passport
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: df58e25f-7716-4325-a90e-4f41846cc7cb
  :standard_name: Protect content in Express using middleware substacks
  :uuid: 5c449397-c425-4fd2-bd48-babb8d805450
  :name: Protect routes using the middleware sub-stack API
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 1527f6f1-dff1-45a5-b987-509d40ca1e3e
  :standard_name: Describe auth concepts including form-based authentication, OAuth
    and authorization
  :uuid: 47943e4d-b5fd-4969-aca2-452417b405ae
  :name: Explain why storing passwords in plain text is never acceptable
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 1527f6f1-dff1-45a5-b987-509d40ca1e3e
  :standard_name: Describe auth concepts including form-based authentication, OAuth
    and authorization
  :uuid: 0d4bc1e0-5016-4ad7-a7ee-2ca69f3bdde9
  :name: Describe difference between authentication and authorization
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 1527f6f1-dff1-45a5-b987-509d40ca1e3e
  :standard_name: Describe auth concepts including form-based authentication, OAuth
    and authorization
  :uuid: c4ff99be-638f-41dc-bcea-232ebc4e954c
  :name: Describe how OAuth works
  :description: "- Draw a sequence diagram how OAuth works at the level of “user goes
    to 3rd party site, 3rd party site authenticates, redirects to predefined url in
    your app”"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 1527f6f1-dff1-45a5-b987-509d40ca1e3e
  :standard_name: Describe auth concepts including form-based authentication, OAuth
    and authorization
  :uuid: 2db3b2bc-cc3a-46f8-8c02-825cf09ad4aa
  :name: Explain how hashing/salting protects from lookup/dictionary attacks
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Explain why storing a password in plain text is never acceptable
    and highly dangerous\r\n- Understand what hashing and salting are\r\n- Explain
    how salting protects from lookup/dictionary table attacks"
- :standard_uuid: 1527f6f1-dff1-45a5-b987-509d40ca1e3e
  :standard_name: Describe auth concepts including form-based authentication, OAuth
    and authorization
  :uuid: d497abbd-8ec2-4540-81f8-6543951cb3a1
  :name: Explain key ideas about how Cookies work
  :description: "Including concepts such as:\r\n\r\n- The fact that they are passed
    in headers\r\n- Expiration / session cookies"
  :guiding_questions: "- What header are cookies sent up to the server in?\r\n- What
    header are cookies sent down to the client in?"
  :resources: ''
  :instructor_notes: "- Explain how sessions and cookies work, where they are stored
    and how they are secured\r\n- Explain what the session secret is and what the
    difference between a signed and unsigned cookie is\r\n- Explain cookies, dates,
    session cookies\r\n- Describe how cookies are sent / received\r\n- Describe how
    browsers save the cookies\r\n- Describe session cookies\r\n- Describe secure cookies\r\n-
    Explain cookies\r\n- Describe cookie domains\r\n- Describe browser cookie domain
    contraints\r\n- Describe cookie expiration\r\n- Give an overview of the stateless
    nature of HTTP\r\n- Describe that cookies play in integral role in most authentication
    systems\r\n- that cookies can have specific subdomains associated with them so
    that they can be shared across sites like www.example.com and app.example.com\r\n-
    that browsers will only send cookies back to the domains allowed in the cookie
    definition\r\n- that cookies have expiration dates, and that browsers respect
    these, and describe that cookies typically contain small numbers or strings that
    servers can use to match with a record in a database on the server\r\n- that cookies
    are just properly formatted strings that are sent with each request and response
    from each response and send those same cookies back with each request, thus allowing
    servers to control what data is saved in the browser \r\n- that cookies can be
    session cookies which expire when the browser is closed\r\n- that cookies can
    specify that they will only be sent over HTTPS"
- :standard_uuid: 33170def-1703-4b8d-a734-90c498882eaf
  :standard_name: Fetch and send JSON with AJAX
  :uuid: 6d6a5fe6-2cce-46bf-ac0a-36d879935a31
  :name: Fetch and send JSON using jQuery
  :description: "- $.get() & $.getJSON()\r\n- $.post() - Stringify a JavaScript object
    into JSON and POST it to a server\r\n- $.ajax()"
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: "- Fetch and send JSON using jquery\r\n- Write syntactically
    valid ajax calls using `$.ajax ` as well as the shortcut `get()` and `post()`\r\n-
    Describe what is happening when $.ajax is invoked\r\n- Use the `context` option
    in $.ajax\r\n- Discuss how APIs are used to connect services across the web\r\n-
    Define and describe JSON\r\n- Explain the formatting rules for JSON. (strings,
    no trailing commas)\r\n- Use JSON.parse() to turn JSON into a javascript object\r\n-
    Use jQuery AJAX methods to hit an api and use the returned JSON to populate information
    on an web page\r\n\r\nthat it takes an object as an argument, that it makes an
    HTTP request, that the `then` functions fire on a 200 response, that the error
    functions fire on non-2xx responses\r\n\r\nto set the value of `this` in callbacks"
- :standard_uuid: 33170def-1703-4b8d-a734-90c498882eaf
  :standard_name: Fetch and send JSON with AJAX
  :uuid: 1c1489fc-0790-4bec-938d-20feb9d1be17
  :name: Fetch and send JSON using raw javascript
  :description: "- new XMLHttpRequest()\r\n- XMLHttpRequest.onreadystatechange\r\n-
    XMLHttpRequest.open(METHOD, URL)\r\n- XMLHttpRequest.send()"
  :guiding_questions: ''
  :resources: "- https://github.com/gSchool/githubProfileClone\r\n- https://github.com/gSchool/placesIveTraveled"
  :instructor_notes: "- Explain what AJAX stands for\r\n- Write code that gets JSON
    and does something on success\r\n- Fetch and send JSON using raw javascript\r\n-
    Make AJAX calls to local API endpoints and modify DOM\r\n- Write ajax calls that
    send form parameters from an object\r\n- Write ajax calls that send the request
    body as JSON\r\n- Describe common Single Page App patterns\r\n- Write ajax calls
    that set the accept header and content types\r\n- Explain the XMLHTTPRequest same
    domain policy\r\n- AJAX w/o jQuery\r\n- Define API\r\n- such as: send url-encoded
    data, get JSON back, send JSON, get JSON back, send JSON, get HTML back"
- :standard_uuid: 1d73b1d3-0485-46fe-969a-176d328d7536
  :standard_name: Explain what CORS is and get around CORS restrictions
  :uuid: 32f99de2-8885-4550-83bb-66fd297a710b
  :name: Define CORS and explain why CORS restrictions exist
  :description: ''
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: 1d73b1d3-0485-46fe-969a-176d328d7536
  :standard_name: Explain what CORS is and get around CORS restrictions
  :uuid: b7fd1fcd-7e1c-4fb2-9051-f11179bb99f7
  :name: Identify what the server needs to support in order to make a cross-origin
    request
  :description: options calls, Access Control headers
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: ''
- :standard_uuid: 1d73b1d3-0485-46fe-969a-176d328d7536
  :standard_name: Explain what CORS is and get around CORS restrictions
  :uuid: 7dc8e60a-bdb8-47b7-b1e5-64b2d9111743
  :name: Explain how JSONP can be used for services that do not support CORS
  :description: ''
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: "- Explain how JSONP can be used for services that don’t support
    CORS\r\n- Bonus: explain the JSONP workaround to the same domain policy\r\n- Bonus:
    specify a jsonp callback parameter in an ajax request"
- :standard_uuid: 6a1bc29f-3c91-4665-ac97-b6562cd6ee3b
  :standard_name: Fetch and send JSON from a server side app
  :uuid: 50943b20-7f6c-4e25-bdae-e61ade4ce13c
  :name: Access content that is CORS protected (or you need to authenticate against)
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Make simple requests using node’s http.get\r\n- Make complex
    requests using node’s http.request and async accumulator\r\n- Display results
    from apps that require app-wide keys (like Tracker)\r\n- Display results from
    apps that require per-user keys (OAuth-style)"
- :standard_uuid: 0b60b9c0-f189-48f3-84d0-f6622dd66971
  :standard_name: Target, create and manipulate DOM Elements
  :uuid: 45d5d927-54d2-4889-b17f-94f47d64faa2
  :name: Create and Return a complex Element from a Function
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 0b60b9c0-f189-48f3-84d0-f6622dd66971
  :standard_name: Target, create and manipulate DOM Elements
  :uuid: 9bb3927a-a810-4604-b271-c089342a62d5
  :name: Can target DOM elements from a CSS Selector with the `document` object
  :description: "- by ID\r\n- by Class\r\n- by Tagname\r\n- Using advanced, composite
    selectors\r\n- using pseudoselectors"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Can target DOM elements from a CSS Selector with the `document`
    object\r\n- Find an element by id, tagname, classname, and more advanced CSS selectors\r\n-
    Traverse the DOM downwards recursively using depth-first-search and childNodes\r\n-
    Traverse the DOM upwards with iteration and parentNode\r\n- Extract values from
    HTML forms including text inputs and select boxes\r\n- Create and access data-attributes
    on elements"
- :standard_uuid: 0b60b9c0-f189-48f3-84d0-f6622dd66971
  :standard_name: Target, create and manipulate DOM Elements
  :uuid: c4505f92-5e5e-4792-aa25-0f5c3459437c
  :name: Can create new DOM Elements
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 0b60b9c0-f189-48f3-84d0-f6622dd66971
  :standard_name: Target, create and manipulate DOM Elements
  :uuid: 77824877-520f-4d22-9b34-cf5ec0e488a9
  :name: Can manipulate DOM Elements
  :description: "by \r\n\r\n- Editing their attributes\r\n- Modifying their contents\r\n-
    Adding or modifying `style`"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Can manipulate DOM Elements\r\n- Access properties of DOM
    elements such as text, html, value\r\n- Set an element’s innerHTML and text\r\n-
    Remove elements from the dom\r\n- Add, update, and remove attributes on elements\r\n-
    Detach and reattach DOM elements"
- :standard_uuid: 0b60b9c0-f189-48f3-84d0-f6622dd66971
  :standard_name: Target, create and manipulate DOM Elements
  :uuid: 975df8fb-359f-49a1-a64f-a56112f47ab4
  :name: Perform DOM Manipulation tasks with jQuery
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- jQuery DOM\r\n- jQuery Traverse\r\n- Write a limited version
    of jQuery(gQuery) covering element CRUD, prepend, etc\r\n- Simple animations w/o
    jQuery\r\n- Create in-memory DOM elements from strings\r\n- Append jQuery objects,
    strings & elements to the DOM\r\n- Remove elements with `remove()`\r\n- Add, remove
    and toggle classes\r\n- Set properties such as checked, style with `prop`\r\n-
    Get the value of properties with `prop`\r\n- Manipulate css with the `.css` method\r\n-
    Get attributes with `attr`\r\n- Set attributes with `attr`\r\n- Use .val() to
    access input values\r\n- Copy an element with `clone()`\r\n- Describe that `prop`
    is appropriate for boolean attributes, whereas `attr` is appropriate for everything
    else\r\n- Use the `data()` method\r\n- Describe why using data is preferable to
    `attr(‘data-behavior’)` for brevity and type coercion\r\n- Replace elements using
    `replaceWith`\r\n- Return the element’s `html()` and `text()`\r\n- Set an element’s
    `html(...)` and `text(...)`\r\n- Describe how many jQuery methods like `html()`
    and `text()` function as getters and setters\r\n- Pull template text from a script
    tag with a type of text/x-template\r\n- Use `show()` and `hide()` to...show and
    hide elements\r\n- Use `fadeIn` and `fadeOut`, as well as other built-in effects
    like `slideUp()`\r\n- Create custom effects with `animate()`\r\n- with `$(‘<div
    class=”foo”>’)`\r\n- with `append`, `appendTo`, `insertAfter`, `after`, `before`
    etc…\r\n- attributes set with HTML data attributes in two ways - $(...).data(‘some-thing’)
    / $(...).data().someThing;\r\n- Select elements by CSS selector\r\n- Use jQuery’s
    each method to iterate over a selection\r\n- Describe jQuery’s implicit iteration
    and the equivalent vanilla JS code.  For example: $( 'div' ).html( 'New Stuff'
    );\r\n- Find child elements of a jQuery object with $(...).find(‘child selector’)\r\n-
    Find all form controls using pseudo-selectors such as :text, :input, :checkbox
    etc…\r\n- Describe that jQuery adds pseudo-selectors that CSS3 does not contain\r\n-
    Find elements that are not a given selector with :not(...)\r\n- Find the closest
    matching element with `$(...).closest(‘tr’)`\r\n- Determine whether a given jQuery
    object matches a selector with `is` - is(‘:checked’)\r\n- Determine whether a
    given jQuery object’s elements have a certain class with `hasClass`\r\n- Explain
    that parent / child / sibling traversal can be brittle\r\n- Write jQuery selectors
    that target multiple different selectors with $(.., …) using a comma\r\n- Write
    chained jQuery methods\r\n- Filter jQuery objects with `filter`\r\n- , and that
    combinations of `closest` and `find` can be more robust"
- :standard_uuid: f031b95c-fc01-450f-a53c-d1043a0313c2
  :standard_name: Respond to Events with Event Listeners
  :uuid: 7576e676-615b-435d-b40a-2c8489da3dcf
  :name: Using targeted DOM nodes, add event listeners
  :description: "- click\r\n- keydown\r\n- hover\r\n- at least one more event"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Using targeted DOM nodes, add event listeners\r\n- Use the
    event object to access information about the event\r\n- Describe event bubbling
    and event capturing\r\n- Use the passed in event.target to determine which dom
    node originated an event\r\n- Write valid click, keypress, and form submission
    event listeners\r\n- Describe the value of `this` inside an event handler function\r\n-
    Describe default actions on links and forms"
- :standard_uuid: f031b95c-fc01-450f-a53c-d1043a0313c2
  :standard_name: Respond to Events with Event Listeners
  :uuid: 1bb8fe0f-1f83-48a1-8e04-72acc3c4c7b1
  :name: Use jQuery to bind event listeners to DOM Elements
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Use jQuery to bind event listeners to DOM Elements\r\n- Write
    syntactically valid event handlers using “on” - $(...).on(‘click’, fn)\r\n- Write
    syntactically valid event handlers directly on jQuery objects $(..).click(fn)\r\n-
    Describe that the DOMContentLoaded event fires when the DOM is complete enough
    to start taking event listeners\r\n- Describe the advantages that jQuery events
    have over raw DOM event handlers\r\n- Write code that wraps `e.target` in a jQuery
    object\r\n- Write syntactically valid delegated event handlers using “on” on parent
    elements - $(...).on(‘click’, ‘child selector, fn)\r\n- Describe what `this` is
    set to inside a jQuery event handler"
- :standard_uuid: f031b95c-fc01-450f-a53c-d1043a0313c2
  :standard_name: Respond to Events with Event Listeners
  :uuid: 2d39d6d0-f54d-4453-9732-109e0d61d1fe
  :name: Add anonymous functions to event listeners
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: f031b95c-fc01-450f-a53c-d1043a0313c2
  :standard_name: Respond to Events with Event Listeners
  :uuid: 68475c04-68f9-4a23-8299-ffe05e6ef2d7
  :name: Differentiate between bubbling and capturing
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Differentiate between bubbling and capturing \r\n- Explain
    what bubbling is and identify cases when it occurs\r\n- Write code that prevents
    bubbling and defaults with `return false` in the handler\r\n- Prevent default
    actions and bubbling from occurring in event listeners\r\n- Describe event delegation
    - in what cases you would attach an event to a parent element instead of directly
    to an element"
- :standard_uuid: f031b95c-fc01-450f-a53c-d1043a0313c2
  :standard_name: Respond to Events with Event Listeners
  :uuid: c408a8b5-ccdb-4112-b01b-abaeed663ca4
  :name: Add named functions to event listeners
  :description: 
  :guiding_questions: 
  :resources: "- https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/js-language/intro-async.instructor.md\r\n-
    http://bytearcher.com/articles/event-loop-10-000ft/"
  :instructor_notes: "- Explain what the event loop is. How does it work? How does
    it relate to asynchronous programming?"
- :standard_uuid: 156396cb-111a-4f7c-9806-9cc9d32623da
  :standard_name: Gather values from a form with Javascript
  :uuid: b3bb3800-f575-4e3c-ab47-023de7333281
  :name: Target input and textarea elements and access their values
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 156396cb-111a-4f7c-9806-9cc9d32623da
  :standard_name: Gather values from a form with Javascript
  :uuid: 00c54de5-fef1-4ac0-a821-85b3efb07e8f
  :name: Target `select` elements and access their values
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 156396cb-111a-4f7c-9806-9cc9d32623da
  :standard_name: Gather values from a form with Javascript
  :uuid: 5cc91fc2-24d4-4aca-9629-38770d5ce4f1
  :name: Target radio button and checkboxes and access their values
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 156396cb-111a-4f7c-9806-9cc9d32623da
  :standard_name: Gather values from a form with Javascript
  :uuid: 391a5882-4286-434c-8304-0fbf5d42f169
  :name: Use jQuery to gather form values
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: f5319b8d-4068-4518-b2ed-418df3349b2d
  :standard_name: Discuss the relationship between JavaScript, the DOM API, and jQuery
  :uuid: e5abec08-ddc1-49b6-bb6d-5ebbafcd1094
  :name: Discuss the relationship between HTML, JavaScript, the DOM API, and jQuery
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Define what DOM stands for\r\n- Discuss the relationship between
    HTML, JavaScript, the DOM API, and jQuery\r\n- Describe that DOM is a tree made
    up of JS objects\r\n- Describe the browser’s role in creating the DOM\r\n- Describe
    javascript’s role in manipulating the DOM\r\n- Explain that DOM properties can
    be altered after initial page load\r\n- Explain the DOM\r\n- Explain the difference
    between a text node and an element\r\n- jQuery Explain\r\n- describe that DOM
    is an in-memory representation of web page elements\r\n- Explain that the DOM
    is a programming interface for HTML documents\r\n- Explain that JavaScript can
    manipulate the DOM\r\n- Explain that jQuery is a library written in JS that was
    designed to handle browser incompatibility issues and makes interacting with the
    DOM easier\r\n- (reading HTML, creating DOM, rendering graphically)\r\n- that
    it provides a way for programs to change the structure, style, and content on
    a page dynamically\r\n- Describe the difference between javascript and jQuery\r\n-
    Include jquery from Bower or by another source local to the project\r\n- Include
    jQuery from a CDN\r\n- Describe that $ is a function that returns a jQuery object\r\n-
    Describe what a jQuery object is\r\n- Describe why jQuery exists, including normalizing
    browser inconsistencies / saving developers time\r\n- Describe the arguments for
    and against using jQuery on a project\r\n- Wrap a DOM element in jQuery\r\n- Describe
    the difference between a raw DOM element and a jQuery-wrapped element\r\n- Unwrap
    a jQuery object with `.get()` and `[]`\r\n- Write syntactically valid document
    ready statements\r\n- Explain what $(fn) / $(document).ready(fn) does and why
    it’s useful\r\n- Describe that jQuery is an expensive function call, and that
    care should be taken to minimize how many times you “re-jQueryify” the same element\r\n-
    that a jQuery object is a javascript object that contains an array of dom elements
    and also has utility methods that can act on those elements"
- :standard_uuid: f14777bc-e9f0-4088-b4c3-19a81cbd22ce
  :standard_name: Store program state Client-side with localStorage
  :uuid: 7620389e-7417-4b93-9d47-a6d1c2f2454f
  :name: Store and retrieve state with localStorage
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: "- Write code that gets and sets an items from localStorage\r\n-
    Articulate key / value string storage (what other data structure is similar? How
    is it different?)\r\n- Store and retrieve state with localStorage\r\n- Use JSON.stringify
    and JSON.parse to store nested objects in localStorage\r\n- Prove that localStorage
    persists between tabs and sessions\r\n- Write code that sets an item in localStorage\r\n-
    Write code that gets and sets items from sessionStorage\r\n- Write code that sets
    an item in sessionStorage\r\n- Prove that localStorage persists after browsers
    are closed\r\n- Describe that sessionStorage is only visible to the _tab_ that
    set it, and expires when the tab is closed\r\n- Create items in localStorage that
    store data such as user selections or form data.\r\n- Retrieve items from localStorage
    and use that data to modify the behavior of something on the page.\r\n- Remove
    items from localStorage.\r\n- Edit items from localStorage, store mutable items.\r\n-
    Stringify and parse data."
- :standard_uuid: 5b55eed8-5a07-4540-92fe-cb4d824b51b7
  :standard_name: Write, mentally evaluate, and store the result of JS expressions
  :uuid: e35e103a-587f-43f8-9f6a-46e9702ea9c8
  :name: Predict the final result of an expression given the actual runtime values
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 5b55eed8-5a07-4540-92fe-cb4d824b51b7
  :standard_name: Write, mentally evaluate, and store the result of JS expressions
  :uuid: 305d6e83-4cde-48e8-86fb-4a1bf3d9ceeb
  :name: Construct grammatical javascript statements using values (primitive and reference),
    operators, literals, and variables
  :description: Students should display the ability to think like a computer- they
    need to understand the order in which an interpreter looks at each statement and
    be able to accurately mentally evaluate those statements.
  :guiding_questions: "* What is a \"literal\", how does it differ from a constructor?\r\n*
    Show some examples of literals\r\n* Write and label each literal type"
  :resources: "- [JS Execution Visualizer](http://www.pythontutor.com/javascript.html#mode=display)\r\n-
    [Intro to Javascript Part 1](https://vimeo.com/141864271)\r\n- [Variables and
    Expressions](https://vimeo.com/142087926)\r\n- [MDN Javascript Guide: Literals](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Literals)"
  :instructor_notes: "## Assessments\r\n* Evaluate the following statement, expression
    by expression. What does result evaluate to?\r\n* var result = (true && false)
    || (true && true || false) && (false || false)\r\n* Write a statement that evaluates
    to `true` if a phone number is valid\r\n* Write a statement that evaluates to
    `true` if a string is not empty\r\n* String and numbers\r\n    * Concatenate two
    strings that contain (only) numbers\r\n    * Subtract two strings that contain
    (only) numbers\r\n* [JS Variables Exercise](https://github.com/gSchool/javascript-variables-beginner)\r\n\r\n\r\n##
    Legacy Objectives\r\n\r\n- Write single and multi-line comments in JS (//, /**/)\r\n-
    List and describe each of the primitive data types (number, string, boolean, null,
    undefined, symbols (es6))\r\n- Declare variables and assign them values. Explain
    what’s happening\r\n- Write syntactically valid `var` declarations \r\n- Explain
    what a variable is and how it works using the terms: “keyword, identifier, value,
    assign”\r\n- Explain variable assignment\r\n- Mentally evaluate primitive variable
    expressions\r\n- Write code that concatenates two strings together\r\n- Describe
    why `foo + bar` is different from `foo += bar` (that strings are immutable)\r\n-
    Write syntactically valid strings that contain newline characters, escaped quotes
    etc..\r\n- Write syntactically valid multiline strings with slashes\r\n- Define
    ‘expression’. Give examples\r\n- Define ‘statement’. Give examples\r\n- Mentally
    evaluate statements that contain variables and primitive data types\r\n- List
    and describe the special values Infinity, -Infinity, NaN, Undefined, null. Write
    and evaluate code that produces each one\r\n- Explain the difference between null
    and undefined\r\n- Define ‘type coercion’ and write code that demonstrates the
    cases in which it occurs\r\n- Write and evaluate expressions using the arithmetic
    operators: +, -, *, /, %\r\n- Determine how a computer processes compound expressions
    (operator precedence)\r\n- Identify all of the truthy and falsy values in JS and
    explain what it means to be “truthy” and “falsy”\r\n- Write and evaluate expressions
    with logical operators (&&, ||, <, >, <=, >=, ===)\r\n- Explain the difference
    between == and ===. Give examples\r\n- Explain what “short-circuit evaluation”
    is and what the return values from such statements are\r\n- Explain the difference
    between and give examples of Unary and Binary Operators\r\n- Explain why you must
    use `var`\r\n\r\nand identify identifiers that would not be valid.\r\nIt gets
    assigned to the value of the variable (and not the variable itself)\r\nShow what
    happens when you don’t. (scope/hoisting!)\r\n\r\n```\r\nvar foo = \"This is a
    really long \\\r\nstring\"\r\n```\r\n\r\n\r\n## Legacy Objectives\r\n- Write an
    Object literal\r\n- Write an Array literal\r\n\r\n```js\r\nvar person = {\r\n
    \ name: 'Fred'\r\n};\r\n```\r\n\r\n```js\r\nvar people = [];\r\n```\r\n\r\n- Construct
    grammatical javascript statements using values (primitive and reference), operators,
    literals, and variables 2\r\n- Use Literals to create primitives or data structures
    in place\r\n- Write, evaluate, and store the result of JS expressions\r\n- Construct
    grammatical javascript statements using values (primitive and reference), operators,
    literals, and variables\r\n\r\n## Success Criteria\r\n* Uses numerical, and string
    types\r\n    * Uses numerical operators\r\n    * Uses string concatenation\r\n
    \   * Uses string methods\r\n* Uses Logical and Comparison Operators\r\n    *
    evaluates a non-boolean value for Truthy vs Falsey value\r\n    * uses logical
    operators that produce boolean values (&&, || )\r\n    * uses boolean literals\r\n
    \   * uses comparison operators (==, ===, !=, !==)\r\n    * uses short-circuiting
    to conditionally return a value\r\n* Can recognize NaN and its causes\r\n* Appropriately
    uses Empty Values\r\n    * undefined prior to definition\r\n    * null is for
    explicitly empty values\r\n    * “” for string types that are empty or start empty\r\n
    \   * 0 for numerical value initialization\r\n* Can evaluate statements by order
    of evaluation\r\n* Can store the result of an evaluated expression in a variable\r\n*
    Can accurately predict the final result of an expression given the actual runtime
    values\r\n* Can generalize a specific expression (from `2 + 2` to `x + y`) \r\n\r\n##
    Success Criteria\r\n* Use and identify a string literal\r\n* Use and identify
    a number literal\r\n* Use and identify a boolean literal\r\n* Use and identify
    an object literal\r\n* Use and identify an array literal\r\n* Use and identify
    a function literal"
- :standard_uuid: 861bcda5-c1ed-470c-9389-fafcf80c2399
  :standard_name: Control the flow of a program using conditionals and loops
  :uuid: 753f714c-a51d-4092-9ced-6e3dd2b05f15
  :name: Solve problems requiring conditionals and loops (such as accumulator pattern)
    with nested/combined control-flow statements
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 861bcda5-c1ed-470c-9389-fafcf80c2399
  :standard_name: Control the flow of a program using conditionals and loops
  :uuid: f80d8ef7-1b83-4b55-a4cf-e7a58e63e0c2
  :name: Iterate over simple data structures (arrays, objects) with loops
  :description: "* Write loops that iterate over arrays of primitive values\r\n* Write
    loops that use for..in to access the keys and values of an object"
  :guiding_questions: 
  :resources: "https://github.com/gSchool/grading-js\r\n\r\n\r\n- JS Basics Part 1
    Lecture - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/js-language/js-basics-part-1.instructor.md
    (Values, Variables, Boolean Logic)\r\n- JS Basics Part 2 Lecture - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/js-language/js-basics-part-2.instructor.md
    (Conditionals, Loops)\r\n- Fundamentals Review - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/js-language/fundamentals-review.instructor.md
    (Variables, Functions, Objects, Arrays)\r\n- Functions Part 1 Lecture - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/js-language/js-functions-part-1.instructor.md
    (Basic Functions and Scope)\r\n- Functions Part  2 Lecture - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/js-language/js-functions-part-2.instructor.md
    (Closures, More Scope, Environments)\r\n- Higher Order Functions Lecture - https://www.google.com/url?q=https%3A%2F%2Fgithub.com%2FgSchool%2Ffullstack-curriculum%2Fblob%2Fmaster%2Flessons%2Fjs-language%2Fjs-functions-higher-order.instructor.md&sa=D&sntz=1&usg=AFQjCNE-GTAjWP6Bw8HYIQ3tUEK8M9XVXg
    (Callbacks, Returning Functions, Iterators)\r\n- Underscore Lab - https://github.com/gSchool/underscore_lab
    (Functions, Iterators, Objects, Arrays.  Part 2 is focused on Higher Order Functions)\r\n-
    Lodash TDD - https://github.com/gSchool/lodash-tdd (Jasmine, Functions, Iterators,
    Objects, Arrays.)\r\n- HTTP Parser - https://github.com/gSchool/http-parser-js\r\n-
    Polymorphism with JavaScript - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/js-language/js-polymorphism.instructor.md
    (Using design-by-contract style polymorphism)\r\n- Polymorphism with Prototypal
    Inheritance - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/js-language/polymorphism-with-prototypal-inheritance.md
    (Polymorphism based on inheritance rather than design by contract)\r\n- OOP Encapsulation
    - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/js-language/oop-encapsulation.instructor.md
    (Introduction to Encapsulation and data hiding)\r\n- Methods, this, constructors
    - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/js-language/methods-this-constructors.instructor.md\r\n-
    Guitar Store Runtime Polymorphism - https://github.com/gSchool/js-polymorphism-guitar-store
    (Fun exercise with building a fake AI for a guitar store)\r\n- Encapsulation Exercise
    using a Grade Book - https://github.com/gSchool/js-encapsulation\r\n- JavaScript
    Challenges - https://github.com/gSchool/javascript-challenges (Long Running series
    of exercises to learn JavaScript)\r\n- JavaScript For Cats - http://jsforcats.com/
    (Intro Resource to JavaScript)\r\n- NodeSchool JavaScripting - https://github.com/sethvincent/javascripting
    (JS Fundamentals Exercises through Node CLI)\r\n- JavaScript Pre-Ember Exercises
    - https://github.com/gSchool/g4-javascript-prework (Exericeses and resources for
    prerparing for a JS MVC (also has Ruby resources))\r\n- Reddit API Single Page
    App - https://github.com/gSchool/reddit-api-js (Covers Local Storage, DOM Traversal)\r\n-
    JS Coding challenges & Interview Qs - https://github.com/kolodny/exercises (Some
    basic javascript coding challenges and interview questions)\r\n- Password reset
    in Express - http://sahatyalkabov.com/how-to-implement-password-reset-in-nodejs/
    (Step-by-step and awesome.  We could run a class on it.)\r\n- JavaScript Deck
    of Cards - https://github.com/gSchool/g11-course-curriculum/tree/master/week03/03-exercises/js-deck-of-cards\r\n-
    Testing with Jasmine - a primer - https://github.com/gSchool/g11-course-curriculum/tree/master/week04/04_exercises/js-jasmine-primer\r\n-
    \ - https://github.com/gSchool/js-iteration\r\n- Functional Programming with JavaScript
    - http://jhusain.github.io/learnrx/\r\n- JS Functional Programming - https://github.com/gSchool/g11-course-curriculum/tree/master/week04/04_lectures/js-functional-programming\r\n-
    JS Loops Part 2 - https://github.com/gSchool/g11-course-curriculum/tree/master/week04/04_exercises/js-loops-part2\r\n-
    JS Loops Part 3 - https://github.com/gSchool/g11-course-curriculum/tree/master/week04/04_exercises/js-loops-part3
    (JS, loops, functional programming)\r\n- JS Functions Part 3 - https://github.com/gSchool/g11-course-curriculum/tree/master/week04/04_exercises/js-functions-part3\r\n-
    Statements vs Expressions - https://github.com/gSchool/g11-course-curriculum/blob/master/week05/05_lectures/js-statements-vs-expression.md\r\n-
    JavaScript Rock Paper Scissors - https://github.com/gSchool/g11-course-curriculum/tree/master/week05/05_exercises/js-rock-paper-scissors\r\n-
    JavaScript OOP Basics - https://github.com/gSchool/g11-course-curriculum/tree/master/week05/05_exercises/js-oop-basics\r\n-
    JS - Methods, This, Constructors - https://github.com/gSchool/g11-course-curriculum/tree/master/week05/05_exercises/js-methods-this-constructors\r\n-
    JS - Rock, Paper, Scissors - https://github.com/gSchool/g11-course-curriculum/tree/master/week05/05_exercises/js-rock-paper-scissors\r\n-
    JS - Autoshop - https://github.com/gSchool/g11-course-curriculum/tree/master/week05/05_exercises/js-auto-shop\r\n-
    JS - OOP Zoo - https://github.com/gSchool/g11-course-curriculum/tree/master/week05/05_exercises/js-oop-zoo\r\n-
    JS - Tic Tac Toe - https://github.com/gSchool/g11-course-curriculum/tree/master/week05/05_exercises/js-tic-tac-toe\r\n-
    Pragmatic Guide to JavaScript Testing - https://github.com/alexanderGugel/pragmatic-testing\r\n-
    JS - Jasmine Review - https://github.com/gSchool/g11-course-curriculum/tree/master/week05/05_exercises/js-jasmine-review\r\n-
    JS - Game Library - https://github.com/gSchool/g11-course-curriculum/tree/master/week05/05_exercises/js-game-library\r\n-
    https://github.com/gSchool/iteration-and-object-assessment\r\n- https://github.com/gSchool/intro-to-objects-js\r\n-
    https://github.com/gSchool/jasmine_basics_assessment\r\n- https://github.com/gSchool/javascript-challenges\r\n-
    https://github.com/gSchool/javascript-rails-email-interface\r\n- https://github.com/gSchool/what-is-this\r\n-
    https://github.com/gSchool/csv-to-markdown-js\r\n\r\n\r\n(Fast Conditionals)[http://archive.oreilly.com/pub/a/server-administration/excerpts/even-faster-websites/writing-efficient-javascript.html#fast_conditionals]"
  :instructor_notes: "- Iterate over simple data structures (arrays, objects) with
    loops\r\n- Repeat a block of statements with `for` and `while` loops\r\n- Iterate
    over a simple data structure (array, object) with loops 2\r\n\r\n## Success Criteria\r\n*
    Uses loops to repeat statements\r\n    * for loops for known iteration counts\r\n
    \   * while loops for conditional iteration counts\r\n* Uses `break` to stop a
    loop prior to a loop’s end\r\n* Uses `continue` to stop loop iteration from continuing
    \r\n- Control the flow of a program using `if` and `switch` statements\r\n- Iterate
    over a simple data structure (array, object) with loops\r\n\r\n## Success Criteria\r\n*
    Uses the if statement when:\r\n\t* There are no more than two discrete values
    for which to test.\r\n\t* There are a large number of values that can be easily
    separated into ranges.\r\n* Uses the switch statement when:\r\n\t* There are more
    than two but fewer than 10 discrete values for which to test.\r\n\t* There are
    no ranges for conditions because the values are nonlinear.\r\n* Properly make
    use of `break` and `default`\r\n* Properly nests if statements\r\n* Uses else
    cases only when necessary\r\n* Simplifies conditionals to truthy and falsy values
    when appropriate\r\n* Can write complex grouped conditionals\r\n\r\n## Assessments\r\nhttps://github.com/gSchool/grading-js\r\n\r\n##
    Resources\r\nhttp://archive.oreilly.com/pub/a/server-administration/excerpts/even-faster-websites/writing-efficient-javascript.html#fast_loops\r\n\r\n##
    Legacy Objectives and Notes\r\n- Write a for loop\r\n- Identify the need for iteration\r\n-
    Write code that returns from a for loop\r\n- Write basic accumulators with strings\r\n-
    Write basic accumulators with arrays\r\n- Implement simple iteration algorithms
    with `for`\r\n- Write a basic accumulator setting object properties dynamically\r\n\r\nsuch
    as filter, map, sum, min, max, find, findLast, all, none, some, reverse, join\r\nHave
    students implement:\r\n\r\n- find\r\n- all (every)\r\n- none\r\n\r\nGive a student
    the following snippet:\r\n\r\n```\r\nvar run = function () {\r\n  for (var i =
    0; i < 10; i++) {\r\n    console.log(i);\r\n  }\r\n}\r\n\r\nrun()\r\n```\r\n\r\nAnd
    ask them to change the code so that it only prints 5 numbers (using return)\r\n\r\n```\r\nvar
    run = function () {\r\n  for (var i = 0; i < 10; i++) {\r\n    console.log(i);\r\n
    \   if (i === 5) {\r\n      return\r\n    }\r\n  }\r\n}\r\n\r\nrun()\r\n```"
- :standard_uuid: 5767bdd1-0679-43f5-9e7e-addeb2d8c1a4
  :standard_name: Diagram and explain how reference and primitive types are stored
    in memory and how they are passed around
  :uuid: 7d1108cf-a26d-41ed-9f03-8ec19099fa04
  :name: Contrast “passing a value” vs “passing a reference”
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 5767bdd1-0679-43f5-9e7e-addeb2d8c1a4
  :standard_name: Diagram and explain how reference and primitive types are stored
    in memory and how they are passed around
  :uuid: 66ac0ed5-fe21-4f40-9a46-07eea4d615ab
  :name: Mentally parse statements that combine value and reference types
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 5767bdd1-0679-43f5-9e7e-addeb2d8c1a4
  :standard_name: Diagram and explain how reference and primitive types are stored
    in memory and how they are passed around
  :uuid: 256c536c-a532-4938-8c60-5db5bfd6e725
  :name: Diagram how reference and primitive types are stored in memory given an algorithm
    with loops / conditionals / arrays / objects
  :description: "- Shows a table of names and values, with arrows between them\r\n-
    Shows arrays as a strip of boxes\r\n- Shows objects as a table of keys and pointers
    to values\r\n- Shows references to objects as pointers pointing to the object\r\n-
    Shows the prototype as a nested object inside of an object\r\n- Shows functions
    as reference types"
  :guiding_questions: 
  :resources: http://www.pythontutor.com/javascript.html#mode=edit
  :instructor_notes: "- Diagram how reference and primitive types are stored in memory
    given an algorithm with loops / conditionals / arrays / objects\r\n- Diagram and
    explain how reference and primitive types are stored in memory\r\n\r\n\r\n## Success
    Criteria\r\n* Shows that primitive types are immutable\r\n* Shows a table of names
    and values, with arrows between them\r\n* Shows arrays as a table of indexes with
    pointers to values\r\n* Shows objects as a table of keys and pointers to values\r\n*
    Shows references to objects as pointers pointing to the object\r\n* Shows the
    prototype as a nested object inside of an object\r\n* Shows functions as reference
    types\r\n\r\n### Legacy Objectives\r\n- Diagrams\r\n- Diagram and explain how
    reference and primitive types are stored in memory\r\n\r\n- Represent variables
    visually\r\n- Draw arrays and objects similarly\r\n- Draw functions as objects\r\n-
    Draw prototype properties and prototypes differently\r\n- Draw links between arrays/objects
    and their values\r\n\r\nDraw variables as pointers to objects"
- :standard_uuid: 7f7577f7-4224-442d-aa17-dc44c4fd21c7
  :standard_name: Store and Access values in Arrays and Objects
  :uuid: c3d6815a-2d4e-4801-9a0e-2092ddc6ffa1
  :name: Store and access values using dot notation in objects
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 7f7577f7-4224-442d-aa17-dc44c4fd21c7
  :standard_name: Store and Access values in Arrays and Objects
  :uuid: 37c616c9-74ca-4d7f-98c9-5f7c82265f60
  :name: Store and access values by index in arrays
  :description: "- by typing a number\r\n- by using a variable\r\n- by using the result
    of an expression"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "## Success Criteria\r\n* Access values by index in arrays\r\n\t*
    by typing a number\r\n\t* by using a variable\r\n\t* by using the result of an
    expression\r\n* Access values by bracket notation in objects\r\n\t* by typing
    a string\r\n\t* by using a variable\r\n\t* by using the result of an expression\r\n*
    Access values using dot notation in objects\r\n* Access list of keys using Object.keys()\r\n*
    Find the position of an element using .indexOf()\r\n* Use .slice() to get a subset
    of an array\r\n* Use .splice() to modify an array in place\r\n* Use .push(), .pop(),
    .unshift(), .shift(), .join() to work on arrays, and use their return values\r\n\r\n\r\n##
    Assessments\r\n* https://github.com/gSchool/simple-object-access-exercises/blob/master/object_array_access.md\r\n\r\n##
    Legacy Objectives\r\n- Access an Object using . notation\r\n- Access an Array
    using array[]"
- :standard_uuid: 7f7577f7-4224-442d-aa17-dc44c4fd21c7
  :standard_name: Store and Access values in Arrays and Objects
  :uuid: aee22b32-4062-4f8d-83ee-3364817b8b0e
  :name: Store and access values by bracket notation in objects
  :description: "- by typing a string\r\n- by using a variable\r\n- by using the result
    of an expression"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "## Success Criteria\r\n* Store a natural list of primitive values\r\n*
    Generate an array from an algorithm, then access that array\r\n* Use objects as
    hashmaps\r\n* Converts array-like objects into arrays using Array.prototype.slice.call(array_like_object)\r\n\r\n\r\n##
    Assessments\r\nhttps://github.com/gSchool/simple-object-access-exercises/blob/master/object_array_access.md"
- :standard_uuid: 7f7577f7-4224-442d-aa17-dc44c4fd21c7
  :standard_name: Store and Access values in Arrays and Objects
  :uuid: e8ded5c0-a4fe-4f59-9927-f92cd7558001
  :name: Access and modify data using common Object and Array methods
  :description: "- Access list of keys using Object.keys()\r\n- Find the position
    of an element using .indexOf()\r\n- Use .slice() to get a subset of an array\r\n-
    Use .splice() to modify an array in place\r\n- Use .push(), .pop(), .unshift(),
    .shift(), .join() to work on arrays, and use their return values"
  :guiding_questions: 
  :resources: https://gist.github.com/mjhea0/7c34346e4a5dac4f1e42
  :instructor_notes: "- Access and modify data using common Object and Array methods
    such as\r\n- Examine JavaScript’s global objects like Array, Object etc\r\n- and
    differentiate between instance methods like .push()/.pop() and global object methods
    like .isArray()"
- :standard_uuid: 78dcc2e4-dcb2-4b29-9333-fe4e6091063c
  :standard_name: Create and access complex nested data structures
  :uuid: c345e5cd-d9de-42cc-9565-ae438b93ed7c
  :name: Accesses data in nested structures
  :description: 
  :guiding_questions: 
  :resources: "[JS Execution Visualizer](http://www.pythontutor.com/javascript.html#mode=display)"
  :instructor_notes: "## Success Criteria\r\n* Can access values inside of Objects
    that contain Arrays\r\n* Can access values inside of Arrays that contain Objects\r\n*
    Use a loop to parse a large, complex data structure\r\n* Use nested loops to parse
    a complex a multidimensional data structure\r\n\r\n\r\n## Assessments\r\n* Given
    an API response, parse the JSON and display it\r\n\t* Suggested APIs\r\n\t\t*
    Reddit\r\n\t\t* OMDB\r\n\t\t* iTunes\r\n\t\t* giffy\r\n\t\t* github\r\n* https://github.com/gSchool/simple-object-access-exercises"
- :standard_uuid: 78dcc2e4-dcb2-4b29-9333-fe4e6091063c
  :standard_name: Create and access complex nested data structures
  :uuid: 34d4f11d-b86b-4331-81ce-85111c8d1ab5
  :name: Employs standard data structures
  :description: "- Given a list of objects (in plain English), decide to use an array\r\n-
    Represent a stateful piece of data as an object\r\n- Given a complex object (such
    as a book with author data and publisher data), represent it as a series of nested
    objects"
  :guiding_questions: ''
  :resources: ''
  :instructor_notes: "## Success Criteria\r\n* Given a list of objects (in plain English),
    decide to use an array\r\n* Represent a stateful piece of data as an object\r\n*
    Given a complex object (such as a book with author data and publisher data), represent
    it as a series of nested objects\r\n\r\n\r\n\r\n## Assessments\r\n* Model a list
    of books with author and publisher data\r\n* Model a list of students with classes\r\n*
    Model a list of sports teams with players, and stats about the players"
- :standard_uuid: 78dcc2e4-dcb2-4b29-9333-fe4e6091063c
  :standard_name: Create and access complex nested data structures
  :uuid: 2541c8fb-8bf6-43e0-9b75-b2c28811ab38
  :name: Choose the appropriate data structure to represent nouns and solve problems
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6754eeea-a10b-4033-a598-a0e081257f60
  :standard_name: Encapsulate reusable code in functions
  :uuid: 76c9025c-edc3-4fe8-a659-b4ba6e93d6ed
  :name: Formulates new functions given inputs and desired outputs
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6754eeea-a10b-4033-a598-a0e081257f60
  :standard_name: Encapsulate reusable code in functions
  :uuid: 68697343-a54c-40b9-87cf-de470a939a80
  :name: Mentally evaluate expressions that use the return value of function calls
  :description: "- like add(add(5,6), add(6,7))\r\n- like add(5,6) + add(6,7)\r\n-
    join(“”).filter()...\r\n- document.querySelectorAll(“#foo”)[0];"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6754eeea-a10b-4033-a598-a0e081257f60
  :standard_name: Encapsulate reusable code in functions
  :uuid: 687a7c89-35c4-43c6-bb3f-f1d0a8a85178
  :name: Define and give examples of “Pure functions” that do not have side effects.  Define
    and give examples of “side effects”.
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6754eeea-a10b-4033-a598-a0e081257f60
  :standard_name: Encapsulate reusable code in functions
  :uuid: 5775eb65-a9c5-47dc-97b5-245e23482e92
  :name: Can diagram the call stack
  :description: Diagrams the call stack as a series of boxes within boxes
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 6754eeea-a10b-4033-a598-a0e081257f60
  :standard_name: Encapsulate reusable code in functions
  :uuid: 6bb08adc-9dd2-467d-a97e-c331a92ff56d
  :name: Create and use local variable scope when appropriate within Functions
  :description: "- All data is either:\r\n    - created within the function with `var`\r\n
    \   - passed in through parameters\r\n    - accessible via a closure\r\n- Returns
    any data needed from the function with the `return` keyword\r\n- Can diagram the
    effect of a function operating on an object passed into the function as a reference"
  :guiding_questions: 
  :resources: "[Closures](https://www.youtube.com/watch?v=CQqwU2Ixu-U&list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84&index=5)"
  :instructor_notes: "## Assessments\r\n* https://github.com/gSchool/functions-objects-js-homework\r\n*
    https://github.com/gSchool/js-functions-part2"
- :standard_uuid: 6754eeea-a10b-4033-a598-a0e081257f60
  :standard_name: Encapsulate reusable code in functions
  :uuid: 2eda74c6-19ea-4dec-8a93-33bf6833a8e6
  :name: Abstracts sets of expressions into functions
  :description: 
  :guiding_questions: 
  :resources: "- [Javascript Call Stack](https://vimeo.com/134061121)\r\n- https://github.com/gSchool/js-accumulator-assessment\r\n-
    https://github.com/gSchool/js-encapsulation\r\n- https://github.com/gSchool/js-hof-filter-map-reduce\r\n-
    https://github.com/gSchool/js-iteration\r\n- https://github.com/gSchool/js-methods-this-constructors\r\n-
    https://github.com/gSchool/js-node-log-file-parsing\r\n- https://github.com/gSchool/js_oop_exercise"
  :instructor_notes: "## Assessments\r\n* https://github.com/gSchool/js-functions-part1\r\n*
    http://eloquentjavascript.net/1st_edition/chapter6.html \r\n* Write simple functions
    given the function signature and a behavioral description\r\n* Write simple functions
    to solve a problem without the function signature\r\n* Write recursive functions\r\n\r\nWhat
    does it mean for a function to have a side effects?\r\n\r\n\r\n### Legacy Objectives\r\n-
    Define what a function is\r\n- Explain what a function is and how it works using
    analogies . (comparing it to a machine, black box, factory, etc.)\r\n- Define
    functions using declarations and expressions, and explain the difference between
    them\r\n- Articulate the difference between defining and invoking a function\r\n-
    Describe how data flows into a function (by passing in arguments)\r\n- Describe
    how data flows out of functions (by using the `return` keyword)\r\n- Describe
    the difference between function expressions, named and anonymous functions\r\n-
    Write named functions and anonymous functions that take 0, 1 and many arguments\r\n-
    Explain how functions handle arguments\r\n- Can access all arguments using array-like
    `arguments` object\r\n- Can take more arguments than specified in the parameters\r\n-
    Parameters that aren’t specified when the function is invoked are set to ‘undefined’\r\n-
    Explain that functions are values and that they can be stored in variables just
    like any other value\r\n- Call functions from above, below and in separate files
    from function definition\r\n- Write functions that return values\r\n- Write functions
    that have side effects, such as manipulating dom\r\n- Explain what recursion is
    and write a functions that call themselves recursively\r\n- Explain the relationship
    between functions and scope\r\n- Write and invoke functions as methods on objects\r\n-
    Use built-in Javascript methods to perform common tasks on objects\r\n\r\n(loosely:
    “a function is a set of instructions that can take 0 or more inputs, perform calculations
    and either return values or cause changes to occur”)"
- :standard_uuid: 4ff0b45a-b12f-416e-a130-64ad30dfb133
  :standard_name: Identify and fix common JS Errors
  :uuid: a13f339a-6635-4e26-ad91-cb019b989873
  :name: Catch exceptions using a `try...catch` block and handle them
  :description: 
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: 4ff0b45a-b12f-416e-a130-64ad30dfb133
  :standard_name: Identify and fix common JS Errors
  :uuid: 35d3bac0-c757-444b-a463-355ac2216efa
  :name: Identify common JS errors and their causes
  :description: "- SyntaxError\r\n- TypeError\r\n- ReferenceError\r\n- RangeError\r\n*
    Identifies the line number of error messages from a stack trace\r\n* Resolves
    common JS errors by reading a stack trace and identifying the cause of the error"
  :guiding_questions: 
  :resources: 
  :instructor_notes: 
- :standard_uuid: d81b8151-89b1-4816-9284-0c9a730993c3
  :standard_name: Execute code at a specified interval or after a delay using timers
  :uuid: 0f176ea0-3f89-4586-baaa-95cc1f0443d5
  :name: use timers to execute code at a specified interval or after a delay
  :description: "- use setTimeout() to execute code after a delay\r\n- use setInterval()
    to execute code every interval\r\n- store a timer ID\r\n- use a stored timer ID
    to clear a timer"
  :guiding_questions: 
  :resources: 
  :instructor_notes: "## Assessments\r\n* https://github.com/gSchool/javascript_timers_callbacks_exercise\r\n\r\n\r\nMake
    sure students understand the relationship between timers and the event loop"
