---
- :uuid: 7313b475-d281-4c72-a3b3-1167eb3b13e3
  :name: The Command Line
  :subject_uuid: 7313b475-d281-4c72-a3b3-1167eb3b13e3
  :subject_name: The Command Line
  :description: ''
  :instructor_notes: "##Assessments\r\n- [LMS Navigating File System](https://coursework.galvanize.com/assessments/50)\r\n-
    [LMS CL, HTML, Git Basics](https://coursework.galvanize.com/assessments/31)\r\n-
    [LMS Command Line Basics v2](https://coursework.galvanize.com/assessments/50)\r\n-
    [LMS Command Line Basics v1](https://coursework.galvanize.com/assessments/7) \r\n-
    [LMS Command Line Mystery Exercise](https://github.com/veltman/clmystery)\r\n-
    [LMS Plato's Republic Exercise](https://github.com/gSchool/platos-republic-cli-exercise)\r\n\r\nResources\r\n\r\n-
    I/O Redirection - linuxcommand.org \r\n- The Command Line Crash Course - http://cli.learncodethehardway.org/book/
    (Covers most of the commands students will need to know. Can be entirely self-directed.)\r\n-
    Command Line Mystery - https://github.com/veltman/clmystery (Fun activity focusing
    on CL basics and grep)\r\n- CL Primer for Beginners - http://lifehacker.com/5633909/who-needs-a-mouse-learn-to-use-the-command-line-for-almost-anything
    (Lifehacker article)\r\n- Linux Command Line Flashcards - https://quizlet.com/18423046/linux-command-line-flash-cards/
    (Review basic commands with quizlet flashcards)\r\n- CL Legacy Lecture - https://github.com/gSchool/fullstack-curriculum/blob/master/legacy/command-line.md
    (Notes on a CL basics lecture)\r\n- Art of the Command Line - https://github.com/jlevy/the-art-of-command-line\r\n-
    https://github.com/gSchool/warmup-command-line\n\n###Assessments"
- :uuid: 4298574a-4ac8-4a6b-8195-91c349a04209
  :name: Dev Environment
  :subject_uuid: 4298574a-4ac8-4a6b-8195-91c349a04209
  :subject_name: Dev Environment
  :description: |-
    https://developer.chrome.com/devtools





    https://typing.io/
  :instructor_notes: "##Assessments\r\n[LMS JS Debugging & DOM](https://coursework.galvanize.com/assessments/34)\r\n[GH
    Find the Bugs Warmup](https://github.com/gSchool/findTheBugs-warmup)\r\n[GH JS-Bug-Sync](https://github.com/gSchool/js-bug-sync)\n\n\n\n###Assessments\r\n\r\n-
    Instructors should evaluate whether or not students are regularly taking advantage
    of shortcuts in different programs/tools."
- :uuid: a7d5be0f-3937-465a-b5e9-b2555642e9d9
  :name: HTML
  :subject_uuid: a7d5be0f-3937-465a-b5e9-b2555642e9d9
  :subject_name: HTML
  :description: "**Why?** Semantic HTML is meaningful HTML. Your pages will be friendlier
    for both users and machines, allowing better SEO performance and better integration
    with accessibility devices.\r\n\r\n## Resources\r\n- [MDN HTML5](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5)\r\n-
    [HTML Spec](https://html.spec.whatwg.org/#headings-and-sections)\r\n- [Writing
    your best code](http://learn.shayhowe.com/html-css/writing-your-best-code/)\r\n\n\n-
    What are some HTML tags that don't affect layout, yet are included for semantic
    reasons?\r\n- How might we write pages that are easier for machines to parse and
    read?\r\n- What are some websites that are easy for a screenreader to read? What
    are some that are too difficult for a screenreader to read?\r\n- \"Article View\"
    in Safari is a recent innovation that helps content be presented in a standard
    way. How does this relate to accessibility?\r\n- Imagine you have to write a program
    that reads webpages. What HTML tags and attributes could a developer use that
    would make this easiest for you to accomplish?\n\n- [Dive Into HTML5](http://diveintohtml5.info/semantics.html)\n\n\n\nHow
    does the structure of the document affect how it appears on the page?  \r\nWhat
    is a Doctype?  \r\nWhat is the `head` tag used for?  \r\nDo child elements in
    the `head` tag change the visual appearance of the page?  \r\nWhat is the `body`
    tag used for?  \r\nWhat is the top-level element for any HTML document?  \r\nWhat
    is usually in the first line of every HTML document?  \r\n\r\nWhat is the difference
    between block-level elements and inline elements?\n\n- https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements\r\n-
    https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elemente\r\n- https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\n\n**Why?**
    HTML Forms allow you to gather input from the user. Any time you’ve ever signed
    up for anything, you’ve used a form! The applications you build at Galvanize and
    throughout your career will feature many, many forms and form elements.\n\n\n\n-
    [Dive into HTML5 Forms](http://diveintohtml5.info/forms.html)"
  :instructor_notes: "**Notes:** Going back through a document they’ve written, or
    going through a document that has been created for them is most similar to the
    environment they’ll encounter at work - adding semantic markup to existing pages
    is an ongoing effort that most companies are doing in order to improve SEO.\r\n\r\n##
    Assessments\r\n- Markup a news article with semantic HTML5 tags\r\n- Go back and
    make your prework (personal website) semantic\r\n- Create a landing page for your
    favorite product\r\n  - included images\r\n  - include tables to compare with
    similar products\r\n- Find an endangered species online. Produce a table that
    lists the estimated population of that animal in every region in which it resides.\r\n-
    [LMS CSS|Semantic HTML level One (Small section on Semantic HTML)](https://coursework.galvanize.com/assessments/73)\r\n-
    [Basic-HTML exercise](https://github.com/gSchool/basic-html)\r\n- [GH HTML from
    Scratch Exercise](https://github.com/gSchool/html-from-scratch-warmup)\r\n- [GH
    Semantic Markup Exercise](https://github.com/gSchool/semantic-html-exercise)\r\n-
    [GH Semantic HTML Scavenger Hunt (Doens't necessarily convey understanding)](https://github.com/gSchool/g18-semantic-html-scavenger-hunt-submissions)\r\n\r\n\r\n\r\n\r\n-
    Explain why writing semantic HTML is important\r\n- Identify and describe new
    HTML5 tags that can be used to create semantic markup\r\n- Convert an un-semantic
    HTML page to an semantic page\r\n\r\nStudents should be able to articulate how
    semantic HTML relates to SEO and Accessibility \r\n\n\n###Assessments\r\n- [LMS
    Embedding Media](https://coursework.galvanize.com/assessments/64)\r\n- [GH Image
    Map Exercise](https://github.com/gSchool/image-map-exercise)\r\n- [GH Embedding
    Audio/Video Exercise](https://github.com/gSchool/embedding-audio-video)\n\n##
    Assessments\r\n\r\n- All HTML documents from here on out should comply with the
    success criteria.\r\n- XML your house (`<room>` tags, `<furniture>` tags, etc
    stress the idea of arbitrary tags)\r\n- Profile Page Exercise (EX1 in HTML LE)\r\n-
    Favorites List Exercise (EX2 in HTML LE)\r\n- [LMS HTML | Git | GitHub - Level
    1 (Basic HTML)](https://coursework.galvanize.com/assessments/72)\r\n- [LMS HTML
    & Forms](https://coursework.galvanize.com/assessments/24)\r\n- [LMS HTML Assessmet
    (BASICS)](https://coursework.galvanize.com/assessments/53)\r\n- [Basic-HTML Exercise
    (HTML/CSS)](https://github.com/gSchool/basic-html)\r\n- [GH Broken HTML](https://github.com/gSchool/invalid-html)\r\n------\r\n\r\n##
    Success Criteria:\r\n\r\n- Tags are in a logical order to match reality\r\n- Tags
    are properly indented to show nesting visually\r\n  - Block level elements have
    their own indentation level\r\n  - inline elements are included inline\r\n- Attributes\r\n
    \ - ids are all unique, valid identifiers\r\n  - Classes are applied to multiple
    elements successfully\r\n  - Boolean attributes are [syntactically correct](https://html.spec.whatwg.org/#boolean-attributes)\r\n
    \   - no “false” or “true values\r\n    - elements like checked are represented
    as `checked`\r\n  - Attribute names are all in lowercase, values are in lowercase\r\n-
    HTML Structure\r\n  - Has a valid doctype declaration\r\n  - has an `<html>` tag
    as it’s root element\r\n  - html tag has a head followed by a body\r\n  - head
    \r\n    - contains all metadata\r\n    - has a `<title>` tag\r\n  - body contains
    all visible elements\r\n  - tables contain appropriate opening and closing tags:`<table><th><tb><tr>`\r\n-
    `<img>` tags used to embed images\r\n- Anchor tags\r\n  - has tags that link to
    other places in the document\r\n  - has tags that link to other HTML resources\r\n-
    Validates markup with the [W3C HTML Validator](https://validator.w3.org/)\r\n\r\n\r\n\r\n##
    Legacy Objectives\r\n### HTML Syntax and Standards\r\n- Use XML syntax to create
    HTML Elements\r\n- Write the basic structure of an HTML document from scratch\r\n-
    Use block-level elements to arrange content in an HTML5 document\r\n- Use attributes
    with HTML elements\r\n- Use inline elements to style or create functionality within
    a block level element\r\n- Write comments in HTML\r\n- Write syntactically valid
    boolean attributes\r\n- Describe what the title element is used for (tab / window
    names, bookmarks, SEO)\r\n- Write folder and file names in lowercase with either
    dashes or underscores instead of spaces\r\n- Explain that attributes can appear
    in any order\r\n- Write self-closing tags without the trailing forward slash\r\n-
    Validate HTML with the W3C validator\r\n- Check links with the W3C link checker\r\n-
    Write properly indented and organized HTML\r\n- Use IDs in HTML\r\n- Allowing
    anchor tags to jump to the location on a page\r\n- Explain that ids should be
    avoided except for connecting labels or serving as anchors\r\n- Explain that ids
    must be unique, and should not start with numbers\r\n- Explain that classes do
    not have to be unique on the page\r\n- Write all tags, attributes, class names
    and ids in lowercase\r\n- Use Tags and Attributes to create HTML Elements\r\n-
    - Write valid HTML5 markup\r\n\r\nUse the XML syntax to write html elements\r\nCovers
    tags, XML trees, attributes, self-closing tags, doctype declaration\r\n\r\nCreate
    and HTML document that is syntactically valid and structurally valid.\r\nInclude
    doctype, html, head, title, and body.\r\n\r\n\r\nStudents should be able to use
    block level elements to lay out an HTML page. They should have a grasp of tags
    that appear in the body that affect the layout of the page- this includes `div`,
    `p`, `h1-5`, list tags like `ol` and `ul` and subordinate `li` tags. \r\n\r\nAdd
    an attribute to a tag, using `attribute_name=\"value\"`, or `boolean_attribute=true`
    \ \r\nName some common attributes, such as `id`, `class`, `alt`, `href`   \r\nLook
    up additional attributes using documentation like MDN  \r\nEnsure used attributes
    pass W3C validators  \r\n\r\nUse tags like `span`, `a`, or `img` to add features
    or style to your page.\r\n\r\nUse HTML tags and attributes to create elements
    that will be displayed on the page (or used as metadata, such as the title tag).\r\n\r\n###
    Link to external resources in HTML\r\n- Include external javascript files\r\n-
    Include inline javascript\r\n- Describe the benefits of including javascript files
    near the end of the body\r\n- Include external stylesheets\r\n- Include inline
    CSS\r\n- Render images\r\n- Correctly form relative paths (foo/bar and ../foo/bar)
    and rooted paths (/foo/bar)\r\n- Correctly include urls that can match the protocol
    by excluding “http” / “https”\r\n- Describe why rooted paths will not work when
    running sites with the `file://` protocol\r\n- Define and describe CDN\r\n- Explain
    how CDNs can improve page load times\r\n\r\nbecause browsers can parallelize the
    downlo\n\n## Assessments\r\n- [HTML Forms Exercise](https://github.com/gSchool/html-forms)\r\n-
    Create a form that collects a pizza order\r\n- Create a form that allows a user
    to create a new account\r\n- Create a form that takes feedback from a lightning
    talk\r\n- [LMS Week 4 Assessment (contains questions pertaining to forms)](https://coursework.galvanize.com/assessments/26)\r\n-
    [LMS HTML & Forms](https://coursework.galvanize.com/assessments/24)\r\n- [LMS
    HTML Forms Assessment](https://coursework.galvanize.com/assessments/74)\r\n- [GH
    HTML-Forms Exercise](https://github.com/gSchool/html-forms-sf)\r\n- [GH HTML Form
    Challenge exercise](https://github.com/gSchool/html-forms)\r\n- [GH HTML Tip Calculator
    Exercise](https://github.com/gSchool/tip-calculator-html-js)\r\n\r\n\r\nSome things
    to give more advanced students so you can give them a 4:  \r\n\r\n- Use a pattern
    for a type of validation that doesn’t exist as an input type\r\n- Write a blog
    post about something cool you haven’t seen used often in the HTML5 spec\r\n- Lead
    a review group with your classmates in order to help them make their pages more
    semantic"
- :uuid: 0c1be570-48b4-48a8-bc98-7da27a7be512
  :name: CSS
  :subject_uuid: 0c1be570-48b4-48a8-bc98-7da27a7be512
  :subject_name: CSS
  :description: "https://perishablepress.com/obsessive-css-code-formatting-organization-comments-and-signatures/\n\n\n\n-
    http://bitsofco.de/2015/how-z-index-works/\r\n- https://css-tricks.com/all-about-floats/\r\n-
    https://github.com/gSchool/css-floats-exercise\r\n- [CSS on MDN](https://developer.mozilla.org/en-US/docs/Web/CSS)\r\n\r\n\r\n\r\n##
    Legacy Objectives\r\n- Use CSS Properties to style HTML Elements\r\n- Describe
    what CSS stands for\r\n- Add style to HTML in three different ways. (Inline, External
    Style Sheet, Style Tag)\r\n- Explain why it is useful to separate CSS from HTML
    (external style sheet)\r\n- Write syntactically correct CSS blocks (key-value
    pairs, semi-colons etc…)\r\n- Write well-indented and organized CSS\r\n- Write
    comments in CSS\r\n- Define what rem, em, % and pixel units do\r\n- Describe appropriate
    uses for the various units\r\n- Describe the two box-sizing properties\r\n- Add
    multiple classes to an element\r\n- Correctly calculate the width and height of
    boxes with various box-sizing properties\r\n- Describe the box model including
    border, margin, padding, content\r\n- List and describe the characteristics of
    the different positions - absolute, static etc…\r\n- Use floats to position elements\r\n-
    List and describe the various display properties - none, block, inline-block etc…\r\n-
    Describe the difference between inline and block elements\r\n- Correctly identify
    which common HTML elements are inline, which are block\r\n- Position a ul with
    li’s horizontally\r\n- Write all common CSS properties\n\n- [Mastering Margin
    Collapsing](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing)\r\n-
    [Getting Started with CSS](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started)\r\n-
    [Box Model](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Boxes)\r\n-
    Check out [FlexBox!](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)
    (but watch out for [flexbugs](https://github.com/philipwalton/flexbugs) )\n\n-
    [Bootstrap](http://getbootstrap.com/)\r\n- [Foundation](http://foundation.zurb.com/)\r\n-
    http://heydonworks.com/a11y_rocks/\n\n[Can I use…?](http://caniuse.com/) for Browser
    Compatability"
  :instructor_notes: "## Assessments\r\n* Take a messy CSS file, and clean it up by
    grouping selectors and rules, eliminating defaults, ordering by function of selector,
    ensuring correct spacing\r\n* Take a CSS file that has IDs that should be classes,
    and other inappropriate uses of specificity and fix it.\r\n* [GH Gkit exercise
    (framework creation)](https://github.com/gSchool/gkit-review-css-by-creating-a-framework)\r\n\r\n##
    Other Notes\r\nSome notes on scoring them as a 4:\r\nChecks caniuse.com for browser
    compatability\r\n\n\n##Assessments\r\n- [LMS CSS Assessment](https://coursework.galvanize.com/assessments/3)\r\n-
    [GH CSS-Card-Flip Exercise](https://github.com/gSchool/css-card-flip)\r\n- [GH
    CSS-Exercises - 00Selectors](https://github.com/gSchool/css-exercises/tree/master/000-Selectors)\r\n-
    [CSS Diner](http://flukeout.github.io/) has great exercises for selector practice.
    But we definitely need an assessment that covers CSS selectors in more breadth.\r\n\r\n\r\n\r\nOld
    stuff...\r\n\r\n------\r\n\r\n- `body, html`\r\n- `[name=”foo”]`\r\n- `.foo.bar`\r\n-
    `.foo, .bar`\r\n- `.foo .bar`\r\n- `.foo > .bar`\r\n- such as hover, active using
    pseudo-selectors\r\n- `+`\r\n- that cascading means that parent styles can cascade
    down and more specific styles can override\r\n- that certain selectors are more
    specific than others, and that specificity affects which styles get applied\r\n-
    the state of an element in order to preview the CSS\r\n\r\n------------\r\n\r\n-
    HTML Forms - https://github.com/gSchool/html-forms (Learn the basics of forms
    by building them.)\r\n- HTML Basic - https://github.com/gSchool/basic-html (Exercise
    is to build some static HTML/CSS based on the mockups)\r\n- Invalid HTML - https://github.com/gSchool/invalid-html
    (Fix broken HTML by using w3's HTML validator)\r\n- Basic HTML Structure - https://github.com/gSchool/basic-html-structure
    (building a basic structure for an HTML5 web page/landing page)\r\n- Building
    a Grid System with CSS - https://github.com/gSchool/g11-course-curriculum/tree/master/week03/03_exercises/css-grid-system\r\n-
    CSS Grid - https://github.com/gSchool/css-grid (Exercise that required students
    to handroll a CSS grid system.)\r\n- CSS Exercises - https://github.com/gSchool/css-exercises
    (Write CSS that matches the expected design.)\r\n- CSS-Nav-Challenge - https://github.com/gSchool/css-nav-challenge
    (Build a navigation using Semantic Markup and dropdown menu)\r\n- Media Query
    - https://github.com/gSchool/media-query-css-exercise (Learn the basics of media
    query)\r\n- CSS-Floats - https://github.com/gSchool/css-floats-exercise (Learn
    how floats work)\r\n- The Mystery of the CSS Float Property - http://www.smashingmagazine.com/2009/10/19/the-mystery-of-css-float-property/
    (Resource - CSS Tricks/SMASHING)\r\n- Learn CSS Layout - http://learnlayout.com/
    (Resource)\r\n- CSS Floats 101 - http://alistapart.com/article/css-floats-101/
    (Resource - A List Apart --- CSS FLoat Property)\r\n- CSS Animations & JavaScript
    Events - https://github.com/gSchool/javascript-css-material-design (Intro to CSS
    animations - keyframes, JavaScript event listeners)\r\n- HTML/CSS Demo using Bourbon,
    Neat, and Bitters - https://github.com/gSchool/html_css_demo (a playground for
    students to exlpore how to integrate html/css into Rails)\r\n- CSS Assessment
    - Answers - https://github.com/gSchool/css-assessment-answers-week-1\r\n- Front
    end interview questions - https://github.com/kyle8285/Front-end-Developer-Interview-Questions\r\n-
    CSS Display and Positioning Cheat Sheet - https://github.com/gSchool/g11-course-curriculum/blob/master/week03/03_lectures/css-display-and-positioning.md\r\n-
    Front end Legos - https://vimeo.com/70115794\r\n- https://github.com/gSchool/g11-course-curriculum/tree/master/week03/03_exercises/css-positioning-primer\r\n-
    https://github.com/gSchool/selector-demo\r\n- https://github.com/gSchool/css-card-flip\r\n-
    https://github.com/gSchool/ui-feature-solutions\r\n- https://github.com/gSchool/css-exercises-solutions\r\n-
    https://github.com/gSchool/bootstrappy\r\n- https://github.com/gSchool/scss-mixin\r\n\r\n-
    https://github.com/gSchool/css-exercises\r\n- https://github.com/gSchool/css-floats-exercise\r\n-
    https://github.com/gSchool/css-grid\r\n- https://github.com/gSchool/css-grid-building\r\n-
    [CSS Diner](http://flukeout.github.io/)\r\n- [CSS Leveler](http://toolness.github.io/css-selector-game/)\n\n##
    Assessments\r\n- Given an HTML page and a Style Guide, style all of the text according
    to the style guide. Write up a few styleguides and have them all use the same
    HTML\r\n- [LMS Intro to CSS Assessment (g15 - coverage of selectors)](https://coursework.galvanize.com/assessments/57)\r\n-
    [GH html_css_basics](https://github.com/gSchool/html_css_basics)\r\n- [GH CSS
    Exercises](https://github.com/gSchool/css-exercises)\r\n- [GH basic-html (basic
    css styling)](https://github.com/gSchool/basic-html)\r\n\n\n## Assessments\r\n-
    Create a HYPERTEXT newspaper\r\n    - Create a front page that has a two column
    layout\r\n    - Create a few other pages with a three column layout, the right-hand
    side of which is sticky (has navigation)\r\n    - Add a sticky footer\r\n- Create
    a 2-column and 3-column layout\r\n- Create a 3 column layout with fixed side columns\r\n-
    [LMS CSS Assessment](https://coursework.galvanize.com/assessments/3)\r\n- [GH
    Building Grid CSS Exercise](https://github.com/gSchool/g11-course-curriculum/tree/master/week03/03_exercises/css-grid-system)\r\n-
    [GH CSS Exercises](https://github.com/gSchool/css-exercises)\r\n- [GH CSS Floats
    Exercise](https://github.com/gSchool/css-floats-exercise)\r\n- [GH CSS Layout
    Exercise](https://github.com/gSchool/g17-css-layout-exercises)\r\n- [GH Gkit exercise
    (framework creation)](https://github.com/gSchool/gkit-review-css-by-creating-a-framework)\n\n##
    Assessments\r\n- Produce a layout given a mockup\r\n  - 2 column layout\r\n  -
    3 column layout\r\n  - 2 column layout with 3-column nested in second column (shopify-style)\r\n-
    Make a form that contains many form controls, use framework features to make it
    nice-looking and keyboard navigable\r\n- Customize the colors, style, and some
    layout properties on top of a framework\r\n  - Does not use framework’s class
    names\r\n- [Bootstrap Exercise](http://www.pairuptocode.com/exercises/bootstrap.html)\r\n-
    [GH CSS Grid Building Exercise](https://github.com/gSchool/css-grid-building)\r\n-
    [GH JS Material Design Exercise](https://github.com/gSchool/javascript-css-material-design)\r\n-
    [GH CSS Navigation Challenge](https://github.com/gSchool/css-nav-challenge)\r\n-
    [GH CSS-Layout-Exercise](https://github.com/gSchool/g17-css-layout-exercises)\r\n-
    [GH Gkit exercise (framework creation)](https://github.com/gSchool/gkit-review-css-by-creating-a-framework)\r\n-
    [GH basic-html (basic css styling)](https://github.com/gSchool/basic-html)\r\nA
    UX intro may be valuable here, depending on time and class interest\r\n\r\n##
    Legacy Objectives\r\n- Explain what CSS frameworks are and why they’re useful\r\n-
    List and describe at least 3 modern, common css frameworks\r\n- Install a css
    framework 2 ways: CDN, and copying code locally to the project without a package
    manager\r\n- Describe how CSS frameworks work\r\n- Describe the difference between
    reset.css and normalize.css and list the pros and cons of each\r\n- Style a web
    page using Bootstrap\r\n- Style a web page using a framework other than Bootstrap\r\n-
    Use good design practices to create a user-friendly and accessible page\r\n\r\nthat
    CSS frameworks provide pre-defined classes and selectors, and that you must write
    markup that matches the framework’s expectations\r\n\n\n## Assessments\r\n- Write
    a UI that has a mobile version and a desktop version on the same page\r\n- Make
    a layout with Flexbox instead of a framework\r\n- Write your own web component\r\n-
    [GH Media Queries & Responsive Design Exercise](https://github.com/gSchool/media-query-css-exercise)\r\n-
    [GH CSS-Exercises - Responsive Blog](https://github.com/gSchool/css-exercises/tree/master/015-rwd)\r\n[GH
    JS-CSS-Material Design](https://github.com/gSchool/javascript-css-material-design)"
- :uuid: 3f805b07-096d-4024-bce2-20b19f92199a
  :name: Version Control (Git and Github)
  :subject_uuid: 3f805b07-096d-4024-bce2-20b19f92199a
  :subject_name: Version Control (Git and Github)
  :description: "- http://www.amazon.com/Git-Pocket-Guide-Richard-Silverman/dp/1449325866\r\n-
    Git Workshop - https://github.com/gSchool/git-workshop (Git and Github basics.)\r\n-
    Git Intro Lecture - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/git/git-intro.instructor.md
    (Intro Lecture)\r\n- Git Basics Lecture - https://github.com/gSchool/basic-git\r\n-
    Try Git - https://try.github.io/levels/1/challenges/1 (Interactive Git Tutorial)\r\n-
    Git Book - http://git-scm.com/book/en/v2\r\n- GitHug - https://github.com/gazler/githug
    (CL based git challenges/exercises/game)\r\n- Group Workflow with Git - https://github.com/gSchool/group-workflow-with-github\r\n-
    Fork-Clone-Branch-PullReqest - https://github.com/gSchool/fullstack-curriculum/blob/master/legacy/git-fork-clone-branch-submit-pull-request.md\r\n-
    Branching Intro Lecture - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/git/branching-intro.instructor.md\r\n-
    Learn Git Branching - http://pcottle.github.io/learnGitBranching/ (Interactive
    Branching Tutorial)\r\n- Git Rocks - http://git.rocks/getting-started/\r\n- https://github.com/gSchool/git_basics_quiz\r\n-
    https://github.com/gSchool/fork-push-pull-exercise\r\n- https://github.com/gSchool/branching-assignment\r\n-
    https://github.com/gSchool/git-warmup\r\n- https://github.com/gSchool/branching_and_merging_lab\r\n-
    https://github.com/gSchool/6002-project-1\r\n- https://github.com/gSchool/what-is-vcs-lesson\r\n-
    https://github.com/gSchool/git-add-commit-assessment\r\n- [Try Git](https://try.github.io)\r\n-
    [Learn Git Branching](http://pcottle.github.io/learnGitBranching/)\n\n- https://github.com/gSchool/pull-requests-exercise\r\n-
    https://github.com/gSchool/git-branch-collab\n\n# Objectives\r\n\r\n- Create a
    remote repo on github\r\n- Add a remote repo using ‘git remote add’\r\n- Push
    code to github\r\n- Pull changes from github"
  :instructor_notes: "##Assessments\r\n\r\n- [LMS Git Basics (Terminal)](https://coursework.galvanize.com/assessments/6)\r\n-
    [LMS Git Basics (g15 version - 2 questions on VCS)](https://coursework.galvanize.com/assessments/54)\r\n-
    [LMS Haiku Conflicts Exercise](https://github.com/gSchool/haikuConflicts)\n\n###Assessments\r\n-
    [LMS Week 1 Assessment (Small Section on Git Basics)](https://coursework.galvanize.com/assessments/83)\r\n-
    [LMS Git Basics (g15 version - covers basic git commands)](https://coursework.galvanize.com/assessments/54)\r\n-
    [GH git-add-commit-assessment](https://github.com/gSchool/git-add-commit-assessment)\n\n###Assessments\r\n-
    [HTML | Git | GitHub - Level 1 (Covers Branching & PRs](https://coursework.galvanize.com/assessments/72)\r\n-
    [LMS Haiku Conflicts](https://github.com/gSchool/haikuConflicts)\r\n- [LMS Git
    Warmups Exercise (Git Diagrams)](https://github.com/gSchool/git-warmup)\r\n- [GH
    Git Workshop Exercises (Can be edited to test skills)](https://github.com/gSchool/git-workshop)\r\n\n\n##Assessments\r\n[GH
    Git-Add-Commit-Assessment](https://github.com/gSchool/git-add-commit-assessment)\n\nDescribe
    difference between clone and fork based workflows.  It’s about trust - whether
    devs should have access to actual repo"
- :uuid: ac805334-f3dd-4288-9a61-0dcef3e219d4
  :name: Programming with Javascript
  :subject_uuid: ac805334-f3dd-4288-9a61-0dcef3e219d4
  :subject_name: Programming with Javascript
  :description: ''
  :instructor_notes: "**Notes:** Students should display the ability to think like
    a computer- they need to understand the order in which an interpreter looks at
    each statement and be able to accurately mentally evaluate those statements. \r\n\r\n##
    Assessments\r\n\r\n- Evaluate the following statement, expression by expression.
    What does result evaluate to?\r\n    - `var result = (true && false) || (true
    && true || false) && (false || false)`\r\n- Write a statement that evaluates to
    `true` if a phone number is valid\r\n- Write a statement that evaluates to `true`
    if a string is not empty\r\n- String and numbers\r\n- Concatenate two strings
    that contain (only) numbers\r\n- Subtract two strings that contain (only) numbers\r\n-
    https://github.com/gSchool/javascript-variables-beginner\r\n- [LMS Javascript
    Variables Assessment](https://coursework.galvanize.com/assessments/23)\r\n- [LMS
    JS Fundamentals - Evaluation of Expressions](https://coursework.galvanize.com/assessments/2)\r\n-
    [LMS Eloquent JS Assessment](https://coursework.galvanize.com/assessments/18)\r\n-
    [LMS Week 1 Assessment (Small Section on JS values & local vs. global scope)](https://coursework.galvanize.com/assessments/83)\r\n-
    [LMS JavaScript: types, variables, control flow, operators](https://coursework.galvanize.com/assessments/58)\r\n-
    [LMS JS Variables](https://coursework.galvanize.com/assessments/29)\r\n- [GH Intro
    JS Values Exercise](https://github.com/gSchool/javascript-variables)\r\n- [GH
    JS Variable Beginner Exercise](https://github.com/gSchool/javascript-variables-beginner)\r\n-
    [GH Basic JS pt 2 - Exercise (Lots of Eloquent JS problems)](https://github.com/gSchool/basic-js-part-2)\r\n-
    [GH Basic JS pt 1](https://github.com/gSchool/basic-js)\r\n\r\n\r\n## Resources\r\n\r\n-
    [JS Execution Visualizer](http://www.pythontutor.com/javascript.html#mode=display)\r\n-
    [Intro to Javascript Part 1](https://vimeo.com/141864271)\r\n- [Variables and
    Expressions](https://vimeo.com/142087926)\r\n- \r\n\r\n## Resources\r\n\r\n- https://github.com/gSchool/underscore_lab\r\n-
    [JavaScript is Weird...And AWESOME](http://www.youtube.com/playlist?list=PLoYCgNOIyGABI011EYc-avPOsk1YsMUe_)\r\n-
    [Udacity Object Oriented Javascript Course](https://www.udacity.com/course/object-oriented-javascript--ud015)\r\n-
    [The Definitive Guide to Object-Oriented JavaScript](https://www.youtube.com/watch?v=PMfcsYzj-9M)\r\n-
    [You Don't Know JS](https://github.com/getify/You-Dont-Know-JS)\r\n- [JS the Right
    Way](http://jstherightway.org/)\r\n- [JS for Cats](http://jsforcats.com/)\r\n-
    [Human Javascript](http://humanjavascript.com/)\r\n- [Single Page App Book](http://singlepageappbook.com/)\r\n-
    [You Can't JavaScript Under Pressure](http://games.usvsth3m.com/javascript-under-pressure/)\r\n-
    [StackOverflow's List of Resources](http://stackoverflow.com/tags/javascript/info)\r\n-
    [Free JavaScript Books](http://jsbooks.revolunet.com/)\r\n- [10 Articles every
    programmer must read](http://www.javacodegeeks.com/2014/05/10-articles-every-programmer-must-read.html)\r\n-
    [Code Tuts by Yield](http://nodetuts.com/)\r\n- [Learn all the Nodes](http://www.learnallthenodes.com/)\r\n-
    [Sails Cast](http://irlnathan.github.io/sailscasts/blog/archives/)\r\n- [Nodeguide
    Beginner](http://nodeguide.com/beginner.html)\r\n- https://github.com/gSchool/async-event-problem-solving-game-a-forest-trail\n\n##
    Assessments\r\n\r\n- https://github.com/gSchool/grading-js\r\n- “Whether something
    goes in the loop or out the loop” etc...\r\n- https://github.com/gSchool/js-arrays-objects-assessment\r\n-
    \"Loop over datastructures and returning the right value\"\r\n- https://github.com/gSchool/iteration-and-object-assessment\r\n-
    \"Manipulating array data, has tests.\"\r\n- https://github.com/gSchool/js-accumulator-assessment\r\n-
    \"Accumulator Pattern assessment with Test\"\r\n- [LMS JavaScript: types, variables,
    control flow, operators](https://coursework.galvanize.com/assessments/58)\r\n-
    [GH testing_basics_assessment (functions/array iteration)](https://github.com/gSchool/testing_basics_assessment)\r\n-
    [GH JS-Iteration Exercise](https://github.com/gSchool/js-iteration)\r\n- [GH JS-Loops
    (BASIC LOOPS and LOGGING)](https://github.com/gSchool/javascript-loops)\r\n- [GH
    JS-Conditional-and-Loop-Fundamentals (HAS TEST)](https://github.com/gSchool/js-conditional-and-loop-fundamentals)\r\n-
    [GH Loops-Workshop](https://github.com/gSchool/loops-workshop)\r\n- [GH Crush
    Code Fridays - Data Structures (Challenging)](https://github.com/gSchool/ccf-data-structures)\r\n-
    [GH Simple Object Access Exercise](https://github.com/gSchool/simple-object-access-exercises/blob/master/object_array_access.md)\r\n-
    [LMS JS-Conditional](https://github.com/gSchool/javascript-conditionals)\r\n-
    [LMS JS Functions - Part 3](https://github.com/gSchool/g11-course-curriculum/tree/master/week04/04_exercises/js-functions-part3)\r\n\r\n##
    Resources\r\n\r\n- http://archive.oreilly.com/pub/a/server-administration/excerpts/even-faster-websites/writing-efficient-javascript.html#fast_loops\r\n-
    (Fast Conditionals)[http://archive.oreilly.com/pub/a/server-administration/excerpts/even-faster-websites/writing-efficient-javascript.html#fast_conditionals]\r\n\n\n##
    Assessments\r\n\r\nGive them an implemented algorithm and ask what the resulting
    data structure is\r\nExample:\r\n\r\n- give an algorithm that indexes an array
    of object\r\n- give an algorithm that counts the number of occurrences\r\n\r\nGive
    students fun problems like:\r\n\r\n```\r\nvar obj = {}\r\nvar other = {}\r\nobj.foo
    = other\r\nother.bar = “hello”\r\n// what is obj.foo.bar?\r\n```\r\n\r\n**Resources:**\r\n\r\n-
    http://www.pythontutor.com/javascript.html#mode=edit\n\n###Assessments\r\n- [LMS
    JavaScript: arrays, objects](https://coursework.galvanize.com/assessments/59)\r\n-
    [LMS Strings, Arrays, Variables - Basic](https://coursework.galvanize.com/assessments/75)\r\n-
    [GH Simple Object Access Exercise](https://github.com/gSchool/simple-object-access-exercises/blob/master/object_array_access.md)\r\n-
    [GH Functions & Objects Exercise (Passing Objects as arguments and accessing values)](https://github.com/gSchool/functions-objects-js-homework)\r\n-
    [GH Amusement Parks Exercise (Accessing Objects and Arrays and manipulating the
    data - HAS TEST)](https://github.com/gSchool/amusement-parks-objects-arrays-js/blob/master/spec/amusement_parks_spec.js)\r\n-
    [GH JS-Accumulator Assessment - HAS TEST](https://github.com/gSchool/js-accumulator-assessment/tree/master/spec)\r\n-
    [GH JS-Objects-Arrays-Warmup](https://github.com/gSchool/js-objects-arrays-warmup)\r\n-
    [GH JS-Arrays-Objects-Assessment](https://github.com/gSchool/js-arrays-objects-assessment)\r\n-
    [GH CCF-Data Structures](https://github.com/gSchool/ccf-data-structures)\n\n##
    Assessments\r\n\r\n- https://github.com/gSchool/simple-object-access-exercises\r\n-
    https://github.com/gSchool/ccf-data-structures\r\n- Model a list of books with
    author and publisher data\r\n- Model a list of students with classes\r\n- Model
    a list of sports teams with players, and stats about the players\r\n- Given an
    API response, parse the JSON and display it\r\n- Suggested APIs\r\n    - Reddit\r\n
    \   - OMDB\r\n    - iTunes\r\n    - giffy\r\n    - github\r\n\r\n## Notes\r\n\r\nCome
    up with a bank of these, and every time we introduce a new one (HTML, javascript
    objects, javascript constructors, ERD)\r\n\r\n## Resources\r\n\r\n- [JS Execution
    Visualizer](http://www.pythontutor.com/javascript.html#mode=display)\r\n\n\n##
    Assessments\r\n\r\n- https://github.com/gSchool/js-functions-part1\r\n- http://eloquentjavascript.net/1st_edition/chapter6.html
    \r\n- Write simple functions given the function signature and a behavioral description\r\n-
    Write simple functions to solve a problem without the function signature\r\n-
    Write recursive functions\r\n- [LMS Function Declarations and Expressions](https://coursework.galvanize.com/assessments/30)\r\n-
    [GH Function-Assessment-JS](https://github.com/gSchool/function-assessment-js)\r\n-
    [LMS Week 1 Assessment (Small Section on JS functions)](https://coursework.galvanize.com/assessments/83)\r\n-
    [LMS Javascript Functions](https://coursework.galvanize.com/assessments/61)\r\n-
    [GH testing_basics_assessment (functions/array iteration)](https://github.com/gSchool/testing_basics_assessment)\r\n\r\n##
    Resources\r\n\r\n- https://vimeo.com/134061121 - Javascript Call Stack\r\n\r\n##
    Notes\r\n\r\nThe “call stack” success criteria is intended to help students understand
    recursion, diagnose “call stack exceeded” messages, and to help them visualize
    the function lifecycle (aka, when does a context open up, when does it close and
    deallocate memory)\r\n\n\n###Assessments\r\n- [GH Error Handling in  Node ](https://github.com/gSchool/error-handling-in-node-express-promises)
    (*Note* Assessment could be used in multiple standards)"
- :uuid: bcfe422a-cd35-4fd1-8ff8-6b078c476069
  :name: Javascript and the Browser
  :subject_uuid: bcfe422a-cd35-4fd1-8ff8-6b078c476069
  :subject_name: Javascript and the Browser
  :description: "[GH Event-Exercises - INTRO to Events & the DOM](https://github.com/gSchool/event-exercises)"
  :instructor_notes: "##Assessments\r\n\r\n- [HTML Builder Assessment w/ test](https://github.com/gSchool/programming-fundamentals-assessments/tree/master/js/html-builder)\r\n-
    [Written Dom Assessment - Vocabulary](https://github.com/gSchool/js-assessment-dom-vocabulary)\r\n-
    [LMS JQuery Assessment](https://coursework.galvanize.com/assessments/16)\r\n-
    [LMS Week 4 Assessment (contains questions pertaining to jquery selectors)](https://coursework.galvanize.com/assessments/26)\r\n-
    [LMS JS/DOM Assessment](https://coursework.galvanize.com/assessments/36)\r\n-
    [LMS Intro to the DOM](https://coursework.galvanize.com/assessments/65)\r\n- [LMS
    JS-Deck-of-Cards - Exercise](https://github.com/gSchool/g11-course-curriculum/tree/master/week03/03_exercises/js-deck-of-cards)\r\n-
    [GH DOM-query-function (exercise using jquery)](https://github.com/gSchool/dom-query-function)\r\n-
    [GH getElementById_dfs_and_bfs Exercise](https://github.com/gSchool/getElementById_dfs_and_bfs)\r\n\r\nWrite
    a function that takes a configuration object and from that, return an HTML Element
    with children that expresses the configuration object\r\n\r\n- https://github.com/gSchool/DOM_Intro_Exercise\r\n-
    https://github.com/gSchool/air-travel-calculator\r\n- https://github.com/gSchool/simple-todo-list\r\n-
    https://github.com/gSchool/tip-calculator-html-js\r\n- https://github.com/gSchool/memory-game-lab\r\n-
    https://github.com/gSchool/walking-man-exercise\r\n- https://github.com/gSchool/student-apis\r\n-
    https://github.com/gSchool/jquery-demo\r\n- https://github.com/gSchool/basic-http\r\n-
    https://github.com/gSchool/led-light-js\r\n- https://github.com/gSchool/data-structures-js\r\n-
    https://github.com/gSchool/grading-js\r\n- https://github.com/gSchool/jQuery-selector-practice\r\n-
    https://github.com/gSchool/todo-js\r\n- https://github.com/gSchool/taskly\r\n-
    https://github.com/gSchool/audio-player\r\n- https://github.com/gSchool/javascript-variables\r\n-
    https://github.com/gSchool/jquery-exercises-solutions\r\n- https://github.com/gSchool/js-music-player\r\n-
    https://github.com/gSchool/single-page-omdb\r\n- https://github.com/gSchool/memory-refactor\r\n-
    https://github.com/gSchool/javascript-core\r\n- https://github.com/gSchool/react-workshop\r\n-
    https://github.com/gSchool/javascript-variables-beginner\r\n- https://github.com/gSchool/style-with-javascript\r\n-
    https://github.com/gSchool/js-arrays-objects-assessment\r\n- https://github.com/gSchool/inbox-solutions\r\n-
    https://github.com/gSchool/tip-calc-js\r\n- https://github.com/gSchool/pizza-shop-form-competition\r\n-
    https://github.com/gSchool/todo_oop_js\r\n- https://github.com/gSchool/js-assessment-dom-vocabulary\r\n-
    https://github.com/gSchool/dom-query-function\r\n- https://github.com/gSchool/js-logic-dom-review\r\n-
    https://github.com/gSchool/js-assessment\r\n- https://github.com/gSchool/express-pg-bookshelf-fabrics\r\n-
    https://github.com/gSchool/node-form-post-example\r\n- https://github.com/gSchool/javascript-browser-basics\r\n-
    https://github.com/gSchool/javascript-conditionals\r\n- https://github.com/gSchool/javascript-loops\r\n-
    https://github.com/gSchool/g11-lectures\r\n- https://github.com/gSchool/create-chunks\r\n-
    https://github.com/gSchool/generator-galvanize-html\r\n- https://github.com/gSchool/js-shuffle-dom\r\n-
    https://github.com/gSchool/g11-js-cheat-sheet\r\n- https://github.com/gSchool/g11-solutions\r\n-
    https://github.com/gSchool/async-event-problem-solving-game-a-forest-trail\r\n-
    XHR Refactor Axious Lib - https://github.com/gSchool/xhr-axios (Async, promises,
    ajax, express api)\r\n- XHR - https://github.com/gSchool/xhr (Ajax, xhr, express
    api)\r\n- Chrome Discover Dev Tools - http://discover-devtools.codeschool.com/
    (DOM, Chrome Console, Debugging)\r\n- Reddit API JS - https://github.com/gSchool/reddit-api-js
    (Ajax, xhr, reddit api, DOM, events)\r\n- jQuery/Rails To Do List - https://github.com/gSchool/jquery-rails-to-do-list
    (Ajax, DOM)\r\n- jQuery UI To Do List - https://github.com/gSchool/jquery-ui-ajax-to-do-list
    (Ajax, DOM)\r\n- Javascript Sound Board - https://github.com/gSchool/js-audio-layering
    (setTimeout, HTML5 Audio, events)\r\n- Cabin Filtering App - https://github.com/gSchool/jquery-image-filtering
    (Filter DOM elements)\r\n- What is the Dom? - https://css-tricks.com/dom/\r\n-
    JavaScript and the DOM - a primer - https://github.com/gSchool/g11-course-curriculum/tree/master/week03/03_exercises/js-dom-basics\r\n-
    jQuery with Madlibs - https://github.com/mjhea0/jquery-madlibs (A Michael Herman
    original)\r\n- JavaScript Page Analytics - https://github.com/gSchool/g11-course-curriculum/tree/master/week04/04_exercises/js-page-analytics
    (Hard stretch goal for learning jQuery)\r\n- jQuery Intro - https://github.com/gSchool/g11-course-curriculum/tree/master/week04/04_lectures/jquery-intro
    (lecture, code along)\r\n- jQuery event delegation - https://github.com/gSchool/g11-course-curriculum/tree/master/week04/04_exercises/js-event-delegation\r\n-
    DOM Event Bubbling - https://github.com/gSchool/g11-course-curriculum/blob/master/week04/04_lectures/jquery-intermediate/04_bubbling.md\r\n\r\n-
    https://github.com/gSchool/itunes_song_guessing_game\r\n- https://github.com/gSchool/jQuery-Practice\r\n-
    https://github.com/gSchool/jquery-calculator\r\n- https://github.com/gSchool/jquery-image-filtering\r\n-
    https://github.com/gSchool/jquery-practice-01\r\n- https://github.com/gSchool/jquery-rails-to-do-list\r\n-
    https://github.com/gSchool/jquery-ui-ajax-to-do-list\r\n- https://github.com/gSchool/checkerboard-exercise\n\n###
    Assessments\r\n- [GH Tip-Calculator-HTML-js Exercise](https://github.com/gSchool/tip-calculator-html-js)\r\n-
    [GH Boxes-jQuery-Playground Exercise](https://github.com/gSchool/boxes-jQuery-playground)\r\n-
    [GH Stoplight-Event-Exercise](https://github.com/gSchool/stoplight-event-exercise)\r\n-
    [GH Async Forest Trail Game - Exercise](https://github.com/gSchool/async-event-problem-solving-game-a-forest-trail)\r\n-
    [GH HTML5 Music Player Exercise](https://github.com/gSchool/audio-player)\r\n-
    [GH jQuery-Practice](https://github.com/gSchool/jQuery-Practice)\r\n- [GH Pixel-Art-Maker](https://github.com/gSchool/pixel-art-maker)\r\n-
    No exercises/assessments expressly working with bubbling and caputuring\r\n\r\n\r\n\r\n\r\n-
    Create click event listeners that respond by evaluating a form\r\n- Create a DOM
    node inside of a function, bind an event listener to it, and then return the DOM
    node and attach it to the DOM, and have the event listener respond by modifying
    the correct node.\r\n- https://github.com/gSchool/event-exercises\r\n- https://github.com/gSchool/pixel-art-maker\r\n-
    https://github.com/gSchool/async-event-problem-solving-game-a-forest-trail\r\n-
    [LMS Week 4 Assessment (contains questions pertaining handling events with jquery)](https://coursework.galvanize.com/assessments/26)\n\n###Assessments\r\n-
    [GH html-forms-sf](https://github.com/gSchool/html-forms-sf)\r\n- [GH Pizza Form](https://github.com/gSchool/pizza-shop-form-competition)\r\n-
    [GH Tip Calculator](https://github.com/gSchool/tip-calculator-html-js) \r\n- No
    explicit exercise using jQuery to access form data\r\n\r\nhttps://github.com/gSchool/form_validation/blob/master/README.md\n\n##Assessments\r\n-
    [LMS Local Storage](https://coursework.galvanize.com/assessments/71)\r\n- [GH
    localstorage-exercises](https://github.com/gSchool/localstorage-exercises)"
- :uuid: 5ddfa4d5-6194-466b-97aa-f9610b77c493
  :name: JavaScript Object Model
  :subject_uuid: 5ddfa4d5-6194-466b-97aa-f9610b77c493
  :subject_name: JavaScript Object Model
  :description: "- https://github.com/gSchool/shapes_javascript_inheritance\r\n- http://jhusain.github.io/learnrx/\r\n-
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\r\n-
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\r\n-
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"
  :instructor_notes: "## Assessments\r\n\r\n- https://github.com/gSchool/shapes_javascript_inheritance\r\n-
    https://github.com/gSchool/js-polymorphism-guitar-store\r\n-[LMS Anatomy of a
    Class (Ruby)](https://coursework.galvanize.com/assessments/9)\r\n- https://github.com/gSchool/programming-fundamentals-assessments\n\n##
    Assessments\r\n\r\n- https://github.com/gSchool/js-encapsulation\r\n- https://github.com/gSchool/programming-fundamentals-assessments/tree/master/js\r\n\n\n##
    Assessments\r\n\r\n- Write functions stored as values of properties\r\n- Write
    functions that are stored on the prototype\r\n- Write closures that hide private
    class data\r\n- Explain why we store methods on the prototype object\r\n- https://github.com/gSchool/js-encapsulation\r\n-
    https://github.com/gSchool/programming-fundamentals-assessments\r\n\n\n## Assessments\r\n-
    [LMS Calling JS Functions (call & apply `this`)](https://coursework.galvanize.com/assessments/4)\r\n-
    [LMS js-methods-this-constructors exercises](https://github.com/gSchool/g11-course-curriculum/tree/master/week05/05_exercises/js-methods-this-constructors)\r\n-
    Use setTimeout and .bind() to create methods that execute after a set period of
    time\r\n- use .call() to call the constructor from a more general class\r\n- https://github.com/gSchool/programming-fundamentals-assessments"
- :uuid: 7fb11472-3246-479d-a864-ede3e22c248f
  :name: Consuming Web APIs
  :subject_uuid: 7fb11472-3246-479d-a864-ede3e22c248f
  :subject_name: Consuming Web APIs
  :description: ''
  :instructor_notes: "###Assessments\r\n- [LMS AJAX, API, XHR, JSON Assessment (Basic
    knowledge questions)](https://coursework.galvanize.com/assessments/62)\r\n\r\nhttps://github.com/gSchool/g11-course-curriculum/tree/master/week06/06_lectures/js-ajax-apis"
- :uuid: 793b8c6a-a19d-4049-8183-9d454bf55028
  :name: Thinking Like a Developer
  :subject_uuid: 793b8c6a-a19d-4049-8183-9d454bf55028
  :subject_name: Thinking Like a Developer
  :description: ''
  :instructor_notes: "Assessments:\r\n\r\nGiven a style guide and some code, determine
    what’s wrong and give feedback.\r\n\n\n##Assessments\r\n[LMS Clean Code Assessment](https://coursework.galvanize.com/assessments/67)\r\n[LMS
    JS-Debugging & The DOM](https://coursework.galvanize.com/assessments/34)\n\n\n\n-
    Doesn’t bully in code / commits\r\n- Doesn’t tell other that their code is shit\r\n-
    Doesn’t get too animated"
- :uuid: 2dc0600d-e1f3-48ff-b241-199ce36fbe3f
  :name: Functional Programming with Javascript
  :subject_uuid: 2dc0600d-e1f3-48ff-b241-199ce36fbe3f
  :subject_name: Functional Programming with Javascript
  :description: |-
    Demonstrate how higher order functions work and explain why they’re useful.



    - https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch1.html
  :instructor_notes: "## Assessments\r\n\r\n- https://github.com/timoxley/functional-javascript-workshop\r\n-
    https://github.com/gSchool/js-hof-filter-map-reduce\r\n- https://github.com/gSchool/lodash\r\n\r\n##
    Resources\r\n\r\n- https://www.youtube.com/watch?v=BMUiFMZr7vk&list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84\r\n-
    http://code.tutsplus.com/tutorials/what-they-didnt-tell-you-about-es5s-array-extras--net-28263\r\n\n\n##
    Assessments\r\n\r\n- https://github.com/gSchool/javascript_timers_callbacks_exercise\r\n-
    https://github.com/gSchool/asynchronous-js-nested-callbacks\r\n- [LMS - JavaScript
    Scope, Hoisting, Closures, and Higher Order Functions](https://coursework.galvanize.com/assessments/78)\r\n\r\n##
    Resources\r\n\r\n- http://eloquentjavascript.net/1st_edition/chapter6.html\r\n-
    https://www.youtube.com/watch?v=k7-N8R0-KY4"
- :uuid: f1a3c137-21bd-4902-a745-44d5ba8f992a
  :name: Design
  :subject_uuid: f1a3c137-21bd-4902-a745-44d5ba8f992a
  :subject_name: Design
  :description: ''
  :instructor_notes: "## Resources\r\n\r\n* https://frontify.com/styleguide they should
    look like this\r\n* [Example Style Guide](https://brand.frontify.com/d/qAiubNBytHKf/style-guide)\r\n*
    http://www.colourlovers.com/ have not terrible colors\r\n* https://color.adobe.com/\r\n\n\nAssessments\r\n\r\n-
    When students submit a project, they have to include their design artifacts, including
    their content inventory.\r\n\r\nSequencing Notes:\r\n\r\n- Do this early?\r\n-
    Enumerate content elements in README / somewhere in the Q1 project\r\n\n\n\n\nResources\r\n\r\n-
    http://www.slideshare.net/intelleto/ux-lisbon2014-designingleanuxhandouts\r\n\r\nNotes\r\n\r\n-
    We’re trying to teach rapid prototyping here. It’s okay if their minimum testable
    artifact is a powerpoint presentation or some sketches. It doesn’t have to be
    a working application.\r\n\r\nAssessment\r\n\r\n- Single writeup that asks questions
    about process\r\n- A series of wireframes / v1, v2, v3 etc..."
- :uuid: 1762e39b-4a3e-433a-ac68-c815f3ea067b
  :name: How the Web Works
  :subject_uuid: 1762e39b-4a3e-433a-ac68-c815f3ea067b
  :subject_name: How the Web Works
  :description: "- How Does the Web Work - http://www.theodinproject.com/web-development-101/how-does-the-web-work
    (A lesson that includes multiple resources explaining how the web works.)\r\n\r\n*
    Sequence Diagramming Language: http://knsv.github.io/mermaid/#sequence-diagrams"
  :instructor_notes: "## Assessments\r\n\r\n* [LMS HTTP Request & Response](https://coursework.galvanize.com/assessments/89)\r\n*
    Show the student a request and response in the network tab in Chrome Dev Tools
    and ask them to identify various parts of it.\n\n###Assessments\r\n- Match a set
    of headers to the appropriate response\r\n- Multiple choice / fill in blank \r\n-
    [LMS HTTP Assessment (Verbs, Status Codes, Headers)](https://coursework.galvanize.com/assessments/81)\r\n\r\nTeacher
    Notes:\r\nHTTP Status Cats forevah\r\n\n\n## Assessment\r\n\r\n* https://coursework.galvanize.com/assessments/88\n\n##
    Assessments\r\n\r\n- [LMS Common Protocols Assessment](https://coursework.galvanize.com/assessments/63)\r\n\r\nOther
    protocols to mention \r\n\r\n* HTTP2\r\n* DNS\r\n* UDP,TCP,IP\n\n# Assessments\r\n\r\nAnswer
    questions such as: \r\n\r\n- what are sockets?\r\n- when might you want to use
    sockets? \r\n- what are the advantages of sockets?\r\n- What’s the difference
    between sockets and HTTP?\r\n- What are some common socket libraries / products?
    \ Socket.io / Pusher / Firebase\r\n\r\nVocab\r\n\r\n- Realtime web\r\n- Server-side
    push\r\n- Polling\r\n- Persistent connection\r\n- Analogies like “phone call”
    vs “email”\r\n- Stateful protocol\r\n\r\nNotes:\r\n\r\nWe don’t have to hold them
    to the standard of building sockets themselves.  This is the horizontal part of
    the T-shaped individual.\r\n\r\nStudents can/will choose to use Sockets in their
    capstone, group projects\r\n\r\nDescribe how socket.io (as an example of a socket
    library) works: pub/sub - emitting / listening to events\r\n\n\n- Have students
    draw sequence diagrams with clients and servers on whiteboards\r\n\r\n## Assessments\r\n\r\nFor
    these assessments, use either the [Mermaid](http://knsv.github.io/mermaid/#sequence-diagrams)
    markup language or a whiteboard.\r\n\r\n* Do a sequence diagram for a server-side
    templated express server with postgres that:\r\n  * `HTTP GET /students`\r\n  *
    `HTTP GET /students/new` followed by `HTTP POST /students` followed by a redirect
    to `HTTP GET /students/:id`"
- :uuid: d465e693-2e94-43a2-b99e-bb7283161bc2
  :name: Server Side JS with Node
  :subject_uuid: d465e693-2e94-43a2-b99e-bb7283161bc2
  :subject_name: Server Side JS with Node
  :description: https://github.com/gSchool/module.exports
  :instructor_notes: "##Assessments\r\n- [GH Node-JS-Routes-Assessment ](https://github.com/gSchool/node-js-routes-assessment/blob/master/readme.md)\r\n-
    [GH JS-npm-Assessment (installing modules)](https://github.com/gSchool/js-npm-assessment)\r\n-
    [LM NPM Assessment](https://coursework.galvanize.com/assessments/83)\r\n\n\n##Assessments\r\n[GH
    Rails Debugging](https://github.com/gSchool/rails-assessment-debugging)\n\n##Assessments\r\n[LMS
    Intro to Node Assessment](https://coursework.galvanize.com/assessments/79)\r\n\r\n[LMS
    Node HTTP Server](https://coursework.galvanize.com/assessments/80)\r\n\r\n[GH
    Node-HTTP-File-Assessment](https://github.com/gSchool/node-http-file-assessment)\r\n\r\n[GH
    Node-js-routes-Assessment](https://github.com/gSchool/node-js-routes-assessment)\r\n\r\nObjectives\r\n\r\n-
    `path`\r\n- `query strings`\r\n- Write a CLI\r\n\n\n##Assessments\r\n[GH Node
    Basics (Event Emitters)](https://github.com/gSchool/node-basics-assessment)"
- :uuid: bb388526-c903-45a9-afbf-e6dff6f501d1
  :name: Server Side Frameworks with Express
  :subject_uuid: bb388526-c903-45a9-afbf-e6dff6f501d1
  :subject_name: Server Side Frameworks with Express
  :description: ''
  :instructor_notes: "##Assessments\r\n\r\n- Intro to Express - https://students.galvanize.com/cohorts/13/daily_plans/2015-06-03
    (2nd half of page)\r\n- Express Calculator Exercise - https://students.galvanize.com/cohorts/13/daily_plans/2015-06-03
    (Very botom of Page)\r\n- Express CRUD Intro Exercise - https://github.com/gSchool/express_intro_exercise
    (Build a simple Puppies CRUD app with no DB)\r\n- Middleware and Method Override
    Notes - https://students.galvanize.com/cohorts/13/daily_plans/2015-06-04 (Covers
    bodyParser, serving static assets, and method override)\r\n- Library App Assignment
    - https://github.com/gSchool/express_library_app (Check out solution branch)\r\n-
    Intro to Mongo - https://students.galvanize.com/cohorts/13/daily_plans/2015-06-08
    (Covers mongo in the console, no express)\r\n- Mongo Console Exercise - https://github.com/gSchool/mongo_console_exercises
    (Covers CRUD in the Mongo console)\r\n- Express Basics Assessment - https://github.com/gSchool/express-basics-assessment
    (Students need to Fix Bugs, Explain Code, and Write their own routes)\r\n- Mongoose
    Book App - https://github.com/gSchool/mongoose_book_app (Mongoose + Express.  Branch
    includes Author model and implements 1:M relationship.  Another branch demos the
    Express Router)\r\n- The Song that Doesn't End - https://github.com/gSchool/song-that-doesnt-end-js
    (Express basics exercise - routing and templates)\r\n- MonogDB intro to Queries
    and CRUD - https://github.com/gSchool/mongodb-introduction-to-querying-and-aggregation\r\n-
    Auth in Express Lecture - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/js-express/authentication-in-express.md\r\n-
    Express + psql - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/js-express/express-psql-raw-sql-bootstrap.md\r\n-
    Intro to Express Notes - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/js-express/introduction-to-express.instructor.md\r\n-
    Library App Assignment pt. 2 - https://github.com/gSchool/express_library_app_with_request\r\n-
    Body Parser Exercise - https://github.com/gSchool/module-exports-body-parser-practice
    (Covers body-parser and use of module exports and require)\r\n- Mail Merge Exercise
    - https://github.com/gSchool/mail-merge-express\r\n- Objects To Tables - https://github.com/gSchool/objects-to-tables-js\r\n-
    Markdown Table Processor - https://github.com/gSchool/markdown-table-processor
    (Mongo / Monk / Algorithms / Client-Side code Full Day)\r\n- Express Mongo CRUD
    - https://github.com/gSchool/express-mongo-crud (Gradual release of responsibility,
    Express Mongo CRUD Full Day)\r\n- Travel App - https://github.com/gSchool/placesIveTraveled
    (A single page app - given a simple CRUD and need to make the root route a singple
    page app that uses ajax)\r\n- Reddit Clone - https://github.com/gSchool/reddit_clone_express
    (covers models, association and auth (solution - https://github.com/gSchool/reddit_clone_express_solution))\r\n-
    Environment Variables - http://www.andrewsouthpaw.com/2015/02/08/environment-variables/
    (What is an env variable? The ways in which to configure env variables.)\r\n-
    What is Express Middleware - http://alexperry.io/javascript/2015/08/06/what-is-express-middleware.html\r\n-
    LMS Express Concepts - https://coursework.galvanize.com/assessments/28\r\n- GH
    Node-Monk-HBS-assessment - https://github.com/gSchool/node-monk-hbs-assessment\r\n-
    GH g8-CRUD-assessment3 - https://github.com/gSchool/g8_crud_assessment3\r\n- GH
    g8-CRUD-assessment2 - https://github.com/gSchool/g8_crud_assessment2\r\n- GH g8-CRUD-assessment
    - https://github.com/gSchool/g8_crud_assessment\r\n- GH express-mongo-associations-assessment
    - https://github.com/gSchool/express-mongo-associations-assessment\r\n\r\n\r\nExpress
    repos\r\n\r\n- https://github.com/gSchool/express-higher-order-function-practice\r\n-
    https://github.com/gSchool/express-middleware-practice\r\n- https://github.com/gSchool/express-mongo-crud\r\n-
    https://github.com/gSchool/express-passport-linkedin\r\n- https://github.com/gSchool/express-validations-intro\r\n-
    https://github.com/gSchool/express_itunes_guessing_game\r\n- https://github.com/gSchool/express_library_app\r\n-
    https://github.com/gSchool/express_library_app_with_request\r\n- https://github.com/gSchool/express-cookie-basics\r\n-
    https://github.com/gSchool/express-crud-validations\r\n- https://github.com/gSchool/express-passport-linkedin-solution\r\n-
    https://github.com/gSchool/node_mongo_heroku_deployment\r\n- https://github.com/gSchool/song-that-doesnt-end-js\r\n-
    https://github.com/gSchool/mail-merge-express\r\n- https://github.com/gSchool/reddit_clone_express\r\n-
    https://github.com/gSchool/markdown-table-processor\r\n- https://github.com/gSchool/objects-to-tables-js\r\n-
    https://github.com/gSchool/g11-course-curriculum/tree/master/week07/07_exercises/node-shuffle-chunk\r\n-
    https://github.com/gSchool/g11-course-curriculum/tree/master/week08/08_exercises/node-shopping-list\r\n-
    MVC Intro - https://realpython.com/blog/python/the-model-view-controller-mvc-paradigm-summarized-with-legos/\r\n-
    https://github.com/gSchool/g11-course-curriculum/tree/master/week08/08_exercises/node-github-contest\r\n-
    Swig Templating Primer - http://mherman.org/blog/2015/08/23/primer-on-swig-templating\r\n-
    Node, Express, Swig, and MongoDB - Getting Started With CRUD - http://mherman.org/blog/2015/08/24/node-express-swig-mongo-primer\r\n-
    http://adrianmejia.com/images/express-middlewares.png\r\n\n\n##Assessments\r\n-
    [LMS Query Params](https://coursework.galvanize.com/assessments/8)\r\n- [LMS Node/Express
    Intro](https://coursework.galvanize.com/assessments/41)\r\n- [LMS Express/Middleware](https://coursework.galvanize.com/assessments/82)"
- :uuid: 49275f51-fb52-4c08-a691-ecbc22f6a2e9
  :name: Auth
  :subject_uuid: 49275f51-fb52-4c08-a691-ecbc22f6a2e9
  :subject_name: Auth
  :description: ''
  :instructor_notes: "Implementing post-login redirects using cookies / session would
    be a 4\r\nIn lessons cover the difference between hashing and encryption\r\n\n\nHaving
    done it once is enough - they don’t need to memorize the setup steps"
- :uuid: 412ea142-dd72-4e21-8e52-2bb72ad3e09b
  :name: Promises
  :subject_uuid: 412ea142-dd72-4e21-8e52-2bb72ad3e09b
  :subject_name: Promises
  :description: Success Criteria
  :instructor_notes: "Assessments\r\nWriteup/discussion\r\nWhat are promises?\r\nHow
    do promises work?\r\nWhat problems do promises solve for developers?\r\nWhen is
    it appropriate to use promises?"
- :uuid: 2305e956-adeb-49e4-8b0d-2600b10ddfdc
  :name: Datastores
  :subject_uuid: 2305e956-adeb-49e4-8b0d-2600b10ddfdc
  :subject_name: Datastores
  :description: ''
  :instructor_notes: "### Assessments\r\n- https://github.com/gSchool/sql-assessment\r\n-
    [LMS Intro to SQL](https://coursework.galvanize.com/assessments/84)\r\n- [LMS
    SQL DDL ](https://coursework.galvanize.com/assessments/86)\r\n\r\n## Resources\r\nCONCAT?\r\n[Intro
    to Relational DBs](https://vimeo.com/142036155)\r\n\n\n##Assessments\r\n- [LMS
    Ruby, SQL, Rails, Rspec assessment (contains SQL questions about pertaining to
    this standard) ](https://coursework.galvanize.com/assessments/49)\r\n\r\n## Objectives:\r\nWrites
    CRUD statements using MongoDB operations\r\nUses operators for common query modifications\r\nsort\r\nlimit\r\n$in\r\n\n\n##
    Assessments\r\nGiven a words explanation of a data model, design the schema\r\nGiven
    a human problem, design a data model\r\n\r\n## Resources\r\n[Entity Relationship
    Diagrams](https://vimeo.com/142034756)\r\n\n\n##Assessments\r\n- [LMS PG assessment](https://coursework.galvanize.com/assessments/85)\r\n##
    Slides\r\n* [Danny - pg](https://docs.google.com/a/galvanize.com/presentation/d/1rJgJPsk6hWjYj8Lb1Rftz8tEZWsdRG-2PkJbUdDTxag/edit?usp=sharing)"
- :uuid: 2886a5f1-92f6-44ba-8adb-185b2a161870
  :name: Deployment
  :subject_uuid: 2886a5f1-92f6-44ba-8adb-185b2a161870
  :subject_name: Deployment
  :description: "Objectives\r\n\r\n- Can start a database shell from the command line
    (heroku pg:psql)\r\n- Can tail logs (heroku logs -t)\r\n- Set and read environment
    variables (heroku config / heroku config:set)\r\n- Can run a single command (heroku
    run)\n\nRationale\r\n\r\n- Pivotal owns Cloud Foundry and is a strategic partner
    looking to hire dozens of developers\r\n- Pivotal customers of Cloud Foundry (like
    GE, AllState, Ford etc…) are looking to hire hundreds if not thousands of developers\r\n-
    IBM Bluemix runs on Cloud Foundry and IBM is a strategic partner looking to hire
    hundreds if not thousands of developers\r\n\r\nObjectives\r\n\r\n- Student has
    a functioning app on Cloud Foundry w/ bound services\r\n- Can tail logs\r\n- Set
    and read environment variables\r\n- Can modify the start command in order to run
    a single command\r\n- Can cf push an app using a manifest.yml file"
  :instructor_notes: "##Assessments\r\n- [LMS Deployment Assessment (Key Terms)](https://coursework.galvanize.com/assessments/68)\n\n\n\nObjectives\r\n\r\n-
    Describe the concept of a container and how it plays a part in large deployments\r\n-
    Compare and contrast docker containers vs virtual machines / virtualization\r\n\n\n\n\n-
    https://github.com/gSchool/bluemix_notes\r\n\n\nObjectives\r\n\r\n- Provision
    an EC2 instance using the AWS management console (command line is bonus)\r\n-
    Describe an AMI\r\n- Login to an EC2 box with their credentials\r\n- Setup security
    to open sane ports\r\n- Get code on the box\r\n- scp / RSync / ssh in and git
    pull (github deploy keys)\r\n\n\nObjectives\r\n\r\n- Describe public / private
    keys\r\n- Initiate an ssh session w/ a specific key\r\n- Describe the concept
    of an ssh session\r\n\n\nObjectives\r\n\r\nDescribe the function and purpose of
    Chef / Puppet / Salt / Ansible\r\nAttach an Analytics tool such as NewRelic /
    Skylight / Datadog\r\nException Handling\r\nAutomated provisioning / scaling"
- :uuid: ce60c0de-9f49-423f-bbbe-7fea0c1b875c
  :name: Architecture
  :subject_uuid: ce60c0de-9f49-423f-bbbe-7fea0c1b875c
  :subject_name: Architecture
  :description: http://12factor.net/
  :instructor_notes: ''
- :uuid: 39680f2e-8004-4029-a637-1722f5b54625
  :name: UX User Testing
  :subject_uuid: 39680f2e-8004-4029-a637-1722f5b54625
  :subject_name: UX User Testing
  :description: ''
  :instructor_notes: "## Exercise\r\n\r\nTake a project you have done in the past.
    Could be a quarter project.\r\nPair up the students. Have the students take turns
    doing usability testing.\r\nThe person doing the testing needs to give the user
    a task to do, watch them, take notes, and not help them.\r\n\r\n## Assessment\r\n\r\n*
    [LMS User Testing Assessment](https://coursework.galvanize.com/assessments/90)"
- :uuid: b7090a92-612d-4811-ac2c-8d750e5fab1d
  :name: Client Side Frameworks (Angular)
  :subject_uuid: b7090a92-612d-4811-ac2c-8d750e5fab1d
  :subject_name: Client Side Frameworks (Angular)
  :description: "- https://gist.github.com/Colt/0a029fcdc7fddd23a27e\r\n- The Basics
    of Angular - W/S pt1 - https://github.com/gSchool/intro-to-angular-workshop (The
    basics of Angular from initial setup)\r\n- Angular Advanced Topics - https://github.com/MartinChavez/AngularJS-Advanced-Topics\r\n-
    Angular Patterns - https://www.youtube.com/watch?v=UlvCbnKAH3g\r\n- https://thinkster.io/a-better-way-to-learn-angularjs/\r\n-
    https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance\r\n-
    http://weblogs.asp.net/dwahlin/creating-custom-angularjs-directives-part-3-isolate-scope-and-function-parameters\r\n\r\nVideos:\r\n\r\n<iframe
    src=\"https://player.vimeo.com/video/136159945?byline=0&portrait=0\" width=\"500\"
    height=\"513\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\r\n\r\n---\r\n\r\n<iframe
    src=\"https://player.vimeo.com/video/135991632?byline=0&portrait=0\" width=\"500\"
    height=\"388\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\r\n\r\n---\r\n\r\n<iframe
    src=\"https://player.vimeo.com/video/135907781?byline=0&portrait=0\" width=\"500\"
    height=\"456\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\r\n\r\n---\r\n\r\n<iframe
    src=\"https://player.vimeo.com/video/135898971?byline=0&portrait=0\" width=\"500\"
    height=\"489\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\r\n\r\n---\r\n\r\n<iframe
    src=\"https://player.vimeo.com/video/135778837?byline=0&portrait=0\" width=\"500\"
    height=\"313\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>"
  :instructor_notes: "###Assessments\r\n- [LMS Angular Unit 1](https://coursework.galvanize.com/assessments/69)\r\n-
    [GH React Assessment](https://github.com/gSchool/react-assessment)\r\n- [GH g10-angular-assessment](https://github.com/gSchool/g10-angular-assessment)\r\n-
    [GH Angular Practice Assessment (practically same as above)](https://github.com/gSchool/angular-practice-assessment)\n\n**Objectives**
    \ \r\nIdentify some clear use cases for creating custom directives\r\n\r\n\n\n**Resources**
    \  \r\n- https://github.com/auth0/angular-jwt\r\n- https://github.com/auth0/express-jwt\r\n-
    https://github.com/gSchool/angular-curriculum/blob/master/Unit-3/examples/auth_example"
- :uuid: dfec3119-3ba1-4a14-ba2c-9f66715f4b98
  :name: Agile Project Management
  :subject_uuid: dfec3119-3ba1-4a14-ba2c-9f66715f4b98
  :subject_name: Agile Project Management
  :description: "* Ask “What is agile?”,\r\n* Response should reflect/touch on the
    principles.\n\n* http://agilemanifesto.org/\r\n* http://www.halfarsedagilemanifesto.org/
    ;)"
  :instructor_notes: Students don’t have to recall the principles, just talk about
    what they mean when presented with them.
- :uuid: 0f6ed5e9-c172-4969-b990-f2324c91f5ad
  :name: Designing APIs
  :subject_uuid: 0f6ed5e9-c172-4969-b990-f2324c91f5ad
  :subject_name: Designing APIs
  :description: ''
  :instructor_notes: ''
- :uuid: 40104e17-a0e4-4bc4-b499-5030c197cb81
  :name: Automated Testing
  :subject_uuid: 40104e17-a0e4-4bc4-b499-5030c197cb81
  :subject_name: Automated Testing
  :description: "[Student-Test-Reporters](https://github.com/gSchool/student-test-reporters)"
  :instructor_notes: "###Assessments\r\n- Red,Green,Refactor should be observed when
    working on the following exercises and assessment.\r\n- [LMS JavaScript Testing
    Basics with Mocha and Chai](https://coursework.galvanize.com/assessments/60)\r\n-
    [GH Lodash TDD - w/jasmine](https://github.com/gSchool/lodash-tdd)\r\n- [GH editor_oo_tdd_practice](https://github.com/gSchool/editor_oo_tdd_practice)\r\n-
    [GH Express-API-TDD w/supertest and mocha](https://github.com/gSchool/express-api-tdd-supertest-mocha)\r\n-
    Tests may not require `before`, `beforeAll`, `after`, and `afterAll`\r\n\r\nObjective\r\n\r\nlist
    alternatives to Mocha, list alternatives to Chai\r\n\r\nVocabulary\r\n\r\nRed
    / Green / Refactor\r\nSetup / Execution / Assertion(Expectation) / Teardown\n\n###Assessments\r\n-
    Group and Class Discussions on Pros and Cons\r\n- [LMS Automated Testing Basics
    Assessment](https://coursework.galvanize.com/assessments/87) (Covers pros and
    cons listed below. Suggest assigning the assessment, and allowing the students
    to pair/discuss/defend their reasons. Then reviewing together as a class).\r\n
    \   * Pros\r\n        * Lower Bug Count\r\n        * Faster Pace of Change\r\n
    \       * Executable Documentation\r\n        * Higher Confidence Deploys\r\n
    \       * Reduced Cost over time\r\n        * Easily repeatable for team\r\n    *
    Cons \r\n        * Huge investmet of time initially\r\n        * Complex Cases\r\n
    \       * Design Impacts\r\n        * Continous Tweaking of Tests\r\n        *
    Testing the wrong thing\r\n\r\n\r\n\r\n**Objective**\r\nBDD vs. TDD - what’s the
    difference? vs testing after the fact (flavors)\r\n\r\n**Vocabulary**\r\nExploratory
    testing"
- :uuid: a3a04645-41a3-4bb6-89e6-7c9b789a797d
  :name: ES2015
  :subject_uuid: a3a04645-41a3-4bb6-89e6-7c9b789a797d
  :subject_name: ES2015
  :description: "https://github.com/gSchool/es2015-with-babeljs\r\n\n\n\n\n- http://kangax.github.io/compat-table/es6/
    - compatibility tables for ES6\r\n- https://babeljs.io/repl/ - convert ES6 code
    in a browser to an ES5-safe version for most features\r\n- https://leanpub.com/javascriptallongesix/read"
  :instructor_notes: There isn’t one for this, but there’s a handful of es6 / es5
    examples in the repo. We should probably extract a set of ES5 code and ask students
    to write out the ES6 equivalents for those. That, combined with a quiz of a few
    questions would be sufficient for this section.
- :uuid: e43b79ad-875a-4817-8ac0-68f7f47f3b42
  :name: OOP w/ Statically Typed Language
  :subject_uuid: e43b79ad-875a-4817-8ac0-68f7f47f3b42
  :subject_name: OOP w/ Statically Typed Language
  :description: Cracking the coding interview (book)
  :instructor_notes: "Objectives: \r\n\r\n- Favor classes to builtin data types\r\n-
    Explain how the JVM works\r\n    - Identify that the JVM is a virtual machine\r\n
    \   - Explain how the language compiles into bytecode\r\n    - Describe structure
    of a compiled application (entry points / main in java)\r\n    - Identify other
    languages that run on the JVM\r\n\n\n- https://github.com/gSchool/java-challenges\r\n-
    https://github.com/gSchool/setting-up-java8-environment\r\n- https://github.com/gSchool/amusement-parks-java\r\n-
    https://github.com/gSchool/java-exercise-template\r\n- https://github.com/gSchool/word-cloud-java\r\n-
    https://github.com/gSchool/data-structures-java\r\n- https://github.com/akullpp/awesome-java\n\n###Assessments\r\n-
    [LMS Week 4 Assessment (contains questions pertaining JS inheritance)](https://coursework.galvanize.com/assessments/26)\r\n-
    [LMS Classical Object-Oriented Programming in Java: Part 1](https://coursework.galvanize.com/assessments/77)\r\n-
    [LMS Classical Object-Oriented Programming Basics](https://coursework.galvanize.com/assessments/76)"
- :uuid: d5947e67-9d70-4e02-ae2a-b3135a9c1667
  :name: Data Structures / Algorithms
  :subject_uuid: d5947e67-9d70-4e02-ae2a-b3135a9c1667
  :subject_name: Data Structures / Algorithms
  :description: "Examples may be: \r\n* k-means\r\n* kNN (k nearest neighbor)\r\n*
    checksum\r\n* DFS\r\n* BFS\r\n\n\n\n\n[Cracking the Coding Interview Process](https://qph.is.quoracdn.net/main-qimg-379a9cf0a7bd42f8084d137370e4bd79?convert_to_webp=true)\n\n\n\n\n\n\n\n\n\nhttp://bigocheatsheet.com/"
  :instructor_notes: "### Assessments\r\n* If you want to know if two files are the
    same, which algorithm would you use? Why?\n\n\n\n\n\n###Assessments\r\n- [LMS
    JS Fundamentals, DOM, Iterators, CS and OOP](https://coursework.galvanize.com/assessments/38)\n\n\n\n###Assessments\r\n-
    [LMS JS Fundamentals, DOM, Iterators, CS and OOP](https://coursework.galvanize.com/assessments/38)"
- :uuid: e59bae37-553b-4c1b-8667-4dbbdeeae98d
  :name: Technical Interview Prep
  :subject_uuid: e59bae37-553b-4c1b-8667-4dbbdeeae98d
  :subject_name: Technical Interview Prep
  :description: ''
  :instructor_notes: "- Introduction to Technical Resumes - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/interviews/resumes.instructor.md
    (Works through some sample resumes trying to highlight what a good bullet point
    looks like)\r\n- Introduction to Cover Letters - https://github.com/gSchool/fullstack-curriculum/blob/master/lessons/interviews/cover-letters.instructor.md
    (Student activity with actual job postings that are very different to suss out
    what they like and don't about a given job posting)\r\n- https://github.com/gSchool/group_project_specs\r\n-
    https://github.com/gSchool/employment-links\r\n- https://github.com/gSchool/interview-questions\r\n-
    https://github.com/gSchool/sf-interview-questions"
- :uuid: 0bef6db4-d566-48c2-a5f5-ff09fce3b846
  :name: Application Analysis in Unfamiliar Environment
  :subject_uuid: 0bef6db4-d566-48c2-a5f5-ff09fce3b846
  :subject_name: Application Analysis in Unfamiliar Environment
  :description: "Success Criteria\r\n\r\n- Fixes bugs in existing, unfamiliar code
    (at least 1)\r\n- Adds features to fulfill requirements (at least 1)\r\n\r\n\n\n\n\nRails
    Bug Repos\r\n\r\n- https://github.com/gSchool/rails-bug-01\r\n- https://github.com/gSchool/rails-bug-06\r\n-
    https://github.com/gSchool/rails-bug-05\r\n- https://github.com/gSchool/rails-bug-03\r\n-
    https://github.com/gSchool/rails-bug-04\r\n\r\n## Good Repos for Beginners\r\n-
    https://github.com/MunGell/awesome-for-beginners\n\nSuccess Criteria\r\n\r\n-
    Install all necessary dependencies and start attached services\r\n- Local database
    is created and populated\r\n- Application starts and all “working” features are
    usable"
  :instructor_notes: "We could run a “first-week” simulation - several days of setting
    up dev environments and working through complex code bases.\r\n\r\n###Assessments\r\n-
    [LMS Params Ruby](https://coursework.galvanize.com/assessments/15)\r\n- [GH Rails
    Debugging](https://github.com/gSchool/rails-assessment-debugging)\r\n- [GH Programming
    Fundementals](https://github.com/gSchool/programming-fundamentals-assessments/tree/master/ruby)\r\n-
    [LMS Intro to Ruby Syntax](https://coursework.galvanize.com/assessments/44)\r\n-
    [LMS Ruby Methods](https://coursework.galvanize.com/assessments/45)\r\n- [LMS
    Anatomy of a Class](https://coursework.galvanize.com/assessments/9)\r\n- [LMS
    Rails Naming](https://coursework.galvanize.com/assessments/5)\r\n- [LMS Hashes
    & Symbols](https://coursework.galvanize.com/assessments/46)\r\n- [LMS Routes (Ruby)](https://coursework.galvanize.com/assessments/10)\r\n-
    [LMS Ruby Classes and Inheritance](https://coursework.galvanize.com/assessments/47)\r\n-
    [LMS Ruby, Rails, Rspec, SQL quiz](https://coursework.galvanize.com/assessments/49)\r\n-
    [GH Sinatra Assessment](https://github.com/gSchool/sinatra-assessment)\r\n- [GH
    intro-tdd-assessment (Rspec)](https://github.com/gSchool/intro_to_tdd_assessment)\r\n-
    [GH Denver-Assessment-week-4 (RUBY)](https://github.com/gSchool/denver-assessment-week-4)\r\n-
    [GH CageFlix-Netflix for Nic Cage - (RUBY/CRUD)](https://github.com/gSchool/g3-assessment-week-12)\r\n-
    [GH Ruby Practice Assessment](https://github.com/gSchool/practice_assessment)\r\n-
    [GH g5-assessment-ruby](https://github.com/gSchool/g5-assessment-ruby)\r\n- [GH
    rails_end_unit_assessment](https://github.com/gSchool/rails_end_unit_assessment)\r\n-
    [GH Contact List Assessment (RUBY)](https://github.com/gSchool/denver-assessment-week-5)\r\n-
    [GH g2-final-assessment-ruby (Hydroponics Tracker)](https://github.com/gSchool/g2-final-assessment-ruby)\r\n-
    [GH g2-final-assessment-rails)](https://github.com/gSchool/g2-final-assessment-rails)\r\n-
    [GH g7-rails-assessment-03](https://github.com/gSchool/g7-rails-assessment-03)\r\n-
    [GH g7-rails-assessment-02](https://github.com/gSchool/g7-rails-assessment-02)\r\n-
    [GH g7-rails-assessment-07](https://github.com/gSchool/g7-rails-assessment-01)\r\n-
    [GH g2-midterm-assessment-rails](https://github.com/gSchool/g2-midterm-assessment-rails)\r\n-
    [GH g2-midterm-assessment-ruby](https://github.com/gSchool/g2-mid-term-assessment-ruby)\r\n-
    [GH denver-practice-assessment-week-3 (RUBY)](https://github.com/gSchool/denver-practice-assessment-week-3)\n\nNotes:\r\n\r\nApp
    should have oauth where they need to setup an app, some other database, have to
    tweak some ENV variables\r\n\r\nLook at 7 languages in 7 weeks"
